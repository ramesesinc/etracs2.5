import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.services.extended.*;

public class CityEngineerBPApplicationService {

	@Service("BPApplicationService")
	def appSvc;

	@Service("SequenceService")
	def seqSvc;

	@Service("DateService")
	def dateSvc;

	@Env
	def env;

	@ActiveDB("business_cityengineer")
	def em;

	@ProxyMethod
	public def open(def o) {
		def z = appSvc.open(o);
		z.taxfees = em.getFees(z);
		z.total = z.taxfees.sum{it.amount};
		//we hardcode the department.
		z.department = 'CEO';
		z.departmentname = 'CITY ENGINEER';
		return z;
	}
	
	@ProxyMethod
	public def addFee(def o) {
		em.create( o, "fee" );
	}

	@ProxyMethod
	public def updateFee(def o) {
		em.update( o, "fee" );
	}

	@ProxyMethod
	public def removeFee(def o) {
		em.delete( o, "fee" );
	}

	@ProxyMethod
	public def submitFees(o) {
		def z = [businessid:o.businessid, state:'active']
		em.activateFees( z );
		em.changeState(z);
	}

}