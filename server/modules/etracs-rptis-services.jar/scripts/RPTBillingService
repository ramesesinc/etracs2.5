import com.rameses.annotations.*;
import java.rmi.server.*;
import com.rameses.rules.common.*;
import com.rameses.util.*;


public class RPTBillingService
{
	@PersistenceContext('main')
	def em 

	@Service('RPTUtil')
	def util

	@Service('Var')
	def var 

	@Service('DateService')
	def dtSvc 

	@Service('NumberService')
	def numSvc

	@Service('RPTLedgerService')
	def ledgerSvc 

	@Resource("RuleService")
	def ruleSvc;

	def RULESET = 'rptbilling'
	def FACT_PACKAGE = 'rptbilling.'


	@ProxyMethod
	public def generateBillByLedgerId(ledgerid){
		def bill = initBill()
		bill.ledgerids = [
			[ledgerid:ledgerid]
		]
		return generateBill(bill)
	}

	/*---------------------------------------------------------------
	* Called by RPTBilling Task to recalculate and update the
	* taxes and penalties of the specified ledger
	---------------------------------------------------------------*/
	@ProxyMethod
	public void calculateBillByLedgerIdAsync(ledgerid){
		def bill = initBill()
		bill.ledgerids = [
			[ledgerid:ledgerid]
		]
		recalcBillItems(bill)
	}

	@ProxyMethod
	public def generateBill( bill ) {
		util.required('Bill Date', bill.billdate)
		util.required('Bill To Year', bill.billtoyear)
		util.required('Bill To Qtr', bill.billtoqtr)

		bill.billdate = dtSvc.parse('yyyy-MM-dd', bill.billdate)
		if (bill.taxpayer) bill.putAll( bill.taxpayer )
		
		if (! bill.taxpayerid && ! bill.ledgerids)
			throw new Exception('Either a Taxpayer or Ledger to bill is required.')

		if (bill.advancebill && bill.billdate <= (parsedate.date - 1 ))
            throw new Exception('Advance Billing Date must be greater than current date.')
		
		recalcBillItems(bill)
		loadBillItems(bill)

		if (!bill.items) 
			throw new Exception('There are no unpaid ledgers for payment.')

		//calculate expirydate
		bill.expirydate = dtSvc.parse('yyyy-MM-dd', '2013-07-31')
		
		return bill
	}


	@ProxyMethod
	public def getLedgersToRecalc(count){
		return em.sqlContext.createNamedQuery('rptbill:getLedgersToRecalc')
				.setMaxResults(count)
				.setParameter('billdate', dtSvc.serverDate)
				.resultList
	}

	@ProxyMethod
	public def initBill(){
		def pdate = dtSvc.parseCurrentDate()
		return [
			billdate			: pdate.date,
			billtoyear 			: pdate.year,
			billtoqtr			: 4,
			advancebill			: false,
			fullpayment    		: true,
            qtrlypaymentavailed : false, 
            advancepayment      : false,
            currentdate 		: pdate.date,
            ledgerids 			: [],
		]
	}

	@ProxyMethod
	public void recalcBillItems(bill){
		bill.items = getOpenLedgerItems(bill)
		if ( bill.items) {
			def data = createFacts(bill)
			ruleSvc.execute( RULESET, data.facts, data.globals );
			buildResult(bill, data)
			updateLedgerBillingInfo(bill)
		}
	}

	@Async
	@ProxyMethod
	public def recalcBillItemsAsync( bill ) {
		recalcBillItems(bill)	
	}

	def createFacts(bill){
		def pdate = dtSvc.parseCurrentDate()

		def map = [facts:[], globals:[:], ledgers:[]]
		map.facts << new DateBean(dtSvc.serverDate)

		//create rptledgerfact 
		bill.items.each{ 
			resetAssessmentValues(it)
			def ledger = ruleSvc.createFact(RULESET, FACT_PACKAGE+'RPTLedgerFact')
			populateFactData(ledger, it)
			ledger.numberofmonthsfromqtr  = calculateNoOfMonthsFromQtr( pdate, ledger.year, ledger.qtr )
            ledger.numberofmonthsfromjan  = calculateNoOfMonthsFromJan( pdate, ledger.year, ledger.qtr )
            ledger.firstqtrpaidontime     = determineFirstQtrPaidOnTime( pdate, bill, it )
            ledger.qtrlypaymentavailed    = determineQtrlyPaymentAvailed( bill, it )
			ledger.qtrlypaymentpaidontime = util.toBoolean(it.qtrlypaymentpaidontime, false )
            ledger.fullpayment            = ( bill.billtoqtr == 4 && it.lastqtrpaid == 4 ? true : false )
            ledger.advancepayment         = bill.advancepayment 
            ledger.paidyear				  = pdate.year 
			map.facts << ledger 
			map.ledgers << ledger
		}
		return map 
	}

	void resetAssessmentValues(item){
		item.basic = 0.0
		item.basicint = 0.0
		item.basicdisc = 0.0
		item.basiccredit = 0.0
		item.sef = 0.0
		item.sefint = 0.0
		item.sefdisc = 0.0
		item.sefcredit = 0.0
	}

	void populateFactData(target, sourceMap){
		sourceMap.keySet().each{
			try{
				target[it] = sourceMap[it]
			}
			catch(e){
				//ignore
			}
		}
	}

	void updateLedgerBillingInfo(bill){
		//TODO: update next bill date 
		def nextbilldate = dtSvc.add(bill.expirydate, '1d')
		def ledgerinfo = [
			nextbilldate : nextbilldate,
		]
		
		if ( bill.ledgerids && bill.ledgerids.size() > 0) {
			bill.ledgerids.each{
				ledgerinfo.ledgerid = it.ledgerid
				em.sqlContext.createNamedExecutor('rptbill:updateLedgerNextBillDate')
							.setParameters(ledgerinfo)
							.execute()
			}
		}
		else {
			ledgerinfo.taxpayerid = bill.taxpayerid 
			em.sqlContext.createNamedExecutor('rptbill:updateLedgerNextBillDateByTaxpayerId')
							.setParameters(ledgerinfo)
							.execute()
			println 'TODO: updateLedgerNextBillDateByPropertyPayer'
		}

		bill.items.each{
			ledgerSvc.updateLedgerItem(it)
		}
	}




	void loadBillItems(bill){
		def params = [
			billtoyear	: bill.billtoyear,
			billtoqtr   : bill.billtoqtr,
			taxpayerid  : bill.taxpayerid,
		]
		bill.items = []

		bill.items.addAll(bill.ledgerids)
		if ( ! bill.ledgerids || bill.ledgerids.size() == 0) {
			bill.items.addAll(
				em.sqlContext.createNamedQuery('rptbill:getBilledLedgersByTaxpayerId')
								.setParameters(params)
								.resultList
			)
			println 'TODO:getBillItemByPropertyPayer'
		}
		
		bill.items.each{ item ->
			params.ledgerid = item.ledgerid 
			item.putAll(
				em.sqlContext.createNamedQuery('rptbill:getBilledLedgerInfoByLedgerId')
							.setParameters(params)
							.singleResult 
			)
			item.details = em.sqlContext.createNamedQuery('rptbill:getBilledItemsByLedgerId')
							.setParameters(params)
							.resultList 

			item.basic		= util.sum(item.details, 'basic')
			item.basicdp	= util.sum(item.details, 'basicdp')
			item.basicnet	= util.sum(item.details, 'basicnet')
			item.sef		= util.sum(item.details, 'sef')
			item.sefdp		= util.sum(item.details, 'sefdp')
			item.sefnet		= util.sum(item.details, 'sefnet')
			item.total		= util.sum(item.details, 'total')
		}

		//summarize totals
		bill.basic		= util.sum(bill.items, 'basic')
		bill.basicdp	= util.sum(bill.items, 'basicdp')
		bill.basicnet	= util.sum(bill.items, 'basicnet')
		bill.sef		= util.sum(bill.items, 'sef')
		bill.sefdp		= util.sum(bill.items, 'sefdp')
		bill.sefnet		= util.sum(bill.items, 'sefnet')
		bill.total		= util.sum(bill.items, 'total')
		bill.grandtotal = util.sum(bill.items, 'total')
	}


	def getOpenLedgerItems(bill){
		def items = []
		if ( bill.ledgerids && bill.ledgerids.size() > 0) {
			bill.ledgerids.each{
				items += em.sqlContext.createNamedQuery('rptbill:getOpenLedgerItemByLedgerId')
							.setParameter('ledgerid', it.ledgerid).resultList
			}
		}
		else {
			items += em.sqlContext.createNamedQuery('rptbill:getOpenLedgerItemByTaxpayerId')
							.setParameter('taxpayerid', bill.taxpayerid).resultList
			items += getOpenLedgerItemByPropertyPayer(bill)
		}
		return items 
	}


	def getOpenLedgerItemByPropertyPayer(bill){
		println 'TODO: getOpenLedgerItemByPropertyPayer'
		return []
	}


	int calculateNoOfMonthsFromQtr(pdate, year, qtr) {
		int currYear = pdate.year
		int currMonth = pdate.month
		qtr = ( qtr == 0 ? 1 : qtr )
		if(year < currYear) {
			return ((currYear - year) * 12 - (3 * (qtr-1))) + currMonth 
		}
		else {
			int nm = currMonth - (3 * (qtr-1))
			return nm < 0 ? 0 : nm
		}
	}
	
	int calculateNoOfMonthsFromJan(pdate, year, qtr) {
		int currYear = pdate.year
		int currMonth = pdate.month
		if(year < currYear) {
			return ( currYear - year ) * 12 + currMonth
		}
		else {
			return currMonth
		}
	}

	boolean determineFirstQtrPaidOnTime( pdate, bill, item ) {
        if( pdate.qtr == 1 && item.lastyearpaid == pdate.year -1 && item.lastqtrpaid == 4 ) return true 
        if( item.lastyearpaid == pdate.year && item.lastqtrpaid >= 1 && pdate.qtr == 1 ) return true
        return item.firstqtrpaidontime
    }

    boolean determineQtrlyPaymentAvailed( bill, item ) {
        if( bill.billtoqtr != 4 ) return true 
        if( bill.billtoqtr == 4 && item.lastqtrpaid != 4 ) return true 
        return false 
    }
	
	void buildResult(bill, data){
		bill.items.each{item ->
			def ledger = data.ledgers.find{it.objid == item.objid}
			if (ledger){
				item.basic = numSvc.round(ledger.basic)
				item.basicint = numSvc.round(ledger.basicint)
				item.basicdisc = numSvc.round(ledger.basicdisc)
				item.sef = numSvc.round(ledger.sef)
				item.sefint = numSvc.round(ledger.sefint)
				item.sefdisc = numSvc.round(ledger.sefdisc)
				item.paidyear = ledger.paidyear 
			}
		}
	}

}
	