import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.util.*
import java.rmi.server.UID;

class SignatoryService
{
	@PersistenceContext('main')
	def em
	

	def SCHEMA_NAME = 'signatory'

	@ProxyMethod
	public def lookup( params ) {
		//
		//TODO: fetch this fom signatory template
		//
		params.searchtext = (params.searchtext ? params.searchtext : '') + '%'
		def qry = em.sqlContext.createNamedQuery('signatory:lookup')

		if (params._start == null) 
			params._start = 0

		qry.setFirstResult( params._start )

		if (params._limit != null) 
			qry.setMaxResults(params._limit)

		return qry.setParameters(params).resultList 	
	}


	@ProxyMethod
	public def initSignatories(entity, signatories){
		entity.signatories = []
		signatories.eachWithIndex{ signatory, idx ->
			entity.signatories << [
				objid : 'S' + new UID(),
				refid : entity.objid,
				type : signatory,
				seqno : idx,
			]
		}
	}

	@ProxyMethod
	public void saveSignatories(signatories) {
		signatories?.each{
			em.save(SCHEMA_NAME, it)
		}
	}

	
	@ProxyMethod
	public def getSignatories(entity){
		return em.sqlContext.createNamedQuery('signatory:getSignatories')
				.setParameter('refid', entity.objid).resultList
	}


	@ProxyMethod
	public def deleteSignatories(entity){
		em.sqlContext.createNamedExecutor('signatory:deleteSignatories').setParameter('refid', entity.objid).execute()
	}

}
