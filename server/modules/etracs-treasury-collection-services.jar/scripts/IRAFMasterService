import com.rameses.common.*;
import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.UID;

class IRAFMasterService
{
	@PersistenceContext("main")
	def em;
	
	def SCHEMA_NAME = "iraf";
	def STATE_DRAFT = "DRAFT";
	def STATE_APPROVED = "APPROVED";
	def CALENDAR = Calendar.getInstance();
	
	@ProxyMethod
	public def init() {}
	
	@ProxyMethod
	public def checkIRAFByRIV( riv ) {
		def iraf = em.sqlContext.createQuery("SELECT * FROM iraf WHERE state = 'DRAFT' AND riv_objid = '${riv.objid}'").singleResult;
		if( iraf ) throw new Exception("There is currently an open IRAF( ${iraf.txnno} ) for this RIV.");
	}
	
	@ProxyMethod
	public def create( iraf ) {
		if( iraf.riv.type != 'PURCHASE' ) iraf.txnno = getNextSeries(iraf.riv.type);
		
		def qry = em.sqlContext.createQuery("SELECT * FROM iraf WHERE txnno = '${iraf.txnno}'").singleResult;
		if( qry ) throw new Exception("IRAF No. ${iraf.txnno} already exist.");
		
		def requesteditems = iraf.requesteditems;
		iraf.remove("requesteditems");
		
		def issueditems = iraf.issueditems;
		iraf.remove("issueditems");
		
		EntityUtil.mapToField(iraf);
		em.validate(SCHEMA_NAME, iraf);
		em.create(SCHEMA_NAME, iraf);
		EntityUtil.fieldToMap(iraf);
		
		requesteditems.each{ reqitem->
			reqitem.irafid = iraf.objid;
			EntityUtil.mapToField(reqitem);
			em.validate("iraf:requesteditem", reqitem);
			em.create("iraf:requesteditem", reqitem);
			EntityUtil.fieldToMap(reqitem);
		}
		iraf.requesteditems = requesteditems;
		
		issueditems.each{ issueditem->
			issueditem.irafid = iraf.objid;
			EntityUtil.mapToField(issueditem);
			em.validate("iraf:issueditem", issueditem);
			em.create("iraf:issueditem", issueditem);
			EntityUtil.fieldToMap(issueditem);
		}
		iraf.issueditems = issueditems;
		return iraf;
	}	
	
	private def getNextSeries( rivtype ) {	
		def year = dateSvc.parseDate( dateSvc.serverDate, null ).year;
		def sequenceKey = "IRAF-" + rivtype[0] + year;
		return year + seqSvc.getNextFormattedSeriesA( sequenceKey, 6);	
	}
	
	@ProxyMethod
	public def update( iraf ) {
		def old = open(iraf);
		if( old.state != STATE_DRAFT ) throw new Exception("IRAF is already ${old.state}");
		
		def qry = em.sqlContext.createQuery("SELECT * FROM iraf WHERE txnno = '${iraf.txnno}'").singleResult;
		if( qry && qry.objid != iraf.objid ) throw new Exception("IRAF No. ${iraf.txnno} already exists.");
		
		def requesteditems = iraf.requesteditems;
		iraf.remove("requesteditems");
		
		def issueditems = iraf.issueditems;
		iraf.remove("issueditems");
		
		EntityUtil.mapToField(iraf);
		em.validate(SCHEMA_NAME, iraf);
		em.update(SCHEMA_NAME, iraf);
		EntityUtil.fieldToMap(iraf);
		
		em.sqlContext.createExecutor("DELETE FROM irafrequesteditem WHERE irafid = '${iraf.objid}'").execute();
		requesteditems.each{ reqitem->
			reqitem.irafid = iraf.objid;
			EntityUtil.mapToField(reqitem);
			em.validate("iraf:requesteditem", reqitem);
			em.create("iraf:requesteditem", reqitem);
			EntityUtil.fieldToMap(reqitem);
		}
		iraf.requesteditems = requesteditems;
		
		em.sqlContext.createExecutor("DELETE FROM irafissueditem WHERE irafid = '${iraf.objid}'").execute();
		issueditems.each{ issueditem->
			issueditem.irafid = iraf.objid;
			EntityUtil.mapToField(issueditem);
			em.validate("iraf:issueditem", issueditem);
			em.create("iraf:issueditem", issueditem);
			EntityUtil.fieldToMap(issueditem);
		}
		iraf.issueditems = issueditems;
		return iraf;
	}
	
	@ProxyMethod
	public def open( iraf ) {
		iraf = em.read(SCHEMA_NAME, iraf);
		if( !iraf ) throw new Exception("IRAF does not exist or has already been deleted.");
		EntityUtil.fieldToMap(iraf);
		
		iraf.requesteditems = em.sqlContext.createQuery("SELECT * FROM irafrequesteditem WHERE irafid = '${iraf.objid}'")
								.resultList.each{ EntityUtil.fieldToMap(it) };
		iraf.issueditems = [];
		def issueditems = em.sqlContext.createQuery("SELECT * FROM irafissueditem WHERE irafid = '${iraf.objid}'").resultList;
		issueditems.each{
			it = em.read("iraf:issueditem", it);
			EntityUtil.fieldToMap(it);
			iraf.issueditems.add(it);
		}
		return iraf;
	}
	
	@ProxyMethod
	public def approve( iraf ) {
		def old = open(iraf);
		if( old.state != STATE_DRAFT ) throw new Exception("IRAF is already ${old.state}");
		
		//Update RIV and RIV Items
		iraf.riv.state = "CLOSED";
		iraf.riv.items.each{ rivitem->
			def reqitem = iraf.requesteditems.find{ it.af.objid == rivitem.af.objid }
			
			rivitem.qtyissued += reqitem.qtyreceived;
			reqitem.qtyreceived = 0;
			reqitem.qtyissued = rivitem.qtyissued;
			if( rivitem.qtyissued < rivitem.qtyrequested ) iraf.riv.state = 'OPEN';
			
			EntityUtil.mapToField(rivitem);
			//em.update('riv:rivitem', rivitem);
			EntityUtil.fieldToMap(rivitem);
		}
		EntityUtil.mapToField(iraf.riv);
		em.update("riv", iraf.riv);
		EntityUtil.fieldToMap(iraf.riv);
		
		//Update IRAF
		iraf.state = STATE_APPROVED;
		snapshotCraaf();
		if( iraf.riv.type == "PURCHASE" )
			postToAFInventory(iraf);
		else
			postToAFInventoryCredit(iraf);
		
		return update(iraf);
	}
	
	private void postToAFInventory( iraf ) {
		iraf.issueditems.each{ issueditem->
			if( issueditem.af.type == "serial" ) {
				issueditem.prefix = issueditem.prefix? issueditem.prefix : "";
				issueditem.suffix = issueditem.suffix? issueditem.suffix : "";
				def qry = em.sqlContext.createNamedQuery("iraf:checkOverlappingSeries")
							.setParameters(issueditem)
							.singleResult;
				if( qry )  throw new Exception("There is an overlapping in series for AF Control ${issueditem.prefix} ${issueditem.startseries} - ${issueditem.endseries} ${issueditem.suffix}"); 
			}
			
			def af = em.sqlContext.createQuery("SELECT * FROM af WHERE objid = '${issueditem.af.objid}'");
			if( !af ) throw new Exception("AF ${issueditem.af.objid} does not exist.");
			
			def afi = em.sqlContext.createNamedQuery('iraf:getAFInventoryNextStubNo')
									.setParameters([iraf_objid:issueditem.irafid, af_objid:issueditem.af.objid])
									.singleResult;
			
			def stubto = issueditem.stubfrom? (issueditem.stubfrom+issueditem.qtyreceived)-1 : issueditem.qtyreceived;
			def afinventory = [
				objid		: "AFI"+new UID(),
				state		: "OPEN",
				iraf		: iraf,
				af			: issueditem.af,
				dtposted	: dateSvc.serverDate,
				currentstub	: afi? (afi.stubto+1) : issueditem.stubfrom,
				stubfrom	: afi? (afi.stubto+1) : issueditem.stubfrom,
				stubto		: afi? (afi.stubto+issueditem.qtyreceived) : stubto,
				prefix		: issueditem.prefix? issueditem.prefix : "",
				suffix		: issueditem.suffix? issueditem.suffix : "",
				startseries	: issueditem.startseries,
				endseries	: issueditem.endseries,
				beginqty	: issueditem.receivedqty,
				endqty		: issueditem.receivedqty,
				iyear		: CALENDAR.get( Calendar.YEAR ),
				imonth		: CALENDAR.get( Calendar.MONTH )+1
			];
			if( afinventory.imonth >= 1 && afinventory.imonth <= 3 ) afinventory.iqtr = 1;
			else if( afinventory.imonth >= 4 && afinventory.imonth <= 6 ) afinventory.iqtr = 2;
			else if( afinventory.imonth >= 7 && afinventory.imonth <= 9 ) afinventory.iqtr = 3;
			else if( afinventory.imonth >= 10 && afinventory.imonth <= 12 ) afinventory.iqtr = 4;
			issueditem.afinventoryid = afinventory.objid;
			
			EntityUtil.mapToField(afinventory);
			em.validate("afinventory", afinventory);
			em.create("afinventory", afinventory);
			
			def c = em.sqlContext.createQuery("SELECT COUNT(*) AS count FROM craaf WHERE afid = '${issueditem.af.objid}'").singleResult;
			if( c.count == 0 ) {
				def seriesfrom = "N/A";
				def seriesto = "N/A";
				if( issueditem.af.type == "serial" ) {
					def prefix = issueditem.prefix? issueditem.prefix+"-" : "";
					def suffix = issueditem.suffix? "-"+issueditem.suffix : "";
					seriesfrom = prefix + issueditem.startseries + suffix;
					seriesto = prefix + issueditem.endseries + suffix;
				}
				def craafyear = CALENDAR.get( Calendar.YEAR );
				def craafmonth = CALENDAR.get( Calendar.MONTH );
				if( craafmonth == 0 ) {
					craafyear--;
					craafmonth = 12;
				}
				
				def craaf = [
					objid			: "C"+new UID(),
					afinventoryid	: afinventory.objid,
					craafyear		: craafyear,
					craafmonth		: craafmonth,
					afid			: issueditem.af.objid
				];
				
				em.create("craaf", craaf);
			}
		}
	}
	
	private void postToAFInventoryCredit( iraf ) {
		iraf.requesteditems.each{ reqitem->
			for(int i=0; i<reqitem.receivedqty; i++) {
				def afinventory = em.sqlContext.createNamedQuery("iraf:getNextAFInventory")
									.setParameter("af_objid", reqitem.af.objid)
									.singleResult;
				if( !afinventory ) throw new Exception("There are no more Accountable Forms for AF ${reqitem.af.objid} in the inventory.");
				EntityUtil.fieldToMap(afinventory);
				
				def afinventorycredit = [
					objid			: "AFIC"+new UID(),
					afinventoryid	: afinventory.objid,
					state			: "OPEN",
					iraf			: iraf,
					af				: reqitem.af,
					prefix			: afinventory.prefix,
					suffix			: afinventory.suffix,
					stubno			: afinventory.currentstub,
					beginqty		: reqitem.af.pcsperunit,
					endqty 			: reqitem.af.pcsperunit
				];
				
				afinventory.issuedqty++;
				afinventory.endqty--;
				afinventory.currentstub++;
				
				if( reqitem.af.type == "serial" ) {
					afinventorycredit.startseries = (afinventory.issuedseriesto == 0)? afinventory.startseries : afinventory.issuedseriesto+1;
					afinventorycredit.endseries = afinventorycredit.startseries + reqitem.af.pcsperunit - 1;
					
					if( !afinventory.issuedseriesfrom || afinventory.issuedseriesfrom == 0 )
						afinventory.issuedseriesfrom = afinventorycredit.startseries;
						
					afinventory.issuedseriesto = afinventorycredit.endseries;
				}
				
				if( afinventory.endqty <= 0 ) afinventory.state = "CLOSED";
				
				em.update("afinventory", afinventory);
				em.validate("afinventorycredit", afinventorycredit);
				em.create("afinventorycredit", afinventorycredit);
				
				def afcontrol = [
					objid				: "AFC"+new UID(),
					state				: "APPROVED",
					active				: 0,
					mode				: "ONLINE",
					afinventorycreditid	: afinventorycredit.objid,
					dtissued			: dateSvc.serverDate,
					txndate				: iraf.txndate,
					collector			: iraf.riv.requestedby,
					stubno				: afinventorycredit.stubno,
					af					: afinventorycredit.af,
					assignedto			: iraf.riv.requestedby,
					prefix				: afinventorycredit.prefix,
					suffix				: afinventorycredit.suffix,
					startseries			: afinventorycredit.startseries,
					endseries			: afinventorycredit.endseries,
					currentseries		: afinventorycredit.startseries,
					beginqty			: afinventorycredit.beginqty,
					endqty				: afinventorycredit.endqty
				];
				
				//TO DO Add Cancelled Series
				/*def xiraf = em.read("iraf", [objid:afinventory.iraf.objid]);
				def issueditems = em.sqlContext.createQuery("SELECT * FROM irafissueditem WHERE irafid = '${afinventory.iraf.objid}'")
									.resultList.each{
										it = em.serializer.read(it);
										EntityUtil.fieldToMap(it);
									};
				issueditems = issueditems.findAll{ it.af.objid = afinventory.af.objid };
				def issueditem = issueditems.find{ it.startseries == afinventory.startseries && it.endseries == afinventory.endseries };
				if( !issueditem ) throw new Exception("There are no issued items for IRAF No. ${xiraf.txnno} with series ${afinventory.startseries} - ${afinventory.endseries}.");
				def cancelledseries = issueditem.cancelledseries.findAll{ it.fromseries >= afinventory.startseries && it.toseries <= afinventory.endseries };*/
				
				em.validate("afcontrol", afcontrol);
				em.create("afcontrol", afcontrol);
				
				def issueditem = [
					objid			: "IRAF-ITM"+new UID(),
					irafid			: iraf.objid,
					afinventoryid	: afinventory.objid,
					receivedqty		: 1,
					startseries		: afinventorycredit.startseries,
					endseries		: afinventorycredit.endseries,
					prefix			: afinventorycredit.prefix,
					suffix			: afinventorycredit.suffix,
					af				: afinventorycredit.af,
					stubno			: afinventorycredit.stubno
				];
				EntityUtil.mapToField(issueditem);
				em.validate("iraf:issueditem", issueditem);
				em.create("iraf:issueditem", issueditem);
				EntityUtil.fieldToMap(issueditem);
				
				if( !iraf.issueditems ) iraf.issueditems = [];
				iraf.issueditems.add(issueditem);
			}
		}
	}
	
	private void snapshotCraaf() {
		if( CALENDAR.get( Calendar.DATE ) == 1 ) {
			def params = [ 
				year: CALENDAR.get( Calendar.YEAR ),
				month: CALENDAR.get( Calendar.MONTH )+1
			];
			if( params.month == 1 || params.month == 2 ) params.year--;
			if( params.month == 1 ) params.month = 11;
			else if( params.month == 2 ) params.month = 12;
			else params.month -= 2;
			def prevPrevCraaf = em.sqlContext.createQuery("SELECT * FROM craaf WHERE craafyear = ${params.year} AND craafmonth = ${params.month}").resultList;
			def prevCraaf = [];
			params.month++;
			if( params.month == 13 ) {
				params.year++;
				params.month = 1;
			}
			prevPrevCraaf.each{ craafitem->
				def craaf = [
					objid				: "C"+new UID(),
					afinventoryid		: craafitem.afinventoryid? craafitem.afinventoryid : "",
					afinventorycreditid	: craafitem.afinventorycreditid? craafitem.afinventorycreditid : "",
					craafyear			: params.year,
					craafmonth			: params.month,
					afid				: craafitem.afid? craafitem.afid : "",
					beginqty			: craafitem.endqty? craafitem.endqty : 0,
					beginfrom			: craafitem.endfrom? craafitem.endfrom : "",
					beginto				: craafitem.endto? craafitem.endto : ""
				];
				prevCraaf.add(craaf);
			}
			def afinventorylist = em.sqlContext.createQuery("SELECT * FROM afinventory WHERE iyear = ${params.year} AND imonth = ${params.month}")
								.resultList.each{ EntityUtil.fieldToMap(it) };
			afinventorylist.each{ afinventory->
				def craafitem = prevCraaf.find{ it.afid == afinventory.af.objid }
			}
		}
	}
	
	@ProxyMethod
	public void delete( iraf ) {
		//Delete requested items
		em.sqlContext.createExecutor("DELETE FROM irafrequesteditem WHERE irafid = '${iraf.objid}'").execute();
		//Delete issued items
		em.sqlContext.createExecutor("DELETE FROM irafissueditem WHERE irafid = '${iraf.objid}'").execute();
		//Delete iraf
		em.delete("iraf", iraf);
	}
}