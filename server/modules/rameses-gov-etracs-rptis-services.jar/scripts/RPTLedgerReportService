import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;

class RPTLedgerReportService
{
	
	@ActiveDB('rptledgerreport')
	def em

	@Service('DateService')	
	def dtSvc 

	@Service('RPTBillingService')
	def billingSvc


	@ProxyMethod
	public def generateNoticeOfDelinquency( data ) {
		if (data.rptledgerid)
			data.filters = ' rl.objid = $P{rptledgerid} '
		else if (data.taxpayer){
			data.taxpayerid = data.taxpayer.objid
			data.filters = ' f.taxpayer_objid = $P{taxpayerid} '
		}
		else {
			throw new Exception('Ledger or taxpayer is required.')
		}

		def bill = billingSvc.initBill()
		bill.taxpayer = data.taxpayer 
		if (data.rptledgerid){
			bill.ledgerids.add(data.rptledgerid)
		}
		bill.loadbillitems = false
		billingSvc.generateBill(bill)

		data.cy = dtSvc.serverYear
		def list = em.getDelinquentLedgers(data)
		data.ledgers = list.findAll{it.amtdue > 0.0}
		data.billdate = dtSvc.serverDate
		data.validuntil = dtSvc.getMonthEndDate(data.billdate)
		return data 
	}
}

