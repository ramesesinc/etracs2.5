import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.services.extended.*

class RPTReceiptService
{
	@Env 
	def env 

	@ActiveDB('cashreceiptrpt')
	def em
    
    @Service('DateService')
	def dtSvc

	@Service('NumberService')
	def numSvc

	@Service('RPTUtil')
	def util
	
	@Service('Var')
	def var 

	@Service('RPTBillingService')
	def billingSvc

	def SCHEMA_RECEIPT 		= 'cashreceiptrpt'
	def SCHEMA_ITEM 		= 'cashreceiptrptitem'

	def RECEIPT_TYPE_ONLINE = 'online'
	def RECEIPT_TYPE_MANUAL = 'manual'


	@ProxyMethod
	public def open( receipt ) {
		def rct = em.read(receipt)	
		if (rct){
			receipt.putAll(rct)
		}
	}


	@ProxyMethod
	public def getItemsForPayment( bill ) {
		def params = billingSvc.buildParams(bill)
		def items =  em.getItemsForPayment(params).each{ it.pay = true }	
		items.removeAll(items.findAll{it.amount == 0.0})
		if (!items) throw new Exception('There are no more unpaid ledgers for this taxpayer.')
		return items 
	}

	@ProxyMethod
	public def getItemsForPaymentByBill(bill){
		def items =  em.getItemsForPaymentByBill(bill).each{ it.pay = true }	
		items.removeAll(items.findAll{it.amount == 0.0})
		if (!items) throw new Exception('There are no more unpaid ledgers for this taxpayer.')
		return items 
	}


	@ProxyMethod
	public def createReceipt( receipt ) {
		def pdate = dtSvc.parseDate(receipt.txndate, null)
		receipt.year = pdate.year
		receipt.qtr = pdate.qtr
		receipt.month = pdate.month
		receipt.day = pdate.day
		
		em.create(receipt)
		
		//insert cash items
		receipt.rptitems.each{
			def partialbasic = 0.0
			def partialbasicint = 0.0
			def partialbasicdisc = 0.0
			def partialsef = 0.0
			def partialsefint = 0.0
			def partialsefdisc = 0.0

			def toyear = it.toyear
			def toqtr = it.toqtr 
			if (it.partialled){
				toyear = (it.toqtr == 1 ? toyear - 1 : toyear)
				toqtr  = it.fromqtr 
				// toqtr  = (it.toqtr == 1 ? 4 : toqtr - 1)
				partialbasic = it.partialbasic
				partialbasicint = it.partialbasicint
				partialbasicdisc = it.partialbasicdisc
				partialsef = it.partialsef
				partialsefint = it.partialsefint
				partialsefdisc = it.partialsefdisc
			}
			def params = [
				objid			: util.generateId('RI'), 
				rptreceiptid    : receipt.objid,
				rptledgerid		: it.rptledgerid,
				fromyear		: it.fromyear,
				fromqtr 		: it.fromqtr,
				toyear			: toyear,
				toqtr 			: toqtr,
				partialbasic 	: partialbasic,
				partialbasicint : partialbasicint,
				partialbasicdisc : partialbasicdisc,
				partialsef 		: partialsef,
				partialsefint 	: partialsefint,
				partialsefdisc 	: partialsefdisc,
				partialledyear  : it.partialledyear,
				partialledqtr   : it.partialledqtr,
				lastbilledyear  : toyear,
				lastbilledqtr   : toqtr,
				billid 			: it.billid,
			]

			em.insertPaidItemByLedgerId(params)
			em.deletePaidBillItems(params)
			em.deleteRptBillLedgers(params)
			em.deleteRptBill(params)
			em.updateLedgerYearQtrPaid(params)
		}
	}


	@ProxyMethod
	public def getSummarizedCashReceiptItems( receipt ) {
		def ledgerids = receipt.rptitems.collect{ "'" + it.rptledgerid + "'"}.join(',')
		def filter = "rl.objid  IN (${ledgerids})"
		def items = []
		em.getSummarizedCashReceiptItems([filter:filter]).each{
			it.objid = 'CI' + new java.rmi.server.UID()
			it.receiptid = receipt.objid
			items += it
		}
		return items.findAll{it.amount > 0.0} 
	}



	@ProxyMethod
	public void voidReceipt( receipt ) {
		def params = [
			rptreceiptid : receipt.objid,
		]

		em.getLedgersMinPaidYearAndQtr(params).each{
			it.toyear = (it.minqtr <= 1 ? it.minyear - 1 : it.minyear) 
			it.toqtr = (it.minqtr <= 1 ? 4 : it.minqtr - 1) 
			it.lastbilledyear = null
			it.lastbilledqtr = null
			if (it.partialbasic > 0.0){
				it.partialledyear = it.toyear
				it.partialledqtr = (it.qtr > 0 ? it.qtr : it.toqtr )
			}
			em.updateLedgerYearQtrPaid(it)
			billingSvc.generateBillByLedgerId(it.rptledgerid)
		}
	}


	@ProxyMethod
	public def getItemsForPrinting(receipt) {
		def items = em.getItemsForPrinting([rptreceiptid:receipt.objid])
		items.each{
			if (it.owner.name == receipt.paidby) {
				it.owner.name = ''
			}
		}
		return items 
	}


	@ProxyMethod
	public def getCollectionsByCount(receiptcount){
		def params = [userid:env.USERID, _limit:receiptcount, _pagingKeys:'cr.objid']
		return em.getCollectionsByCount(params)
	}


}
