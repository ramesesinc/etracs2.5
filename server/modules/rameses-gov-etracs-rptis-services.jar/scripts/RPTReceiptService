import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.services.extended.*

class RPTReceiptService
{
	@ActiveDB('cashreceiptrpt')
	def em
    
    @Service('DateService')
	def dtSvc

	@Service('NumberService')
	def numSvc

	@Service('RPTUtil')
	def util
	
	@Service('Var')
	def var 

	@Service('RPTBillingService')
	def billingSvc

	def SCHEMA_RECEIPT 		= 'cashreceiptrpt'
	def SCHEMA_ITEM 		= 'cashreceiptrptitem'

	def RECEIPT_TYPE_ONLINE = 'online'
	def RECEIPT_TYPE_MANUAL = 'manual'


	@ProxyMethod
	public def getItemsForPayment( bill ) {
		bill.loadbillitems = false
		billingSvc.generateBill(bill)
		
		def params = billingSvc.buildParams(bill)
		em.resetItemForPaymentFlag(params)
		em.resetQuarterlyItemForPaymentFlag(params)
		em.setItemForPaymentFlag(params)
		em.setQuarterlyItemForPaymentFlag(params)
		return em.getItemsForPayment(params).each{ it.pay = true }	
	}

	@ProxyMethod
	public def createReceipt( receipt ) {
		def pdate = dtSvc.parseDate(receipt.txndate, null)
		receipt.year = pdate.year
		receipt.qtr = pdate.qtr
		receipt.month = pdate.month
		receipt.day = pdate.day
		
		em.create(receipt)
		
		//insert cash items
		receipt.rptitems.each{
			def params = [
				objid			: util.generateId('RI'), 
				rptreceiptid    : receipt.objid,
				rptledgerid		: it.rptledgerid,
				fromyear		: it.fromyear,
				fromqtr 		: it.fromqtr,
				toyear			: it.toyear,
				toqtr 			: it.toqtr,
			]
			em.insertPaidItemByLedgerId(params)
			em.postPaymentToLedgerItem(params)
			em.postPaymentToQuarterlyLedgerItem(params)
			em.getQuarterlyPaymentsforLedgerItem(params).each{
				em.applyQuarterlyPaymentToLedgerItem(it)
			}
			em.updateLedgerItemQuarterlyPaidInfo(params)
			em.updateLedgerYearQtrPaid(params)
		}
	}

	@ProxyMethod
	public void voidReceipt( receipt ) {
		def params = [
			rptreceiptid : receipt.objid,
		]

		em.voidLedgerItemPayment(params)
		em.voidQuarterlyItemPayment(params)
		em.getAppliedQuarterlyPaymentsOnLedgerItem(params).each{
			em.voidAppliedQuarterlyPaymentsOnLedgerItem(it)	
		}
		em.getLedgersMinPaidYearAndQtr(params).each{
			it.toyear = (it.minqtr <= 1 ? it.minyear - 1 : it.minyear) 
			it.toqtr = (it.minqtr <= 1 ? 4 : it.minqtr - 1) 
			em.updateLedgerYearQtrPaid(it)
		}
		em.voidReceiptItems(params)
	}


}
