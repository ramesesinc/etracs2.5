import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.services.extended.*

class RPTReceiptNoLedgerService
{

	@ActiveDB('cashreceiptrpt')
	def em

	@Service('DateService')
	def dtSvc

	@Service('NumberService')
	def numSvc

	@Service('RPTBillingService')
	def billingSvc

	@Service('FAASService')
	def faasSvc

	def SCHEMA_RECEIPT_ITEM = 'cashreceiptrptitem'
	def SCHEMA_NOLEDGER_ITEM = 'noledgeritem'




	@ProxyMethod
	public def getTxntypes(  ) {
		return faasSvc.getTxnTypes();	
	}

	@ProxyMethod
	public def calculateDue(bill, entity){
		if (!bill.billdate) 
			bill.billdate = dtSvc.serverDate 

		entity.objid = 'RL' + new java.rmi.server.UID()
		def ledger = createLedgerInfo(bill, entity)
		def data = billingSvc.executeRules(bill)
		data.ledgers.each{
			it.amount = it.basic + it.basicint - it.basicdisc + it.sef + it.sefint - it.sefdisc + it.firecode
			it.general = it.basic + it.basicint - it.basicdisc + it.firecode
			it.qtrly = 0
			it.barangayid = ledger.barangayid
		}
		ledger.items = data.ledgers 
		ledger.amount = ledger.items.amount.sum()
		ledger.basicnet = ledger.items.sum{ it.basic + it.basicint - it.basicdisc}
		ledger.sefnet = ledger.items.sum{ it.sef + it.sefint - it.sefdisc}
		ledger.firecode = ledger.items.firecode.sum()
		ledger.general = ledger.basicnet + ledger.firecode  
		ledger.period = buildPeriod(ledger)
		return ledger 
	}	

	def buildPeriod(ledger){
		def first = ledger.items.first();
		def last = ledger.items.last();
		if (first.year == last.year && first.fromqtr == 1 && last.toqtr == 4)
			return first.year + ''
		if (first.year == last.year)
			return first.fromqtr + '' + last.toqtr + 'Q, ' + first.year
		if (first.year != last.year && first.fromqtr == 1 && last.toqtr == 4)
			return first.year + '-' + last.year 
		return first.fromqtr + 'Q, ' + first.year + '-' + last.toqtr + 'Q,' + last.year
	}


	@ProxyMethod
	public def createReceipt( receipt ) {
		def pdate = dtSvc.parseDate(receipt.txndate, null)
		receipt.year = pdate.year
		receipt.qtr = pdate.qtr
		receipt.month = pdate.month
		receipt.day = pdate.day
		
		em.create(receipt)
		receipt.ledgers.each{ rl ->
			rl.items.each{rli ->
				rli.rptledgerid = null
				rli.rptreceiptid = receipt.objid 
				rli.barangay = rl.barangay
				rli.pin = rl.fullpin 
				rli.classification = rl.classification
				rli.actualuse = rl.actualuse
				rli.tdno = rl.tdno 
				rli.cadastrallotno = rl.cadastrallotno
				em.create(rli, SCHEMA_RECEIPT_ITEM)
				em.create(rli, SCHEMA_NOLEDGER_ITEM)
			}
		}
	}

	@ProxyMethod
	public def getItemsForPrinting( receipt ) {
		return em.getNoLedgerItemsForPrinting(receipt)
	}



	def createLedgerInfo(bill, entity){
		entity.lastyearpaid = (entity.fromqtr == 1 ? entity.fromyear - 1 : entity.fromyear )
		entity.lastqtrpaid  = (entity.fromqtr == 1 ? 4 : entity.fromqtr )
		return [
			lastyearpaid 	: entity.lastyearpaid,
			lastqtrpaid		: entity.lastqtrpaid,
			tdno			: entity.tdno,
			rputype			: entity.rputype,
			fullpin			: entity.pin ,
			totalareaha		: 0.0 ,
			totalareasqm	: 0.0,
			totalav			: entity.assessedvalue ,
			barangayid      : entity.barangay.objid,
			cadastrallotno  : null ,
			barangayid 		: entity.barangay.objid ,
			classcode 		: entity.classification.code ,
			actualusecode   : entity.actualuse.code,
			fromyear 		: (entity.lastqtrpaid = 4 ? entity.lastyearpaid + 1 : entity.lastyearpaid ),
			fromqtr 		: (entity.lastqtrpaid = 4 ? 1 : entity.lastqtrpaid + 1 ),
			barangay 		: entity.barangay,
			classification 	: entity.classification,
			actualuse   	: entity.actualuse,
		]
	}


}
