import com.rameses.annotations.*
import com.rameses.eserver.*;
import com.rameses.common.*;

class FaasServiceInterceptor
{

	@Service('RPUService')
	def rpuSvc 

	@Service('RPTLedgerService')
	def ledgerSvc

	@Service('RPTUtil')
	def util

	@Service('Var')
	def var

	@Service('LogService')
	def logSvc 


	@After(pattern="FAASService.createFaas.*") 
	public void logCreate( evt ) {
		def faas = evt.result 
		logSvc.log( 'create', 'FAAS', faas.objid)
	}

	@After(pattern="FAASService.updateFaas.*") 
	public void logUpdate( evt ) {
		def faas = evt.result 
		logSvc.log( 'update', 'FAAS', faas.objid)
	}

	@After(pattern="FAASService.submitFaasForApproval") 
	public void logSubmitFaasForApproval( evt ) {
		def faas = evt.result 
		logSvc.log( 'submitFaasForApproval', 'FAAS', faas.objid)
	}

	@After(pattern="FAASService.approveFaas") 
	public void logApproveFaas( evt ) {
		def faas = evt.result 
		logSvc.log( 'approveFaas', 'FAAS', faas.objid)
	}

	@After(pattern="FAASService.disapproveFaas") 
	public void logDisapproveFaas( evt ) {
		def faas = evt.result 
		logSvc.log( 'disapproveFaas', 'FAAS', faas.objid)
	}

	@After(pattern="FAASService.submitFaasToProvince") 
	public void logSubmitFaasToProvince( evt ) {
		def faas = evt.result 
		logSvc.log( 'submitFaasToProvince', 'FAAS', faas.objid)
	}

	@After(pattern="FAASService.approveFaasSubmissionToProvince") 
	public void logApproveFaasSubmissionToProvince( evt ) {
		def faas = evt.result 
		logSvc.log( 'approveFaasSubmissionToProvince', 'FAAS', faas.objid)
	}

	@After(pattern="FAASService.disapproveFaasSubmissionToProvince") 
	public void logDisapproveFaasSubmissionToProvince( evt ) {
		def faas = evt.result 
		logSvc.log( 'disapproveFaasSubmissionToProvince', 'FAAS', faas.objid)
	}

	@After(pattern="FAASService.approveFaasByProvince") 
	public void logApproveFaasByProvince( evt ) {
		def faas = evt.result 
		logSvc.log( 'approveFaasByProvince', 'FAAS', faas.objid)
	}

	@After(pattern="FAASService.disapproveFaasByProvince") 
	public void logDisapproveFaasByProvince( evt ) {
		def faas = evt.result 
		logSvc.log( 'disapproveFaasByProvince', 'FAAS', faas.objid)
	}






	@Before(pattern="FAASService.initFaasTransaction")  
	public void interceptInitFaasTransaction( evt ) {
		def info = evt.args[0]
		if (info.txntype.objid != 'GR') {
			if ( ! util.toBoolean(var.allow_faas_transaction_with_balance, false) ){
				ledgerSvc.checkLedgerBalance(info.faas.objid)
			}
		}
	}

	@After(pattern="FAASService.initFaasTransaction", eval="#{result.txntype.objid == 'TR'}", index=10) 
	public void initSimpleTransfer( evt ) {
		def faas = evt.result 
		clearInfo(faas)
		
	}

	@After(pattern="FAASService.initFaasTransaction", eval="#{result.txntype.objid == 'TRE'}", index=10) 
	public void initTransferWithReassessment( evt ) {
		def faas = evt.result 
		clearInfo(faas)
	}

	@After(pattern="FAASService.initFaasTransaction", eval="#{result.txntype.objid == 'TRC'}", index=10) 
	public void initTransferWithCorrection( evt ) {
		def faas = evt.result 
		clearInfo(faas)
	}

	@After(pattern="FAASService.initFaasTransaction", eval="#{result.txntype.objid == 'CD'}", index=10) 
	public void initChangeDepreciation( evt ) {
		def faas = evt.result 
		if (faas.rpu.rputype == 'land') {
			throw new Exception('Cannot depreciate Land property.')
		}
	}




	@Before(pattern="FAASService.createFaas", eval="#{args[0].datacapture==true}") 
	public void interceptCreateDataCaptureFaas( evt ) {
		def faas = evt.args[0]
		faas.txntype.newrealproperty = true 
		rpuSvc.createRpu( faas.rpu, faas.txntype )
	}


	@Before(pattern="FAASService.createFaas", eval="#{args[0].datacapture==false}") 
	public void interceptCreateFaas( evt ) {
		def faas = evt.args[0]
		rpuSvc.createRpu( faas.rpu, faas.txntype)
	}




	@After(pattern="FAASService.openFaas") 
	public void interceptOpenFaas( evt ) {
		def faas = evt.result 
		faas.rpu = rpuSvc.openRpu( faas.rpuid )
	}

	@Before(pattern="FAASService.updateFaas") 
	public void interceptUpdateFaas(evt) {
		def faas = evt.args[0]
		rpuSvc.updateRpu( faas.rpu )
	}

	@After(pattern="FAASService.deleteFaas") 
	public void interceptDeleteFaas( evt ) {
		def faas = evt.result 
		if (faas.txntype.newrpu){
			rpuSvc.deleteRpu( faas.rpu )
		}
	}

	/*---------------------------------------------------
	*
	* Clear info related to transfer
	*
	*--------------------------------------------------*/	
	void clearInfo(faas){
		faas.tdno 					= null
		faas.titletype				= null
		faas.titleno				= null
		faas.titledate				= null
		faas.taxpayer				= [:]
		faas.owner					= [:]
		faas.administrator 			= [:]
		faas.beneficiary 			= [:]
		faas.memoranda				= null
	}
}

