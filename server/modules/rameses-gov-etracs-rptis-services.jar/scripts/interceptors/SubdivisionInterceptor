import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;


class SubdivisionInterceptor
{
	@ActiveDB('subdivision')
	def em;

	@Service('RPTLedgerService')
	def ledgerSvc 

	@Service('Var')
	def var

	@Service('RPTUtil')
	def util


	@Before(pattern="SubdivisionService.createSubdivision") 
	public void interceptCreateSubdivision( evt ) {
		def info = evt.args[0]
		if (util.toBoolean(var.allow_subdivision_with_balance, false) == false){
			ledgerSvc.checkLedgerBalance(info.motherfaas.objid)
		}
	}


	@Before(pattern="SubdivisionService.submitForAppraisal") 
	public void submitForAppraisalIntercept( evt ) {
		def subdivision = evt.args[0]
		
		//check all affected rpus are assigned with new PIN
		def nopinRpus = em.getAffectedRpuWithNoPin(subdivision)
		if (nopinRpus)
			throw new Exception('Affected RPU with TD No. ' + nopinRpus[0].tdno + ' is not assigned with a new PIN.');
	}

}

