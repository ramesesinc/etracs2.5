import com.rameses.annotations.*
import com.rameses.eserver.*;
import com.rameses.common.*;

class MCSettlementTaskInterceptor
{
	@Service('MCSettlementService')
	def svc 

	@Service('RPTTaskService')
	def taskSvc

	@Service('RPTTrackingService')
    def trackingSvc
    
    @Service('RPTWorkflowService')
    def workflowSvc 


	@Env
	def env 

	def DOC_NAME = 'Multiple Claim Settlement'
	def TXN_TYPE = 'MS'


	def createTask(entity, wf){
		return [
			objid		: entity.objid,
			refno		: entity.txnno,
			docname		: DOC_NAME,
			filetype	: 'mcsettlement',
			action 		: wf.tostate,
			msg			: wf.message,
			signatory 	: wf.signatory,
			workflowid  : wf.workflowid,
		]
	}


	@Before(pattern="MCSettlementService.deleteEntity") 
	public void deleteEntity( evt ) {
		def entity = evt.args[0]
		taskSvc.delete(entity)
	}


	@After(pattern="MCSettlementService.create") 
	public void create( evt ) {
		def entity = evt.result
		def startwf = workflowSvc.findStart([docname:DOC_NAME, appliedto:TXN_TYPE, fromstate:null])
		def task = createTask(entity, startwf)
		task = taskSvc.createTask(task)
		taskSvc.assignTask(task)
		updateSignatoryFromTask(entity, task)
	}


	@After(pattern="MCSettlementService.open") 
	public void open( evt ) {
		def resection = evt.result
		resection.taskaction = null
		try{
			def task = taskSvc.findCurrentTask(resection.objid)
			if (task)
				resection.taskaction = task.action 
		}
		catch(e){
			// ignore 
		}
	}


	@After(pattern="MCSettlementService.(submitFor.*)") 
	public void handleNextWorkflow( evt ) {
		def entity = evt.result 
		def wf = workflowSvc.findNext([docname:DOC_NAME, appliedto:TXN_TYPE, fromstate:entity.taskaction])
		def task = createTask(entity, wf)
		taskSvc.createTask(task)
		entity.taskaction = task.action
	}


	@After(pattern="MCSettlementService.approve") 
	public void approve( evt ) {
		taskSvc.closeTask([objid:evt.result.objid])
		trackingSvc.updateMessage([objid:evt.result.objid, msg:DOC_NAME + ' is already approved.'])
	}

	@After(pattern="MCSettlementService.disapprove") 
	public void disapprove( evt ) {
		taskSvc.closeTask([objid:evt.result.objid])
	}


	@After(pattern="MCSettlementService.disapproveFor.*") 
	public void handleDisapprove( evt ) {
		def entity = evt.result
		taskSvc.disapproveTaskByObjid(entity.objid, entity._disapprovemsg)
	}


	@After(pattern="RPTTaskService.(createNextUserTask|assignTaskToMe)", eval="#{result.filetype == 'mcsettlement'}") 
	public void updateSignatoryInfo( evt ) {
		def task = evt.result 
		def entity = svc.open(task.objid)
		updateSignatoryFromTask(entity, task)
	}

	void updateSignatoryFromTask(entity, task){
		if (! entity[task.signatory]) 
			entity[task.signatory] = [:]

		entity[task.signatory].dtsigned = task.startdate 
		entity[task.signatory].name = task.assignedto.name 
		entity[task.signatory].title = task.assignedto.title
		svc.update(entity) 
	}	

}

