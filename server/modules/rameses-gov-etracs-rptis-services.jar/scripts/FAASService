import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.util.*
import com.rameses.services.extended.*


class FAASService
{

	@ActiveDB('faas')	
	def em 

	@Service('Var')
	def var 

	@Service('DateService')
	def dtSvc 

	@Service('RPUService')
	def rpuSvc

	@Service('RealPropertyService')
	def rpSvc 

	@Service('SequenceService')
	def seqSvc

	@Service('RPTUtil')
	def utilSvc

	@Service('TxnRefService')
	def txnRef

	@Service('WorkflowStateService')
    def wsSvc 

    @Service('FAASAnnotationService')
    def annotationSvc 

    @Service('TxnSignatoryService')
    def signatorySvc 

    @Service('FAASService')
    def faasSvc

    def signatories = ['appraiser', 'recommender', 'taxmapper', 'approver']

	

	def SCHEMA_PREVIOUSFAAS		= 'previousfaas'
	def SCHEMA_BACKTAX			= 'backtax'
	
	def STATE_INTERIM 			= 'INTERIM'
	def STATE_FORAPPROVAL 		= 'FORAPPROVAL'
	def STATE_FORPROVSUBMISSION = 'FORPROVSUBMISSION'
	def STATE_FORPROVAPPROVAL 	= 'FORPROVAPPROVAL'
	def STATE_CURRENT 			= 'CURRENT'
	def STATE_CANCELLED  		= 'CANCELLED'

	def UTDNO_KEY 				= 'UNIQUE_TDNO'


	@ProxyMethod
	public def initCapture( info ) {
		def faas 			= initFaas(info)
		faas.datacapture 	= true
		faas.autonumber     = false
		faas.previousfaases = []
		faas.backtaxes 		= []

		if (info.rputype == 'land'){
			def rp = em.findRealProperty([ry:info.ry, pin:info.pin])
			if (rp && rp.faasid) 
				throw new Exception('PIN is already referenced by TD No. ' + rp.tdno + '.')

			if (rp){
				faas.rp = rp;
			}
			else {
				faas.rp = rpSvc.init()
				faas.rp.putAll(info)
			}
		}
		else{
			faas.rp = info.rp 
			info.realpropertyid = info.rp.objid
		}

		def rpu = em.findRpu([ry:info.ry, fullpin:info.fullpin])
		if (rpu && rpu.faasid)
			throw new Exception('RPU is already referenced by TD No. ' + rpu.tdno + '.')

		if(rpu){
			faas.rpu = rpu
		}
		else {
			faas.rpu = rpuSvc.initRpu(info);
		}
		
		faas.realpropertyid = faas.rp.objid 
		faas.lguid = faas.rp.lguid 
		faas.lgutype = faas.rp.lgutype 
		faas.rpuid = faas.rpu.objid
		println 'faas.lguid ->' + faas.lguid 
		return faas
	}



	@ProxyMethod
	public def createFaas( faas ) {
		checkTxnReference(faas)
		faas.utdno = generateUniqueTdNo(faas)
		def approver = getSignatory(faas, 'approver')
		if (approver.dtsigned) {
			faas.txntimestamp = dtSvc.buildCustomTimeStamp(approver.dtsigned)
		}
		updateNameInfo(faas)
		em.create(faas)
		signatorySvc.createSignatories(faas.signatories)
		faas.previousfaases.each{
			em.create(it, SCHEMA_PREVIOUSFAAS)
		}
		saveBackTaxes(faas)
		insertTxnReference(faas)
		updateRpuMasterInfo(faas)
		return faas
	}


	@ProxyMethod
	public def openFaas(faas){
		faas = em.findById(faas)
		if (!faas) throw new Exception('FAAS does not exist or has already been deleted.')
		faas.txntype = getTxnType( faas.txntype.objid )
		faas.previousfaases = em.getPreviousFaases([faasid:faas.objid])
		faas.backtaxes      = em.getBackTaxes([faasid: faas.objid]).each{ it.taxable = utilSvc.toBoolean(it.taxable, true) }
		faas.annotated      = getAnnotatedStatus(faas.objid)
		faas.signatories 	= signatorySvc.getSignatories(faas)
		return faas 
	}


	@ProxyMethod
	public def loadFaas(faas){
		faas = em.findById(faas)
		if (!faas) throw new Exception('FAAS does not exist or has already been deleted.')
		faas.txntype = getTxnType( faas.txntype.objid )
		faas.previousfaases = em.getPreviousFaases([faasid:faas.objid])
		faas.backtaxes      = em.getBackTaxes([faasid: faas.objid]).each{ it.taxable = utilSvc.toBoolean(it.taxable, true) }
		faas.annotated      = getAnnotatedStatus(faas.objid)
		faas.signatories 	= signatorySvc.getSignatories(faas)
		faas.rp = rpSvc.open(faas.rp)
		faas.rpu = rpuSvc.openRpu(faas.rpu)
		return faas 
	}

	@ProxyMethod
	public def updateFaas( faas ) {
		def approver = getSignatory(faas, 'approver')
		if (approver.dtsigned) {
			faas.txntimestamp = dtSvc.buildCustomTimeStamp(approver.dtsigned)
		}
		em.updateImmediate(faas)
		signatorySvc.updateSignatories(faas.signatories)
		saveBackTaxes(faas)
		updateRpuMasterInfo(faas)
		return faas;	
	}






	/*------------------------------------------------
	*
	* WORKFLOW ACTIONS
	*
	-------------------------------------------------*/

	@ProxyMethod
	public def submitFaasForApproval( faas ) {
		validateSignatories(faas)

		def retval = updateFaasState(faas, STATE_INTERIM, faas.state)
		if (retval == 0) 
			throw new Exception('Unable to submit FAAS for approval. Only INTERIM record is allowed.')

		wsSvc.insert(faas)
		return faas
	}


	@ProxyMethod
	public def approveFaas( faas ) {
		validateSignatories(faas)
		faas.state = STATE_CURRENT
		faas.prevstate = STATE_FORAPPROVAL
		updateTDNo(faas)

		def retval = em.approveFaas(faas)
		if (retval == 0) 
			throw new Exception('Unable to approve FAAS. Only FOR APPROVAL record is allowed.')

		rpSvc.approve(faas.rp)
		rpuSvc.approveRpu(faas.rpu)
		wsSvc.insert(faas)
		cancelPreviousFaases(faas)
		txnRef.delete(faas.objid)
		return faas 
	}


	@ProxyMethod
	public def disapproveFaas( faas ) {
		wsSvc.delete(faas)

		def retval = updateFaasState(faas, STATE_FORAPPROVAL, STATE_INTERIM)
		if (retval == 0) 
			throw new Exception('Unable to disapprove FAAS. Only FOR APPROVAL record is allowed.')

		rpSvc.disapprove(faas.rp)
		rpuSvc.disapproveRpu( faas.rpu )
		return faas 
	}


	@ProxyMethod
	public def submitFaasToProvince( faas ) {
		def retval = updateFaasState(faas, STATE_FORPROVSUBMISSION, STATE_FORPROVAPPROVAL)
		if (retval == 0) 
			throw new Exception('Unable to submit FAAS. Only INTERIM record is allowed.')

		wsSvc.insert(faas)
		return faas;
	}


	@ProxyMethod
	public def approveFaasSubmissionToProvince( faas ) {
		def retval = updateFaasState(faas, STATE_FORPROVSUBMISSION, STATE_FORPROVAPPROVAL)
		if (retval == 0) 
			throw new Exception('Unable to submit FAAS for province approval. Only FOR PROVINCE SUBMISSION record is allowed.')

		wsSvc.insert(faas)
		cancelPreviousFaases(faas)
		txnRef.delete(faas.objid)
		updateTDNo(faas)
		return faas
	}


	@ProxyMethod
	public def disapproveFaasSubmissionToProvince( faas ) {
		wsSvc.delete(faas)
		
		def retval = updateFaasState(faas, STATE_FORPROVAPPROVAL, STATE_FORPROVSUBMISSION)
		if (retval == 0) 
			throw new Exception('Unable to disapprove FAAS. Only FOR PROVINCE APPROVAL record is allowed.')

		return faas
	}


	@ProxyMethod
	public def approveFaasByProvince( faas ) {
		def retval = updateFaasState(faas, STATE_FORPROVAPPROVAL, STATE_CURRENT)
		if (retval == 0) 
			throw new Exception('Unable to approve FAAS. Only FOR PROVINCE APPROVAL record is allowed.')

		rpSvc.approve(faas.rp)
		rpuSvc.approveRpu(faas.rpu)
		wsSvc.insert(faas)
		cancelPreviousFaases(faas)
		txnRef.delete(faas.objid)
		updateTDNo(faas)
		return faas
	}


	@ProxyMethod
	public def disapproveFaasByProvince( faas ) {
		wsSvc.delete(faas)

		def retval = updateFaasState(faas, STATE_FORPROVAPPROVAL, STATE_INTERIM)
		if (retval == 0) 
			throw new Exception('Unable to disapprove FAAS. Only FOR PROVINCE APPROVAL record is allowed.')

		rpSvc.disapprove(faas.rp)
		rpuSvc.disapproveRpu(faas.rpu)
		return faas
	}




	@ProxyMethod
	public def getTxnType( objid ){
		def txntype = getTxnTypes().find{it.objid == objid}
		if (!txntype)
			throw new Exception('Invalid Txn Type ' + objid + '.')
		return txntype
	}
	

	@ProxyMethod
    public List getTxnTypes() {
		return [
            [objid:'TR', 	name:'Transfer of Ownership', 		newledger:false, 	newrpu:false],
            [objid:'TRE', 	name:'Transfer with Reassessment', 	newledger:false, 	newrpu:true],
            [objid:'TRC', 	name:'Transfer with Correction', 	newledger:false, 	newrpu:true],
            [objid:'CE', 	name:'Correction', 					newledger:false, 	newrpu:true],
            [objid:'CC', 	name:'Change Classification', 		newledger:false, 	newrpu:true],
            [objid:'CT', 	name:'Change Taxability', 			newledger:false, 	newrpu:true],
            [objid:'CD', 	name:'Change Depreciation', 		newledger:false, 	newrpu:true],
            [objid:'RE', 	name:'Reassessment', 				newledger:false, 	newrpu:true],

            [objid:'GR', 	name:'General Revision', 			newledger:false, 	newrpu:true, newrealproperty:true],
            [objid:'ND', 	name:'New Discovery', 				newledger:true, 	newrpu:true, newrealproperty:true],
            [objid:'SD', 	name:'Subdivision', 				newledger:true, 	newrpu:true, newrealproperty:true],
            [objid:'CS', 	name:'Consolidation', 				newledger:true, 	newrpu:true, newrealproperty:true],
            [objid:'CTD', 	name:'Cancellation', 				newledger:false, 	newrpu:false],
            [objid:'MC', 	name:'Multiple Claim', 				newledger:true, 	newrpu:true, newrealproperty:true],
            
            [objid:'RS', 	name:'Resection', 					newledger:false, 	newrpu:true, newrealproperty:true],
            
            [objid:'DC', 	name:'Data Capture', 				newledger:true, 	newrpu:true],
        ]
    }


    @ProxyMethod
    public def getRpuTypes(  ) {
    	return rpuSvc.getRpuTypes();	
    }


	@ProxyMethod
	public def getCurrentRy(  ) {
		return var.current_ry 	
	}


	@ProxyMethod
	public def generateUniqueTdNo(faas){
		if (faas.tdno && faas.tdno != '-') {
			return faas.tdno
		}
		else {
			return seqSvc.getNextFormattedSeries(UTDNO_KEY)
		}
	}


	@ProxyMethod
    public def generateNextTdNo( faas ) {
        //TD Formatting Options:
        // Y - revision year
        // P - province index 
        // C - city index 
        // M - municipality index 
        // D - district index 
        // B - barangay index 
        def lguindex = em.findLguIndexInfo([barangayid:faas.rp.barangay.objid])
		def seqcount = utilSvc.toInteger2( var.td_autonumber_sequence_count, 5 )
        def ry       = (faas.rpu.ry +'')[-2..-1]
        
        def values = [Y:ry, P:lguindex.provcityindex, C:lguindex.provcityindex, M:lguindex.munidistrictindex, D:lguindex.munidistrictindex, B:lguindex.barangayindex]
        def tdno   = var.td_format 
        if (!tdno) tdno = 'Y-M-B'
        values.keySet().each {
            tdno = tdno.replace( it, values[it] )
        }
        def ntdno = tdno + '-' + seqSvc.getNextFormattedSeriesA( tdno, seqcount )
        return ntdno 
    }


	@ProxyMethod
	public def getAnnotatedStatus(faasid){
		def annotations = annotationSvc.getAnnotationsByFaasId(faasid)
		return annotations.size() > 0
	}
    
	/*------------------------------------------------------------------------
	**
	** HELPER METHODS
	**
	------------------------------------------------------------------------*/
	def initFaas(info){
		def faas = [
			objid 		  	: utilSvc.generateId('F'),
			state 		  	: STATE_INTERIM,
			autonumber   	: utilSvc.toBoolean(var.td_autonumber, false),
			prevav		  	: 0.0,
			prevmv		  	: 0.0,
			effectivityyear : dtSvc.serverYear + 1,
			effectivityqtr  : 1,
			backtaxyrs		: 0,
			iscondo 		: info.iscondo,
			barangay		: info.barangay,
			datacapture     : false,
			txntype 		: info.txntype,
			lguid			: var.lgu_objid,
			taxpayer		: [:],
			owner 			: [:],
			administrator   : [:],
		]
		signatorySvc.initSignatories(faas, signatories)
		return faas 
	}


    void checkTxnReference(faas){
		if (faas.previousfaases){
			def prevfaasid = faas.previousfaases[0].prevfaasid
			txnRef.checkReference(prevfaasid)
		}
	}


	def getSignatory(faas, type){
		return faas.signatories.find{it.type == type }
	}


	void updateNameInfo(faas){
		def len = faas.owner.name.length()
		if (len > 100) len = 100
		faas.name = faas.owner.name.substring(0,len)
	}


	void insertTxnReference(faas){
		if (faas.previousfaases){
			def prevfaasid = faas.previousfaases[0].prevfaasid
			txnRef.insert([objid:prevfaasid, refid:faas.objid, msg:'FAAS is currently referenced by TD No. ' + faas.tdno])
		}
	}


	void saveBackTaxes(faas){
		faas._backtaxes?.each{
			em.delete(it, SCHEMA_BACKTAX)
		}
		faas.backtaxes?.each{
			it.faasid = faas.objid 
			em.save(it, SCHEMA_BACKTAX)
		}
	}


	void updateRpuMasterInfo(faas){
		em.updateRpuMasterInfo(faas)
	}


	void validateSignatories(faas){
		def appraiser = getSignatory(faas, 'appraiser')
		utilSvc.required('Appraiser', appraiser)
		utilSvc.required('Appraiser', appraiser.name)
		utilSvc.required('Appraiser Date Signed', appraiser.dtsigned)

		def approver = getSignatory(faas, 'approver')
		utilSvc.required('Approver', approver)
		utilSvc.required('Approver', approver.name)
		utilSvc.required('Approver Date Signed', approver.dtsigned)
	}

	void cancelPreviousFaases(faas){
		em.getPreviousFaases([faasid:faas.objid]).each{
			def approver = getSignatory(faas, 'approver')
			def params = [
				objid  			: it.prevfaasid,
				cancelreason	: faas.txntype.objid,
				canceldate		: approver.dtsigned,
				cancelledbytdnos: faas.tdno,
				cancelledtimestamp : dtSvc.buildCustomTimeStamp(approver.dtsigned),
			]
			em.cancelFaas(params)
			em.cancelRpu([objid:it.prevrpuid])
		}
	}
	

    def updateFaasState( faas, fromstate, tostate){
		faas.state = tostate
		return em.updateFaasState([objid:faas.objid, state:tostate, prevstate:fromstate])
	}


	void updateTDNo(faas){
    	if ( (faas.tdno == null || faas.tdno == '-') && utilSvc.isTrue(faas.autonumber) ){
			faas.tdno = generateNextTdNo(faas)
		}
		faas.utdno = faas.tdno 
    }

}

