import com.rameses.annotations.*;
import com.rameses.common.*;
import java.rmi.server.UID

class LobMasterService{
	
	@PersistenceContext('main')	
	def em
	
	def SCHEMA_NAME = 'lob:lob'
	
	def STATE_DRAFT 	= 'DRAFT' 
	def STATE_APPROVED 	= 'APPROVED'
	
	@ProxyMethod 
	public def init( ) {
		return [attributes:[]];
	} 
	
	@ProxyMethod
	public def create(entity) {
		entity.state = STATE_DRAFT
		em.validate( SCHEMA_NAME, entity )
		em.create( SCHEMA_NAME, entity)
		insertLobAttributes( entity.attributes )
		return entity;
	}
	
	@ProxyMethod
	public def update(entity) {
		def old = open(entity)

		if( old.state == STATE_APPROVED)
		throw new Exception('Document has already been approved.')
		
		em.validate( SCHEMA_NAME, entity )
		em.update( SCHEMA_NAME, entity )
		deleteLobAttributes(  entity.objid )
		insertLobAttributes( entity.attributes )
		
		return entity
	}
	
	@ProxyMethod
	public def open(entity) {
		entity = em.read(SCHEMA_NAME, entity)
		
		if( ! entity )
			throw new Exception('Document does not exists or has already been deleted.')
		
		def classification = em.sqlContext.createNamedQuery('lob:getClassification')
								.setParameter( 'lobid', entity.objid )
								.singleResult;
								
		if( classification )
			entity.putAll( classification ) 
								
								
		entity.attributes = em.sqlContext.createNamedQuery('lob:getLobAttributes')
							  .setParameter( 'lobid', entity.objid)
							  .resultList 
		return entity 
	}
	
	@ProxyMethod
	public void delete(entity) {
		em.delete(SCHEMA_NAME, entity)
		deleteLobAttributes( entity.objid ) 
	}
	
	
	@ProxyMethod
	public def approve(entity) {
		def old = open(entity)
		
		if( old.state == STATE_APPROVED )
		throw new Exception('Document has already been approved.')

		entity.state = STATE_APPROVED
		return update( entity )
	}
	
	void deleteLobAttributes( lobid ) {
		em.sqlContext.createNamedExecutor('lob:deleteLobAttributes') 
		   .setParameter('lobid', lobid)
		   .execute()
	}
	
	void insertLobAttributes( attributes ) {
		attributes.each {
			em.validate( "lob:lob_lobattribute", it )
			em.create( "lob:lob_lobattribute", it ) 
		}
	}
}
