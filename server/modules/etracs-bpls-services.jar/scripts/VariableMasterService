import com.rameses.annotations.*;
import com.rameses.common.*;
import java.rmi.server.UID

class VariableMasterService{
	
	@PersistenceContext('main')	
	def em
	
	def SCHEMA_NAME = 'variable'
	def STATE_DRAFT 	= 'DRAFT' 
	def STATE_APPROVED 	= 'APPROVED'
	
	@ProxyMethod 
	public def init( ) {
		return [ arrayvalues:[] ];
	} 
	
	@ProxyMethod
	public def create(entity) {
		//name must start with letter or _
		if( ! entity.name.matches('[a-zA-Z_].*') ) {
			throw new Exception('Name must start with a letter or underscore.')
		}
		
		if( entity.datatype == 'string_array' && ! entity.arrayvalues ) 
			throw new Exception('Array Values are required for STRING_ARRAY data type.')
	
	
		entity.name = entity.name.trim().replaceAll('\\W', '_')
		entity.state = STATE_DRAFT
		em.validate( SCHEMA_NAME, entity )
		em.create( SCHEMA_NAME, entity)
		
		return entity;
	}
	
	@ProxyMethod
	public def update(entity) {
		def old = open(entity)

		if( old.state == STATE_APPROVED)
		throw new Exception('Document has already been approved.')

			
		em.validate( SCHEMA_NAME, entity )
		em.update( SCHEMA_NAME, entity )
	
		return entity
	}
	
	@ProxyMethod
	public def open(entity) {
		entity = em.read(SCHEMA_NAME, entity)
			
		if( ! entity )
			throw new Exception('Document does not exists or has already been deleted.')

		if( entity.arrayvalues && entity.arrayvalues instanceof String)
			entity.arrayvalues = em.serializer.read( entity.arrayvalues );
			
		return entity 
	}
	
	@ProxyMethod
	public void delete(entity) {
		em.delete(SCHEMA_NAME, entity)
	}
	
	@ProxyMethod
	public def approve(entity) {
		def old = open(entity)
		
		if( old.state == STATE_APPROVED )
		throw new Exception('Document has already been approved.')
	
		entity.state = STATE_APPROVED
		return update( entity )
	}
	
	@ProxyMethod
	public List getDataTypes() {
		return ['string', 'decimal', 'integer', 'boolean', 'string_array']
	}
	
	
}
