import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.services.extended.*;
import com.rameses.rules.common.*;

public class BPBillingService  {

	@ActiveDB("bpbilling")
	def em;

	@Resource("RuleService")
	def ruleSvc;

	@ActiveDB("rule")
	def ruleDB;

	@Service("DateService")
	def dateSvc;

	@Env
	def env;

	String RULESET = "bpbilling";

	
	def taxFeeBuilder = { z->
		def tf = ruleSvc.createFact( RULESET, RULESET + ".TaxFeeAccount" );
		tf.amtdue = z.amtdue;
		tf.data = z;
		return tf;
	}

	def buildFacts(def request) {
		def o = request;
		def facts = [];
		def currDate = dateSvc.serverDate;
		def dt = currDate;
		if(o.dtfiled && !(o.dtfiled instanceof java.util.Date)) {
			dt = java.sql.Date.valueOf( o.dtfiled );
		}
		facts << new EffectiveDate( dt );
		facts << new CurrentDate(currDate);
		request.billitems.each { x->

			if( x.paymentmode == "QTR") {
				println x.account.title;
				def amt = (x.amtdue / 4);
				(1..4).each { q->
					def m = [:];
					m.qtr = q
					m.putAll( x );
					m.amtdue = amt;
					def tf =  taxFeeBuilder(m);	
					facts << tf;
				}
			}
			else {
				facts << taxFeeBuilder(x);
			}
		}
		return facts;
	}

	def buildActions(def request) {
		def actions = new RuleAction();
		actions.addCommand( "calc_surcharge", new CalcSurcharge( request:request ));
		actions.addCommand( "calc_interest",  new CalcInterest( request:request ));
		actions.addCommand( "calc_discount",  new CalcDiscount( request:request ));
		return actions;
	}

	def distributePayment( o ) {
		//distribute partial payment (amount)
		//compute types: partial, qtr, year 
		//distribute the payment.  
	}

	@ProxyMethod
	public def getBillItems(def o) throws Exception {
		def request = [:]; 
		if(!o.billitems) {
			request.billitems = em.getBillItems([businessid:o.objid]);
		}
		else {
			request.billitems = o.billitems;
		}
		request.dtfiled = o.dtfiled;

		request.facts = buildFacts(request);
		request.actions = buildActions( request );
		
		def grps = ruleDB.getRulegroups( [ruleset: RULESET] );
		for( g in grps ) { 
			ruleSvc.execute( RULESET, request.facts, request.actions, g.name );
		}
		def items = request.facts.findAll{ it.class.name.endsWith("TaxFeeAccount") }*.data;
		return [billitems:items];
	}

}	

//Loads each variable and 
public class CalcSurcharge implements RuleActionHandler {
	def request;
	public void execute(def params, def drools) {
		def tf = params.taxfeeaccount;
		def amt = params.amount.doubleValue;
		tf.surcharge = amt;
		tf.data.surcharge = amt;
	}
}

public class CalcInterest implements RuleActionHandler {
	def request;
	public void execute(def params, def drools) {
		def tf = params.taxfeeaccount;
		def amt = params.amount.doubleValue;
		tf.interest = amt;
		tf.data.interest = amt;
	}
}

public class CalcDiscount implements RuleActionHandler {
	def request;
	public void execute(def params, def drools) {
		def tf = params.taxfeeaccount;
		def amt = params.amount.doubleValue;
		tf.discount = amt;
		tf.data.discount = amt;	
	}
}
