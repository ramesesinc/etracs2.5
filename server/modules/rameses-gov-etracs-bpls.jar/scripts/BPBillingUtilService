import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.services.extended.*;
import com.rameses.rules.common.*;

public class BPBillingUtilService  {

	@Service("NumberService")
	def numSvc;

	@ProxyMethod
	public def computePartial(ledger, payment){
		def partial = payment 
		if (payment == null || payment == 0)
			throw new Exception('Partial Payment is required.')

		paiditems = em.getFullyPaidItems(['rptledgerid':ledger.rptledgerid])
		idx = 0 
		pitem = null 
		for(; idx < paiditems.size(); idx++)
		{
			if (payment == 0.0 ) break;

			pitem = paiditems[idx]
			def amtdue = pitem.total 
			if ( payment >= amtdue){
				payment -= amtdue 
			}
			else 
			{
				pitem.partial = true;

				//apply proportionally
				def basicpaymentrate  = numSvc.round(pitem.basic / (pitem.basic + pitem.sef))
				def basicpayment 	= numSvc.round(payment * basicpaymentrate)
				def sefpayment 		= payment - basicpayment 

				def basicintrate    = numSvc.round(pitem.basicint / pitem.basic)
				def partialbasic    = numSvc.round(basicpayment / (1 + basicintrate))
				def partialbasicint = basicpayment - partialbasic 

				def partialbasicdisc 		= 0.0
				if (pitem.basicdisc > 0.0) {
					def basicdiscrate = numSvc.round(pitem.basicdisc / pitem.basic)
					partialbasicdisc = numSvc.round(partialbasic * basicdiscrate)
				}

				def sefintrate    	= numSvc.round(pitem.sefint / pitem.sef)
				def partialsef    	= numSvc.round(sefpayment / (1 + sefintrate))
				def partialsefint 	= sefpayment - partialsef 

				def partialsefdisc 	= 0.0
				if (pitem.sefdisc > 0.0) {
					def sefdiscrate = numSvc.round(pitem.sefdisc / pitem.sef)
					partialsefdisc = numSvc.round(partialsef * sefdiscrate)
				}

				def partialinfo = [
					rptledgeritemqtrlyid : pitem.rptledgeritemqtrlyid,
					partialbasic 		: partialbasic,
					partialbasicint 	: partialbasicint,
					partialbasicdisc 	: partialbasicdisc,
					partialsef 			: partialsef,
					partialsefint 		: partialsefint,
					partialsefdisc 		: partialsefdisc,
				]
				em.updatePartialInfo(partialinfo)
				payment = 0.0
				break;
			}
		}	
		return [amount:partial, toyear:pitem?.year, toqtr:pitem?.qtr]
	}

}
