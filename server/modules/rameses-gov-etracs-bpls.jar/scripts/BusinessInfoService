import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.services.extended.*;

public class BusinessInfoService extends ActiveCrudListService {

	@ActiveDB("business")
	def em;

	@Service("SequenceService")
	def seqSvc;

	@Env
	def env;

	@ProxyMethod
	public def getNodes(o) {
		return [
			[name:'active', caption:'Active', state:'ACTIVE', leaf:true, folder:true, allowSearch:true],
			[name:'inactive', caption:'Inactive', state:'INACTIVE', leaf:true, folder:true, allowSearch:true],
			[name:'pending', caption:'Pending', state:'PENDING', leaf:true, folder:true, allowSearch:true],
			[name:'payment_pending', caption:'Payment Pending', state:'PAYMENT_PENDING', leaf:true, folder:true, allowSearch:true],
			[name:'retired', caption:'Retired', state:'RETIRED', leaf:true, folder:true, allowSearch:true],
		];
	}	

	@ProxyMethod
	public def getColumns(o) {
		return [
			[name:'tradename', caption:'Trade Name'],
			[name:'permitee.name', caption:'Permitee'],
			[name:'businessaddress', caption:'Business Address'],
			[name:'bin', caption:'BIN'],
			[name:'state', caption:'State'],
			[name:'activeyear', caption:'Year'],
		];
	}

	void beforeList(o) {
		if( o.permiteeid) {
			o._listMethod = "getListByPermitee";
		}
		else {
			o._pagingKeys = "a.objid";
			if(o.name=="search") {
				if( o.searchtext == "%") o.searchtext ="?";
				o._listMethod = "getListSearch";
			}	
		}
	}

	void beforeCreate(o) {
		def yr = "B"+ o.yearstarted + "01"; 
		o.bin = yr + "-" + seqSvc.getNextFormattedSeries( yr );
		o.activeyear = o.yearstarted;
		o.unpaidbalance = 0;
		o.lastqtrpaid = 0;
		o.lastyearpaid = 0;
		o.credits = 0;
		o.user = [objid:env.USERID];
	}

	void afterCreate(o) {
		o.lobs.each {
			it.businessid = o.objid;
			em.save( it, "lob" );
		}
	}

	void afterUpdate(o) {
		o.lobs.each {
			it.businessid = o.objid;
			em.save( it, "lob" );
		}
		if(o._lobs_deleted )	 {
			o._lobs_deleted.each {
				em.delete( it, "lob" );	
			}
		}
	}

	void afterOpen(o) {
		o.lobs = em.getLobs(o);
	}

	@ProxyMethod
	public void postReceivable( taxfees ) {
		for( o in taxfees ) {
			o.amtpaid = 0;
			em.save( o, "receivable");
		}
	}
	
}