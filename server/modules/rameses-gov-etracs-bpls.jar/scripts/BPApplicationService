import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.services.extended.*;

public class BPApplicationService extends ActiveCrudListService {

	@ActiveDB("bpapplication")
	def em;

	@ActiveDB("business")
	def biz;

	@ActiveDB("businessaccount")
	def ba;

	@Service("SequenceService")
	def seqSvc;

	@Service("DateService")
	def dateSvc;

	@Service("BusinessInfoService")
	def bizSvc;

	@Service("BPAssessmentService")
	def bpAssessment;


	@Env
	def env;

	@ProxyMethod
	public def getNodes(o) {
		return [
			[name:'pending', caption:'Pending', state:'pending', leaf:true, folder:true, allowSearch:true],
			[name:'forassessment', caption:'For Assessment', state:'forassessment', leaf:true, folder:true,allowSearch:true],
			[name:'forpayment', caption:'For Payment', state:'forpayment', leaf:true, folder:true, allowSearch:true],
			[name:'forrelease', caption:'For Release', state:'forrelease', leaf:true, folder:true, allowSearch:true]
		];
	}	

	@ProxyMethod
	public def getColumns(o) {
		return [
			[name:'appno', caption:'Application No', width:120, resizable:false],
			[name:'apptype', caption:'App. Type', width:80, resizable:false],
			[name:'permitee.name', caption:'Permitee'],
			[name:'tradename', caption:'Trade Name', expression: "#{item.tradename} #{((item.branchname) ? '( '+item.branchname+' )' : '')}", type:'label'],
			[name:'state', caption:'State', width:120, resizable:false],
			[name:'txnmode', caption:'Txn Mode', width:120, resizable:false],
		];
	}

	void beforeList(o) {
		o._pagingKeys = "a.objid";
		if(o.name=="search") {
			//do not fire search if specifics not defined
			if( o.searchtext == "%") o.searchtext ="?";
			o._listMethod = "getListSearch";
		}	
	}

	@ProxyMethod
	public def getForRenewalList(o) {
		o.year = dateSvc.serverYear;
		o.state = 'forrenewal';
		if(o.tradename) o.tradename = '%'+o.tradename.trim()+'%';
		if(o.permiteename) o.permiteename = '%'+o.permiteename.trim()+'%';
		return biz.getListForRenewal(o);
	}

	@ProxyMethod
	public def loadRecordForRenewal(o) {
		def m = biz.read( o );
		m.appno = null;
		m.apptype = "RENEW";
		m.state = "new";
		m.txnmode = "ONLINE";
		m.lobs = biz.getLobs(m);
		m.infos = biz.getInfos(m);
		m.requirements = [];
		m.taxfees = [];
		m.otherfees = [];

		//set the business id.
		m.businessid = m.objid;
		//replace the objids;
		m.objid = "BPRENEW"+new UID();
		m.lobs.each {
			it.objid = "BPLOB"+new UID();
			it.parentid = m.objid;
			it.assessmenttype = "RENEW";
		}
		m.infos.each {
			it.objid = "BPINFO"+new UID();
			it.parentid = m.objid;
		}
		return m;
	}

	public void beforeCreate( def o ) {
		def yr = dateSvc.serverYear;
		def mnth = dateSvc.serverMonth;
		def smon = ( mnth < 10 ) ? "0"+mnth : mnth+"";
		def prefix = "BP"+dateSvc.serverYear+smon;
		o.appno = prefix+seqSvc.getNextFormattedSeries(prefix);
		if(!o.txnmode)
			throw new Exception("Please specify txnmode");
		if( o.txnmode == "ONLINE") {
			o.dtfiled = dateSvc.serverDate;
			o.appyear = yr;
			o.yearstarted = yr;
		}
		o.txndate = dateSvc.serverDate;
		o.createdby = env.USERID;
		o.state = "pending";
	}

	private def convertInfo(o) {
		def value = o.value;
		if( value == null ) return;

		switch(o.attribute.datatype) {
			case "decimal":
				o.decimalvalue = Double.parseDouble(value+"");
				break;
			case "integer":
				o.intvalue = Integer.parseInt(value+"");
				break;
			case "string_array":	
			case "string":
				o.stringvalue = (String)value;
				break;
			case "boolean":
				value = ( value == 1 || value == true ) ? "true" : "false";
				boolean b =  Boolean.parseBoolean(value);
				o.booleanvalue = (b) ? 1 : 0; 
				break;
		} 
	}

	public void afterCreate( def p ) {
		for(o in p.lobs) {
			o.objid = "BPAPPLOB"+new UID();
			o.parentid = p.objid;
			em.create( o, "lob");
		}
		for(o in p.infos) {
			o.objid = "BPAPPINFO"+new UID();
			o.parentid = p.objid;
			convertInfo(o);
			em.create( o, "info");
		}
		for(o in p.requirements) {
			o.objid = "BPAPPREQ"+new UID();
			o.parentid = p.objid;
			o.status = 'pending';
			em.create(o, "requirement");
		}
	}


	public void afterOpen( def p ) {
		println "aftre open";
		p.lobs = em.getLobs(p);
		p.infos = em.getInfos(p);
		p.taxfees = em.getTaxfees(p);
		p.otherfees = em.getOtherfees(p);
		p.requirements = em.getRequirements(p);

		//store value in value;
		p.infos.each {
			switch(it.attribute.datatype) {
				case "string_array":
				case "string":
					it.value = it.stringvalue;
					break;
				case "integer":
					it.value = it.intvalue;	
					break;
				case "decimal":
					it.value = it.decimalvalue;
					break;
				case "boolean":
					it.value = (it.booleanvalue==1)?true:false;				
			}
		}
		p.requirements.each {
			it.completed = (it.status == 'completed' ) ? 1 : 0;
			if(it.type=="DATA") it.filetype = "bprequirement:DATA";
		}
	}

	private void saveInfos(p) {
		em.removeInfos(p);
		for(o in p.infos) {
			if(!o.objid) {
				o.objid = "BPAPPINFO"+new UID();
			}
			o.parentid = p.objid;
			convertInfo(o);
			em.save( o, "info");
		}
	}

	private void saveTaxfees(p) {
		em.removeTaxfees(p);
		for(o in p.taxfees.findAll{it.taxfeetype!='OTHERFEE'}) {
			if(!o.objid) {
				o.objid = "BPTXFEE"+new UID();
			}
			o.parentid = p.objid;
			em.create( o, "taxfee");
		}
	}

	/*********************************	
	* REQUIREMENT FULFILLMENT ACTIONS
	*********************************/
	@ProxyMethod
	public def submitDataRequirement(def p) {
		em.save( p, "requirement_data" );
		def m = [:];
		m.objid = p.refid;
		m.userid=env.USERID;
		m.username = env.USER;	
		m.dtcompleted = dateSvc.serverDate;
		def buff = new StringBuffer();
		buff.append("ref no:"+p.refno );
		if( p.dtissued ) buff.append(" issued:"+p.dtissued );
		buff.append(" "+p.remarks);
		m.remarks = buff.toString(); 
		em.completeRequirement(m);
		return [completed:1, completedby:[objid:m.userid, name:m.username], dtcompleted:m.dtcompleted,remarks:m.remarks ];
	}


	/*********************************	
	* ASSESSMENT ACTIONS
	*********************************/
	@ProxyMethod
	public def calculateTaxfees(o) {
		def result = bpAssessment.execute(o);
		def taxfees = result.taxfees;
		//retrieve also other taxfees
		def otherfees = em.getOtherfees(o);
		def list = taxfees + otherfees;
		if(!list) throw new Exception("No taxes or other charges found");
		return list;
	}

	/************************
	* WORKFLOW ACTIONS
	************************/
	@ProxyMethod
	public void submitForAssessment(def p) {
		def z = p.infos.findAll{it.value==null};
		if(z) {
			throw new Exception("Please provide the ff. info : \n" + z.collect{ it.attribute.caption }.join( "\n" ));	
		}	
		saveInfos(p);
		em.changeState( [objid:p.objid, state:'forassessment'] );
	}

	@ProxyMethod
	public void submitForPayment(def p) {
		if(!p.taxfees)
			throw new Exception("There must be at least one tax/fee.");
		saveTaxfees(p);
		em.changeState( [objid:p.objid, state:'forpayment']);

		//we shall post the application to business after submitting for payment so we can create the ledger.
		//if businessid is not null, then we must retrieve the business.
		def businessid = p.businessid;
		if(businessid) {
			def z = biz.read( [objid:businessid] );
			z.activeyear = p.appyear;
			z.state = "PAYMENT_PENDING";
			biz.update( z );
		}
		else {
			businessid = "BUS"+new UID();
			def g = [:];
			g.putAll( p );
			g.activeyear = p.appyear;
			g.state = "PAYMENT_PENDING";
			g.objid = businessid;
			bizSvc.create( g );
			em.updateBusinessId( [businessid: businessid, objid: p.objid ]);
		}

		p.taxfees.each {
			it.businessid = businessid;
			it.applicationid = p.objid;
			it.iyear = p.appyear;
			it.discount = 0;
			it.paymentmode = ba.findAccount([objid:it.account.objid])?.paymentmode;
			if(!it.paymentmode) it.paymentmode = "YEAR";
		}
		bizSvc.postReceivable( p.taxfees );
	}


}	