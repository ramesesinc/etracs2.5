import com.rameses.annotations.*;
import com.rameses.rules.common.*;

public class BusinessApplicationReportService
{
	@ProxyMethod
	public def buildApplicationReportInfo( application ){
		def info = [
			barcode: null,
			//barcodeurl: var.get('barcode_url').replace('$P{data}', bpa.barcode),
			appno: application.appno,
			apptype: application.apptype,
			appdate: application.appdate,
			tradename: application.tradename,
			businessaddress: application.businessaddress,
			permiteeno : null, 
			permiteename: application.permitee.name,
			permiteeaddress: application.permitee.address,
			businessorgtype: application.businessorgtype,
			officetype: null,
			tin : application.ids?.find{ it.idname == 'TIN' }?.idvalue,
            sss : application.ids?.find{ it.idname == 'SSS' }?.idvalue,
			ctcno: null,
			ctcplaceissued: null,
			ctcdateissued: null,
			infos: [],
			//requirements: bpsettingSvc.setting.requirements,
			//signatories: bpsettingSvc.setting.applicationsignatories
		];
		
		info.infos << [ year: null, appinfos:buildAppInfo( application ) ];
		
		//add application data from the late renewal
		/*
		em.sqlContext.createNamedQuery('bpapplication:getApplicationByParentId')
					.setParameter( 'parentid', bpa.parentid)
					.resultList.each { 
						it.appinfos = em.serializer.read( it.appinfos );
						info.infos << [ year: it.iyear, appinfos:buildAppInfo( it.appinfos ) ]
					}
		*/
		
		info.signatories = ( !info.signatories ) ? [[name:'', department:'', title:'']] : info.signatories ;
		info.requirements = ( !info.requirements )  ? [[requirement:'', complied:'', remarks:'']] : info.requirements;
		info.requirements.each{ it.complied = ((it.complied == true ) ? "YES" : "");  }
		
		return info;
	}
	
	def buildAppInfo( application ){
		def appinfos = [];
		if( application.details ){
			application.details.each{ itm ->
				appinfos << [
					category: application.lobs?.find{ it.id == itm.lobid }?.name,
					name: itm.title,
					value: getDisplayText( itm ),
				];
			}
			
			appinfos.sort{ a, b ->
				def sA = ( a.category ) ? a.category : "";
				def bA = ( b.category ) ? b.category : "";
				return sA <=> bA;
			}
		}
		return appinfos;
	}

	def getDisplayText( detail ){
		def sb = new StringBuffer();
		/*
		if( lob.vartype == 'string_array' ){
			lob.arrayvalues.each{
				if( it == lob.value ) sb << "[x] " + it+" ";
				else sb << "[ ] " + it + " ";
			}
		}
		*/
		
		if( detail.type == 'boolean' ){
			def x = " ";
			if( detail.value != null ) x = (detail.value)? 'x': ' ';
			sb << "[${x}] TRUE [${x}] FALSE";
		}
		
		def format = { pattern, val ->
			if( !val ) return "";
			def f = new java.text.DecimalFormat( pattern );
			return f.format( val );
		}
		
		if( detail.type == 'integer' ) sb << format('#,##0', detail.value );
		if( detail.type == 'decimal' ) sb << format('#,##0.00', detail.value );
		if( detail.type == 'string'  ) sb << ((detail.value == null) ? "" : detail.value);
		
		return sb.toString().trim();
	}
}