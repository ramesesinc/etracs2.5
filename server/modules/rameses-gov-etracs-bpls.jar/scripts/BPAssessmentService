import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.rules.common.*;

public class BPAssessmentService  {

	@Resource("RuleService")	
	def ruleSvc;

	@ActiveDB("rule")
	def ruleDB;

	@ActiveDB("lob")
	def lob;

	@ActiveDB("businessaccount")
	def ba;

	@ActiveDB("businessvariable")
	def bv;

	@Service("DateService")
	def dateSvc;

	String RULESET = "bpassessment";

	def buildFacts( o, lobMap ) {
		def facts = [];

		def currDate = dateSvc.serverDate;
		def dt = o.dtfiled;
		if( dt ==null ) dt = currDate;
		facts << new EffectiveDate( dt );
		facts << new CurrentDate(currDate);

		def app = ruleSvc.createFact( RULESET, RULESET+".BPApplication");
		app.apptype = o.apptype;
		app.orgtype = o.orgtype;
		app.officetype = o.officetype;
		app.barangayid = o.barangay.objid;
		facts << app;
		o.lobs.each {
			def LOB = ruleSvc.createFact( RULESET, RULESET+".LOB");
			LOB.objid = it.lobid;
			LOB.lobid = it.lobid;
			LOB.name = it.name;
			LOB.classification = it.classification?.objid;
			LOB.attributes = "-" + lob.getAttributes( [lobid: it.lobid ] )*.name.join("-") + "-";
			LOB.assessmenttype = it.assessmenttype;
			facts << LOB;
			lobMap.put( it.lobid, LOB );
		}
		o.infos.each {
			def dtype = it.attribute.datatype;
			def lob = it.lob;
			def obj = null;
			switch( dtype ) {
				case "decimal":
					obj = ruleSvc.createFact( RULESET, RULESET + ".DecimalBusinessInfo" );
					if(it.value) obj.value = Double.parseDouble(it.value+"");
					break;
				case "integer":
					obj = ruleSvc.createFact( RULESET, RULESET + ".IntegerBusinessInfo" );
					if(it.value)  obj.value = Integer.parseInt(it.value+"");
					break;
				case "boolean":
					obj = ruleSvc.createFact( RULESET, RULESET + ".BooleanBusinessInfo" );
					if(it.value) {
						it.value = ( it.value == 1 || it.value == true ) ? "true" : "false";
						obj.value = Boolean.parseBoolean(it.value);
					}
					break;
				case "string_array":	
				case "string":
					obj = ruleSvc.createFact( RULESET, RULESET + ".StringBusinessInfo" );
					obj.value = (String) it.value;
					break;
			}
			obj.objid = it.objid;
			obj.name = it.attribute.name;
			if( lob ) obj.lob = lobMap[ lob.objid ];
			facts << obj;
		}
		return facts;
	}

	def buildActions(def o, def newinfos, def taxfees, def lobMap, def facts ) {
		def actions = new RuleAction();
		actions.addCommand( "print_test", new PrintTest() );
		actions.addCommand( "ask_business_info", new AskBusinessInfo( entity:o, newinfos:newinfos, BV:bv) );
		actions.addCommand( "summarize_appinfo", new SummarizeAppInfo( entity:o, newinfos:newinfos, facts: facts ) );
		actions.addCommand( "compute_taxfee", new ComputeTaxFee( entity:o, taxfees:taxfees, BA:ba ) );
		actions.addCommand( "summarize_taxfee", new SummarizeTaxFee( taxfees:taxfees, ruleSvc: ruleSvc, lobMap: lobMap, facts: facts));
		actions.addCommand( "update_business_tax", new UpdateBusinessTax());
		return actions;
	}

	@ProxyMethod
	public def execute(def o) throws Exception {
		def newinfos = [];
		def taxfees = [];
		def lobMap = [:];
		def facts = buildFacts(o, lobMap);
		def actions = buildActions(o, newinfos, taxfees, lobMap, facts );
		def grps = ruleDB.getRulegroups( [ruleset: RULESET] );
		int phase = 0;
		for( g in grps ) { 
			ruleSvc.execute( RULESET, facts, actions, g.name );
			//if there is entry in newinfos break it.
			if(newinfos) break;
			phase++;
		}
		newinfos.each {it.phase = phase};
		return [infos:newinfos, taxfees: taxfees, phase: phase];
	}
}

//used for debugging
public class PrintTest implements RuleActionHandler {
	public void execute(def params, def drools) {
		println "print ->"+params; 	
	}
}

public class AskBusinessInfo implements RuleActionHandler {
	def entity;
	def newinfos;
	def BV;
	public void execute(def params, def drools) {
		def lob = params.lob;
		def attrid = params.attribute.key;
		def option = params.option;
		def test = null;

		//find it in the list so we dont have to add it again.
		if( !lob ) {
			test = entity.infos.findAll{ it.lob == null }.find{ it.attribute.objid == attrid };
			if(!test) {
				test = newinfos.findAll{it.lob==null}.find{ it.attribute.objid == attrid };
			}	
		}
		else {
			test = entity.infos.findAll{ it.lob!=null }.find{ it.lob.objid == lob.objid && it.attribute.objid == attrid };
			if(!test) {
				test =  newinfos.findAll{ it.lob!=null }.find{ it.lob.objid == lob.objid && it.attribute.objid == attrid };
			}
		}
		if(!test) {
			def info = [objid:"BPINFO"+new UID()];
			info.attribute = BV.read( [objid: attrid ] );
			if(lob) {
				info.lob = [objid:lob.objid, name:lob.name];
			}
			newinfos << info;
		} 
	}
}

public class SummarizeAppInfo implements RuleActionHandler {
	def facts;
	def newinfos;
	def entity;
	public void execute(def params, def drools) {
		println "summarize app info";
	}
}

/***
* This has a different implementation than the old rules. The higher the number is prioritized
*/

public class ComputeTaxFee implements RuleActionHandler {
	def entity;
	def taxfees;
	def BA;

	public void execute(def params, def drools) {
	
		def lob = params.lob;
		def acctid = params.account.key;
		def test = null;
		def amt = params.amount.doubleValue;

		if( !lob ) {
			test = taxfees.findAll{it.lob==null}.find{it.account.objid == acctid};
		}
		else {
			test = taxfees.findAll{it.lob!=null}.find{ it.lob.objid == lob.objid && it.account.objid == acctid };
		}

		//if account already exists, do not override.
		if(!test) {
			def info = [objid:"BPTXFE"+new UID()];
			info.account = BA.findAccount( [objid: acctid] );
			if(lob) {
				info.lob = [objid:lob.objid, name:lob.name];
			}
			info.assessedvalue = amt;
			info.amount = amt;
			info.rulename = drools.rule.name;
			taxfees << info;
		}
		else {
			if( test._taxfees == null ) test._taxfees = [];
			test._taxfees << [rulename: drools.rule.name, amount: amt];
		}
	}
}

/**
* totals all business taxes, finds highest, lowest, 
**/
public class SummarizeTaxFee implements RuleActionHandler {
	def facts;
	def taxfees;
	def ruleSvc;
	def lobMap;
	
	public void execute(def type, def drools) {
		String fact;
		switch(type) {
			case "TAX":
				fact = "BusinessTax";
				break;
			case "REGFEE":
				fact = "RegFee"
				break;
			case "OTHERCHARGE":
				fact = "OtherCharge";
				break;
		}
		String pkg = "bpassessment"; 
		def list = taxfees.findAll{ it.account.taxfeetype == type };
		list.each {
			def bt = ruleSvc.createFact( "bpassessment", pkg+"."+fact);
			bt.objid = it.objid;
			bt.acctid = it.account.objid;
			if( it.lob ) bt.lob = lobMap[ it.lob.objid ]
			bt.name = it.account.title;
			bt.amount = it.amount;
			bt.assessedvalue = it.assessedvalue;
			bt.data = it;
			facts << bt;
		}
	}
}

public class UpdateBusinessTax implements RuleActionHandler {
	public void execute(def params, def drools) {
		params.businesstax.data.amount = params.amount;
	}
}