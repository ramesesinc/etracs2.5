import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.rules.common.*;

public class BPAssessmentService  {

	@Resource("RuleService")	
	def ruleSvc;

	@ActiveDB("rule")
	def ruleDB;

	@ActiveDB("lob")
	def lob;

	@ActiveDB("businessaccount")
	def ba;

	@ActiveDB("businessvariable")
	def bv;

	@ActiveDB("businessrequirement")
	def br;

	@Service("DateService")
	def dateSvc;

	@Service("NumberService")
	def numberSvc;

	String RULESET = "bpassessment";

	def factBuilder = { dtype, objid, name, lob, value, factName ->
		def obj = ruleSvc.createFact( RULESET, RULESET + "." + factName );
		obj.objid = objid;
		obj.name = name;
		obj.lob = lob;
		if( value ) {
			switch( dtype ) {
				case "decimal":
					obj.decimalvalue = Double.parseDouble(value+"");
					break;
				case "integer":
					obj.intvalue = Integer.parseInt(value+"");
					break;
				case "boolean":
					value = ( value == 1 || value == true ) ? "true" : "false";
					obj.booleanvalue = Boolean.parseBoolean(value);
					break;
				case "string_array":	
				case "string":
					obj.stringvalue = (String) value;
					break;
			}
		}
		return obj;
	}

	def infoBuilder = { def entity, def newinfos, def lob, def attrid, def val, def phase ->
		//check first if info already exists.
		def test = null;
		if( !lob ) {
			test = entity.infos.findAll{ it.lob?.objid == null }.find{ it.attribute.objid == attrid };
			if(!test) {
				test = newinfos.findAll{it.lob?.objid==null}.find{ it.attribute.objid == attrid };
			}	
		}
		else {
			test = entity.infos.findAll{ it.lob?.objid!=null }.find{ it.lob.objid == lob.objid && it.attribute.objid == attrid };
			if(!test) {
				test =  newinfos.findAll{ it.lob?.objid!=null }.find{ it.lob.objid == lob.objid && it.attribute.objid == attrid };
			}
		}
		if(test) return null;

		def info = [objid:"BPINFO"+new UID()];
		info.phase = phase;
		info.attribute = bv.read( [objid: attrid ] );
		if(lob) {
			info.lob = [objid:lob.objid, name:lob.name];
		}
		info.datatype = info.attribute.datatype;
		if(val) {
			String datatype = info.attribute.datatype;
			switch(datatype) {
				case "integer":
					info.value = val.intValue;
					break;
				case "decimal":
					info.value = val.doubleValue;
					break;
				case "string":	
					info.value = val.stringValue;
					break;
				case "boolean":	
					info.value = val.booleanValue;
					break;
			}
		}			
		newinfos << info;
		return info;
	}

	def comparator = { agg, oldvalue, newvalue ->
		switch(agg) {
			case "COUNT":
				return (oldvalue + 1);

			case "SUM":
				return oldvalue + newvalue;

			case "MIN":
				if( oldvalue <= newvalue  )		
					return oldvalue;
				else
					return newvalue;
			case "MAX":
				if( oldvalue >= newvalue  )		
					return oldvalue;
				else
					return newvalue;
		}
		return 0;
	}

	def buildFacts( request ) {
		def o = request.entity;
		def lobMap = request.lobMap;

		def facts = [];
		def currDate = dateSvc.serverDate;
		def dt = currDate;
		if(o.dtfiled && !(o.dtfiled instanceof java.util.Date)) {
			dt = java.sql.Date.valueOf( o.dtfiled );
		}
		facts << new EffectiveDate( dt );
		facts << new CurrentDate(currDate);

		def app = ruleSvc.createFact( RULESET, RULESET+".BPApplication");
		app.apptype = o.apptype;
		app.orgtype = o.orgtype;
		app.officetype = o.officetype;
		app.barangayid = o.barangay?.objid;
		app.txnmode = o.txnmode;
		facts << app;
		o.lobs.each {
			def LOB = ruleSvc.createFact( RULESET, RULESET+".LOB");
			LOB.objid = it.lobid;
			LOB.lobid = it.lobid;
			LOB.name = it.name;
			LOB.classification = it.classification?.objid;
			LOB.attributes = "-" + lob.getAttributes( [lobid: it.lobid ] )*.name.join("-") + "-";
			LOB.assessmenttype = it.assessmenttype;
			facts << LOB;
			lobMap.put( it.lobid, LOB );
		}
		o.infos.each {
			def dtype = it.attribute.datatype;
			def lob = null;
			if(it.lob) lob = lobMap[ it.lob.objid ];
			def f = factBuilder(dtype, it.objid, it.attribute.name, lob, it.value, "BusinessInfo");
			facts << f;
		}
		return facts;
	}

	def buildActions(def request) {
		def actions = new RuleAction();
		actions.addCommand( "ask_business_info", new AskBusinessInfo( infoBuilder: infoBuilder, request:request ));
		actions.addCommand( "assert_business_info", new AssertBusinessInfo(request:request, infoBuilder: infoBuilder, factBuilder:factBuilder, comparator: comparator));
		actions.addCommand( "compute_taxfee", new ComputeTaxFee( request:request, BA:ba, NA: numberSvc) );
		actions.addCommand( "assert_taxfee", new AssertTaxFee( request:request, ruleSvc: ruleSvc));
		actions.addCommand( "update_taxfee", new UpdateTaxFee(request:request));
		actions.addCommand( "remove_taxfee", new RemoveTaxFee(request:request));
		actions.addCommand( "select_taxfee", new SelectTaxFee(request:request));

		actions.addCommand( "add_sysvar", new AddSysVar(request:request, comparator: comparator));
		actions.addCommand( "assert_sysvars", new AssertSysVars(request:request, factBuilder:factBuilder));
		actions.addCommand( "add_requirement", new AddRequirement(request:request, BR: br));
		actions.addCommand( "print_test", new PrintTest());
		return actions;
	}


	@ProxyMethod
	public def execute(def o) throws Exception {
		if(!o.lobs)
			throw new Exception("Please provide at least one line of business");
		def request = [newinfos:[], taxfees:[], lobMap:[:], vars:[:], taxfeefacts:[], entity: o, requirements:[] ]; 
		request.facts = buildFacts(request);
		request.actions = buildActions( request );
		
		def grps = ruleDB.getRulegroups( [ruleset: RULESET] );
		int phase = 0;
		for( g in grps ) { 
			request.phase = phase;
			request.vars.clear();
			request.taxfeefacts.clear();

			ruleSvc.execute( RULESET, request.facts, request.actions, g.name );
			//if first phase and there is entry in newinfos break it.
			if(phase <= 1 && request.newinfos) break;
			phase++;
		}
		
		//sort taxfees before returning to the client
		if(request.taxfees) {
			request.taxfees = request.taxfees.findAll{ it.lob?.objid!=null }.sort{ it.lob } + request.taxfees.findAll{it.lob?.objid==null}; 
		}		
		return [infos:request.newinfos, taxfees: request.taxfees, phase: phase, requirements:request.requirements];
	}
}

public class AskBusinessInfo implements RuleActionHandler {
	def infoBuilder;
	def request;
	public void execute(def params, def drools) {
		def lob = params.lob;
		def attrid = params.attribute.key;
		def defvalue = params.defaultvalue;
		def entity = request.entity;
		def newinfos = request.newinfos;
		def info = infoBuilder( entity, newinfos, lob, attrid, null, request.phase );
		if(info) info.defaultvalue = defvalue;
	}
}

public class AssertBusinessInfo implements RuleActionHandler {
	def request;
	def factBuilder;
	def infoBuilder;
	def comparator;

	public void execute(def params, def drools) {
		def lob = params.lob;
		def attrid = params.attribute.key;
		def val = params.value;
		def facts = request.facts;

		//check if fact already exists
		def info = infoBuilder( request.entity, request.newinfos, lob, attrid, val, request.phase );
		if(info!=null) {
			//assert in facts so if can be evaluated.
			def objid = info.objid;
			def name = info.attribute.name;
			def value = info.value;
			def datatype = info.attribute.datatype;
			facts << factBuilder(datatype, objid, name, lob, value, "BusinessInfo");
		}
	}
}


/***
* This has a different implementation than the old rules. The higher the number is prioritized
*/
public class ComputeTaxFee implements RuleActionHandler {
	def request;
	def BA;
	def NA;

	public void execute(def params, def drools) {
		def entity = request.entity;
		def taxfees = request.taxfees;
		def taxfeefacts = request.taxfeefacts;
		def lob = params.lob;
		def acctid = params.account.key;
		def amt = params.amount.doubleValue;
		def test = null;
		
 		if( !lob ) {
			test = taxfees.findAll{it.lob?.objid==null}.find{it.account.objid == acctid};
		}
		else {
			test = taxfees.findAll{it.lob?.objid!=null}.find{ it.lob.objid == lob.objid && it.account.objid == acctid };
		}

		//if account already exists, do not override.
		if(!test) {
			def info = [objid:"BPTXFEE"+new UID()];
			info.account = BA.findAccount( [objid: acctid] );
			if(lob) {
				info.lob = [objid:lob.objid, name:lob.name];
			}
			info.taxfeetype = info.account.taxfeetype;
			info.paymentmode = info.account.paymentmode;
			info.assessedvalue = NA.round(amt);
			info.amount = NA.round(amt);
			info.rulename = drools.rule.name;
			taxfees << info;
			taxfeefacts << info;
		}
		else {
			//add rule history so we can trace rules that executed the account.
			if( test._taxfees == null ) test._taxfees = [];
			def hist = [rulename: drools.rule.name, amount: amt];
			if( lob!=null) hist.lob = [objid:lob.objid, name:lob.name];
			test._taxfees << hist;
		}
	}
}

/**
* totals all business taxes, finds highest, lowest, 
**/
public class AssertTaxFee implements RuleActionHandler {
	def ruleSvc;
	def request;
	
	public void execute(def type, def drools) {
		def facts = request.facts;
		def taxfees = request.taxfees;
		def lobMap = request.lobMap;
		def taxfeefacts = request.taxfeefacts;
		
		def tmp = [:];
		taxfeefacts.each {
			def bt = ruleSvc.createFact( "bpassessment", "bpassessment.TaxFeeAccount");
			bt.objid = it.objid;
			bt.acctid = it.account.objid;
			if(it.lob) bt.lob = lobMap[ it.lob.objid ]
			bt.name = it.account.title;
			bt.amount = it.amount;
			bt.type = it.account.taxfeetype;
			bt.assessedvalue = it.assessedvalue;
			bt.data = it;
			facts << bt;
			//collect in prepartion for determining min,max only if lob is not null
			if( bt.lob ) {
				def xlist = tmp[bt.acctid];
				if(xlist==null) {
					xlist = [];
					tmp[bt.acctid] = xlist;
				}
				xlist << bt;
			}
		}
		//determine min max for each in tmp list, list must have more than 1.
		tmp.each { k,v->
			if(v.size()>1) {
				v.min{it.amount}.lowest = true;
				v.max{it.amount}.highest = true;
			}
		}
	}
}


public class UpdateTaxFee implements RuleActionHandler {
	def request;
	public void execute(def params, def drools) {
		def amt = params.amount.doubleValue;
		def tf = params.taxfee;
		tf.amount = amt
		params.taxfee.data.amount = amt;
		def list = request.facts.findAll{ it.class.name == "bpassessment.TaxFeeAccount" }.findAll{ it.acctid == tf.acctid && it.lob?.objid!=null};
		list.each { it.highest = false; it.lowest = false; }

		//update is highest and lowest again.
		if(list.size()>1) {
			list.min{it.amount}.lowest = true;
			list.max{it.amount}.highest = true;
		}
	}
}

public class SelectTaxFee implements RuleActionHandler {
	def request;
	public void execute(def params, def drools) {
		def taxfeefacts = request.taxfeefacts;
		def tf = params.taxfeeaccount;
		def selectoption = params.selectoption;

		def data = tf.data;
		data.lob = null;
		def test = taxfeefacts.find{ it.account?.objid == tf.acctid };
		if(!test) {
			taxfeefacts << data;
		}
		else {
			def torep=null;
			if(selectoption == "MIN" ) {
				if(test.amount > data.amount) {
					taxfeefacts.remove( test );	
					taxfeefacts << data;				
					torep = test;
				}
				else {
					torep = data;
				}	
			}
			else {
				if(test.amount < data.amount ) {
					taxfeefacts.remove(test);
					taxfeefacts << data;
					torep = test;
				}	
				else {
					torep = data;
				}	
			}
			def z = request.taxfees.find{ it.objid == torep.objid };
			request.taxfees.remove(z);
			//remove from facts
			def f = request.facts.findAll{ it.class.name == "bpassessment.TaxFeeAccount" }.find{ it.objid == torep.objid };
			request.facts.remove(f);
		}
	}
}



public class RemoveTaxFee implements RuleActionHandler {
	def request;
	public void execute(def params, def drools) {
		
		def tf = params.taxfee;
		def acctid = tf.acctid;
		def lob = tf.lob;

		def taxfees = request.taxfees;
		def facts = request.facts;
		facts.remove(tf);
		def test;
		if( !lob ) {
			test = taxfees.findAll{it.lob?.objid==null}.find{it.account.objid == acctid};
		}
		else {
			test = taxfees.findAll{it.lob?.objid!=null}.find{ it.lob.objid == lob.objid && it.account.objid == acctid };
		}
		if(test) {
			taxfees.remove(test);
		}	
	}
}

public class AddSysVar implements RuleActionHandler {
	def request;
	def comparator;

	public void execute(def params, def drools) {
		def vars = request.vars;
		String name = params.name;
		String agg = params.aggregate;
		String dtype = params.datatype;
		def value = params.value;
		if( agg == "COUNT") dtype = "integer";
		
		def var = vars[name];
		if( var == null ) {
			var = [datatype:dtype, name: name ];
			vars[name] = var;
		}
		def newAmt = 0;
		if( agg !="COUNT") {
			newAmt = (dtype=="integer") ? value.intValue : value.doubleValue;
		}
		
		def oldAmt = (var.value==null) ? 0 : var.value;
		var.value = comparator( agg, oldAmt, newAmt );
 		
	}
}

//Loads each variable and 
public class AssertSysVars implements RuleActionHandler {
	def factBuilder;
	def request;
	public void execute(def params, def drools) {
		def vars = request.vars;
		def facts = request.facts;
		vars.each { k,v->
			def svar = factBuilder(v.datatype, null, v.name, null, v.value, "SysVariable");
			facts << svar;
		}
		vars.clear();
	}

}

public class AddRequirement implements RuleActionHandler {
	def request;
	def BR;
	public void execute(def params, def drools) {
		def type = params.type;
		def step = params.step;
		if( !request.requirements.find{it.refid == type.key}) {
			def z = BR.findReq([objid: type.key])
			def filetype=null;
			if(z.type=="DATA") filetype = "bprequirement:DATA";
			request.requirements << [refid: type.key, type:z.type, filetype:filetype, title: type.value, step: step ]; 
		}
	}

}


public class PrintTest implements RuleActionHandler {

	public void execute(def params, def drools) {
		def msg = params.message;
		println "-------------- Print Message ------------------";
		println msg.stringValue; 
	}

}
