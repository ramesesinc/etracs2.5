import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.services.extended.*;

public class RPTSmsService extends ActiveCrudListService 
{

	@ActiveDB("rpt_sms")
	def em;

	
	@Service(value="SMSService", connection="sms_sender")
	def smsSvc;	

	
	@Service('DateService')
	def dtSvc 

	@Service('NumberService')
	def numSvc

	@Service('RPTBillingService')
	def billSvc 

	@Service('RPTBillingReportService')
	def billReportSvc


	@ProxyMethod
	public def getColumns(o) {
		return [
			[name: 'traceid', caption: 'Trace ID' ],
			[name: 'logdate', caption: 'Log Date' ],
			[name: 'action', caption: 'Action' ],
			[name: 'phoneno', caption: 'Phone No' ],
			[name: 'message', caption: 'Message' ],
		];
	}

	@ProxyMethod
	public def send( msg ) {
				/*
			msg structure  =[
				objid 	: '', 		messageid
				phoneno : '',		
				message : '',
				refid 	: '',		optional, can be set to your transactionid
			]
		*/
		msg.objid = 'SMS-' + new java.rmi.server.UID();
		println 'reply -> ' + smsSvc.send(msg)	
	}

	@ProxyMethod
	public def enrollFaas( info ) {
		def faas = em.findFaasByTdNo(info)		
		if (!faas)
			throw new Exception('TD No. ' + info.refno + ' is invalid or not enrolled.')
		if (faas.state == 'CANCELLED')
			throw new Exception('TD No. ' + info.refno + ' has already been cancelled.')
		if (faas.state != 'CURRENT')
			throw new Exception('TD No. ' + info.refno + ' is not yet approved.')
		
		em.enroll([phoneno:info.phoneno, refid:faas.rptledgerid])
		return 'TD No. ' + info.refno + ' has been successfully enrolled.'
	}


	@ProxyMethod
	public def enrollTrackingNo( info ) {
		def tracking = em.findTrackingInfo(info)		
		if (!tracking)
			throw new Exception('Tracking No. ' + info.refno + ' is invalid.')
		
		em.enroll([phoneno:info.phoneno, refid:tracking.objid])
		return 'Tracking No. ' + info.refno + ' has been successfully enrolled. Text RPTSTATUS <trackingno> to receive status information. '
	}


	@ProxyMethod
	public def getTrackingStatus( info ) {
		def tracking = em.findRegisteredTracking(info)

		if (!tracking)
			throw new Exception('Tracking No. ' + info.refno + ' is invalid.')
		
		String msg = ''
		msg += 'Tracking No.  : ' + tracking.trackingno
		msg += '  Document Type : ' + tracking.filetype.toUpperCase()
		msg += '  Status        : ' + tracking.msg
		return msg
	}


	@ProxyMethod
	public def getInfo( info ) {
		def list = []

		if (info.refno ) {
			def faas = em.findRegisteredFaasByTdNo(info)
			if (faas) 
				list << faas 
		}
		else {
			list = em.getRegisteredFaasesByPhoneNo(info)
		}
		
		if (!list)
			throw new Exception('There are no enrolled properties. Text RPTENROLL <tdno> to enroll a property.')

		String msg = ''
		list.each{
			def s = 'TD No. ' + it.tdno + ' ('
			s += 'Status: ' + it.state + ' '
			if (it.cadastrallotno)
			s += 'Lot No.: ' + it.cadastrallotno + '  '
			s += 'MV: P' + numSvc.format('#,##0.00', it.totalmv)  + '  '
			s += 'AV: P' + numSvc.format('#,##0.00', it.totalav)  + '  '
			s += 'LastYearPaid: ' + it.lastyearpaid + '  '
			s += 'LastQtrPaid: ' + it.lastqtrpaid 
			s += ')\n'
			msg += s 
		}
		return msg
	}


	@ProxyMethod
	public def generateBillByTdNo(info) {
		def faas = em.findRegisteredFaasByTdNo(info)		
		if (!faas)
			throw new Exception('TD No. ' + info.refno + ' is invalid or not enrolled.')
		if (faas.state == 'CANCELLED')
			throw new Exception('TD No. ' + info.refno + ' has already been cancelled.')

		billSvc.generateBillByLedgerId(faas.rptledgerid)
		def bill = billReportSvc.generateReportByLedgerId( faas.rptledgerid )
		def msg = 'Current Balance for TD No. ' + info.refno + ' is ' + bill.total + '. '
		msg += 'Amount is valid until ' + dtSvc.format('MMMM dd, yyyy', bill.validuntil) + '.'
		return msg 
	}
	

	@ProxyMethod
	public def deleteRegisteredTdNo( info ) {
		em.deleteRegisteredTdNo(info)
		return 'TD No. ' + info.refno + ' has been successfully unregistered.'
	}


	@ProxyMethod
	public def deleteAllRegistration( info ) {
		em.deleteAllRegistration(info)
		return 'All properties associated to phone no. ' + info.phoneno + ' has been successfully unregistered.'
	}



}