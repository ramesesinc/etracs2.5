import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.services.extended.*;

public class BPApplicationService extends ActiveCrudListService {

	@ActiveDB("business")
	def em;

	@ActiveDB("bpapplication")
	def application;

	@ActiveDB("businessaccount")
	def ba;

	@Service("SequenceService")
	def seqSvc;

	@Service("DateService")
	def dateSvc;

	@Service("BPAssessmentService")
	def assessmentSvc;

	@Service("BusinessInfoService")
	def bizInfo;

	@Env
	def env;

	String pagingKeys = "a.objid";
	String subSchemaName = "application";

	@ProxyMethod
	public def getNodes(o) {
		return [
			[name:'assessment', caption:'For Assessment', state:'assessment', leaf:true, folder:true, allowSearch:true],
			[name:'approval', caption:'For Approval', state:'approval', leaf:true, folder:true, allowSearch:true],
			[name:'payment', caption:'For Payment', state:'payment', leaf:true, folder:true, allowSearch:true],
			[name:'release', caption:'For Release', state:'release', leaf:true, folder:true, allowSearch:true]
		];
	}	

	@ProxyMethod
	public def getColumns(o) {
		return [
			[name:'appno', caption:'Application No', width:120, resizable:false],
			[name:'apptype', caption:'App. Type', width:80, resizable:false],
			[name:'owner.name', caption:'Owner'],
			[name:'tradename', caption:'Trade Name', expression: "#{item.tradename} #{((item.branchname) ? '( '+item.branchname+' )' : '')}", type:'label'],
			[name:'state', caption:'State', width:120, resizable:false],
			[name:'txnmode', caption:'Txn Mode', width:120, resizable:false],
		];
	}

	void beforeList(o) {
		if(o.name=="search") {
			//do not fire search if specifics not defined
			if( o.searchtext == "%") o.searchtext ="?";
		}	
		else {
			o.filter = ''' WHERE state=$P{state}''' 
		}
	}
	
	

	public void afterOpen(o) {
		bizInfo.getAppInfos( o )

		o.lobs = application.getLobs(o);
		o.infos = application.getInfos(o);
		o.infos.each { it.value = formatter(it); }
		o.taxfees = application.getTaxfees(o);
		o.requirements = application.getRequirements(o);
		o.requirements.each {
			if(it.type == "DOC" ){
				def d = em.getDocRequirements(it);
				it.putAll( d );
			} 
			if(it.status == 'completed') it.completed = 1;
		}
	}

	public void saveLobs(o) {
		application.removeLobs(o);
		o.lobs?.each {
			it.applicationid = o.applicationid;
			it.businessid = o.objid;
			it.iyear = o.activeyear;
			em.save( it, "lob" );
		}
	}

	public void saveInfos(o) {
		application.removeInfos(o);
		//update infos
		o.infos?.each {
			it.applicationid = o.applicationid;
			it.businessid = o.objid;
			convertInfo(it);
			em.save( it, "info" );
		}
	}

	public void afterUpdate( o ) {
		def m = [applicationid:o.objid, activeyear: o.appyear];
		m.lobs = o.lobs;
		m.infos = o.infos;
		bizSvc.saveLobs(m);
		bizSvc.saveInfos(m);
	}

	

	@ProxyMethod
	public def addExternalFee(o) {
		if(!o.department)
			throw new Exception("Department is required in external fees");
		if(!o.refid)	
			throw new Exception("Refid to the requirement is required in external fees");

		o.amtpaid = 0;
		o.discount = 0;	
		biz.create( o , "receivable" );
	}

	@ProxyMethod
	public def removeExternalFee(o) {
		biz.delete( o , "receivable" );
	}

	@ProxyMethod
	public def submitExternalFees(o) {
		if(!o.refid)
			throw new Exception("Submit external fees require refid");
		def m = [:];
		m.objid = o.refid;
		m.userid = env.USERID;
		m.username = env.USERNAME;
		m.dtcompleted = dateSvc.serverDate;
		em.submitExternalOfficeFees( m );	
	}

	@ProxyMethod
	public def assess(o) {
		def result = assessmentSvc.execute(o);		
		def taxfees = result.taxfees;
		def fees = em.getExternalOfficeFees(o);
		taxfees.addAll( fees );
		return result;
	}

	@ProxyMethod
	public def submitForApproval(o) {
		validateRequirements( o.requirements, "payment" );
		o.state = "approval";
		update(o);
		def m = [objid:o.businessid, applicationid:o.objid, iyear: o.appyear, iqtr:1];
		m.lobs = o.lobs;
		m.infos = o.infos;
		bizSvc.saveLobs(m);
		bizSvc.saveInfos(m);
	}

	@ProxyMethod
	public void sendBackToAssessment(o) {
		o.state = "assessment";
		update(o);
	}

	@ProxyMethod
	public void submitForPayment(o) {
		o.state = "payment";
		update(o);
		def m = [objid:o.businessid, applicationid:o.objid, iyear: o.appyear, iqtr:1];
		//save data for executing
		m.lobs = o.lobs;
		m.infos = o.infos;
		bizSvc.saveLobs(m);
		bizSvc.saveInfos(m);
		m.receivables = o.taxfees;
		bizSvc.postReceivables(m);		
		update(o);
	}

	@ProxyMethod
	public def issueBin( o ) {
		def z = [objid: o.businessid];
		def yr = dateSvc.serverYear;
		def mnth = dateSvc.serverMonth;
		def smon = ( mnth < 10 ) ? "0"+mnth : mnth+"";
		def prefix = "BIN"+yr+smon;
		z.bin = prefix+seqSvc.getNextFormattedSeries(prefix);
		em.create(z,  "bin");
		return z;
	}

	@ProxyMethod
	public def issuePermit( o ) {
		
	}

}	