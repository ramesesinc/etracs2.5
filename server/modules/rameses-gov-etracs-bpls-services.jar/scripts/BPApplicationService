import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.services.extended.*;

public class BPApplicationService extends ActiveCrudService {

	@ActiveDB("bpapplication")
	def em;

	@Service("BusinessInfoService")
	def bizInfoSvc;

	@Service("DateService")
	def dateSvc;

	@Env
	def env;

	/**********************************************************
	* called when creating new,renew,amend,retire applications
	***********************************************************/ 
	@ProxyMethod
	public def initNew(o) {
		if(!o.apptype)
			throw new Exception("apptype must be provided");
		def currentYear = dateSvc.serverYear;	
		def entity = [:];
		entity.businessid = o.businessid;
		def activeYear = currentYear;
		if(entity.businessid!=null) {
        	//retrieve the business info
        	def p = [objid: entity.businessid];
        	def b = bizInfoSvc.openForApplication(p);
        	if( b.state=='PROCESSING' ) 
        		throw new Exception("This business is currently being processed");
        	activeYear = b.activeyear;	
        	entity.putAll(b);
        	if(entity.requirements==null) entity.requirements = [];
        	if(entity.totals==null) {
        		entity.totals = [tax:0,othercharge:0,regfee:0,total:0];
        	}	
        }
        else {
	        entity.appinfos = [];
	        entity.lobs = [];
	        entity.assessmentinfos = [];
	        entity.requirements = [];
        	if(entity.totals==null) {
        		entity.totals = [tax:0,othercharge:0,regfee:0,total:0];
        	}	
        }
        entity.appyear = currentYear;
		entity.txnmode = 'ONLINE';
		entity.objid = "BP"+ new UID();
        entity.apptype = o.apptype;
		switch(  o.apptype ) {
    		case "NEW":
    			entity.state = "ASSESSMENT";
    			break;	
    		case "RENEW":
    			entity.state = "ASSESSMENT";
    			if(activeYear>=currentYear)
    				throw new Exception("Business is already renewed for " + currentYear);

    			//do not include lines of business that are retired	
    			def lobs = entity.lobs.findAll{it.assessmenttype!='RETIRE'};	
    			lobs.each {
    				it.assessmenttype = 'RENEW';
    			}	
    			entity.lobs = lobs;
    			break;
    		case "RETIRE":
    			println "retire";
    			entity.lobs.each {
    				it.assessmenttype = 'RETIRE';
    			}
    			break;
    		default:
    			if(currentYear!=activeYear)
    				throw new Exception("Business must first be renewed for " + currentYear);
    			entity.lobs.each {
    				it.assessmenttype = 'ACTIVE';
    			}	
    			break;
    	}        
        return entity;
	}

 
	/**************************************************
	* called by new application or by data capture.
	* App No - naming = Use BIN + appcount. 
	**************************************************/ 
	public void beforeCreate(o) {
		if(!o.txnmode)
			throw new Exception("Please specify txnmode");
		def yr = dateSvc.serverYear;	
		if(!o.dtfiled) o.dtfiled = dateSvc.serverDate;	//useful if captured new
		o.txndate = dateSvc.serverDate;		
		o.appyear = yr;
		o.yearstarted = yr;
		//check first if there is a businessid else create one if not.
		def bizInfo = null;
		if(!o.businessid) {
			def b = [:];
			b.putAll(o);
			b.objid = null;
			b.activeyear = yr;
			bizInfo = bizInfoSvc.create(b);
		}
		else {
			bizInfo = bizInfoSvc.open([objid: o.businessid]);
		}

		if(!bizInfo.bin)
			throw new Exception("BIN for Application is null. Pls. check data again");	

		o.businessid = bizInfo.objid;
		o.bin = bizInfo.bin;
		o.appcount = bizInfo.appcount;	//we store this so it can be retrieved in afterCreate
		o.appno = bizInfo.bin + "-" + bizInfo.appcount;
		o.taxfees = [];
		o.createdby = [objid:env.USERID,name:env.USER];
	}

	public void afterCreate(o) {
		def b = [objid: o.businessid ];
		b.currentapplicationid = o.objid;
		b.appcount = o.appcount + 1;
		//if apptype is renew, we should nullify permit also
		if( o.apptype == 'RENEW' || o.apptype == 'RETIRE') {
			b.currentpermitid = null;
			b.state = 'PROCESSING';
		}
		bizInfoSvc.update(b);
	}


}