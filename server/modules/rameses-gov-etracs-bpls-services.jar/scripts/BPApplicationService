import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.services.extended.*;

public class BPApplicationService extends ActiveCrudListService {

	@ActiveDB("bpapplication")
	def em;

	@ActiveDB("businessaccount")
	def ba;

	@Service("SequenceService")
	def seqSvc;

	@Service("DateService")
	def dateSvc;

	@Service("BusinessInfoService")
	def bizSvc;

	@ActiveDB("business")
	def biz;

	@Service("BPAssessmentService")
	def assessmentSvc;

	@Env
	def env;

	@ProxyMethod
	public def getNodes(o) {
		return [
			[name:'assessment', caption:'For Assessment', state:'assessment', leaf:true, folder:true, allowSearch:true],
			[name:'payment', caption:'For Payment', state:'payment', leaf:true, folder:true, allowSearch:true],
			[name:'release', caption:'For Release', state:'release', leaf:true, folder:true, allowSearch:true]
		];
	}	

	@ProxyMethod
	public def getColumns(o) {
		return [
			[name:'appno', caption:'Application No', width:120, resizable:false],
			[name:'apptype', caption:'App. Type', width:80, resizable:false],
			[name:'permitee.name', caption:'Permitee'],
			[name:'tradename', caption:'Trade Name', expression: "#{item.tradename} #{((item.branchname) ? '( '+item.branchname+' )' : '')}", type:'label'],
			[name:'state', caption:'State', width:120, resizable:false],
			[name:'txnmode', caption:'Txn Mode', width:120, resizable:false],
		];
	}

	void beforeList(o) {
		o._pagingKeys = "a.objid";
		if(o.name=="search") {
			//do not fire search if specifics not defined
			if( o.searchtext == "%") o.searchtext ="?";
			o._listMethod = "getListSearch";
		}	
	}

	
	public void beforeCreate(o) {
		if(!o.txnmode)
			throw new Exception("Please specify txnmode");

		if( o.txnmode == "ONLINE") {
			def yr = dateSvc.serverYear;
			o.dtfiled = dateSvc.serverDate;
			o.appyear = yr;
			o.yearstarted = yr;
		}

		//create the business if there is none referenced
		if( !o.businessid ) {
			def m = [:];
			m.putAll( o );
			m.activeyear = o.appyear;
			m.applicationid = o.objid;
			def b = bizSvc.create(m);
			o.businessid = b.objid;
		}
		else {
			bizSvc.updateActiveStatus( [objid: o.businessid, year:o.appyear ]);
		}
		def mnth = dateSvc.serverMonth;
		def smon = ( mnth < 10 ) ? "0"+mnth : mnth+"";
		def prefix = "BP"+o.appyear+smon;
		o.appno = prefix+seqSvc.getNextFormattedSeries(prefix);
		o.txndate = dateSvc.serverDate;
		o.createdby = env.USERID;
		o.state = "assessment";		
	}

	public void afterCreate(o) {
		//create the requirements
		for(x in o.requirements) {
			if(!x.status) x.status = "open";
			x.objid = "BAREQ" + new UID();
			x.businessid = o.businessid;
			x.applicationid = o.objid;
			em.create( x, "requirement");
			if(x.refno) {
				em.create( x, "requirement_data");
			}
		}
	}

	public void afterOpen(o) {
		//get the taxpayer info also.
		def permiteeInfo = biz.findPermiteeInfo([objid: o.permitee.objid ]);
		if(permiteeInfo!=null) o.permitee.putAll( permiteeInfo );
		def formatter = { x->
			switch(x.attribute.datatype) {
				case "decimal" : return x.decimalvalue; break;
				case "integer" : return x.intvalue; break;
				case "string"  : return x.stringvalue; break;
				case "boolean" : 
					if(x.boolvalue == 0) return false;
					if(x.boolvalue == 1) return true;
					return x.boolvalue; 
					break;
			}
		}
		o.lobs = em.getLobs(o);
		o.infos = em.getInfos(o);
		o.infos.each { it.value = formatter(it); }
		o.taxfees = em.getTaxfees(o);
		o.requirements = em.getRequirements(o);
		o.requirements.each {
			if(it.type == "DOC" ){
				def d = em.getDocRequirements(it);
				it.putAll( d );
			} 
			if(it.status == 'completed') it.completed = 1;
		}
	}

	public void afterUpdate( o ) {
		def m = [objid:o.businessid, applicationid:o.objid, activeyear: o.appyear];
		m.lobs = o.lobs;
		m.infos = o.infos;
		bizSvc.saveLobs(m);
		bizSvc.saveInfos(m);
	}

	@ProxyMethod
	public void submitForPayment(o) {
		validateRequirements( o.requirements, "payment" );

		o.state = "payment";
		update(o);
		def m = [objid:o.businessid, applicationid:o.objid, iyear: o.appyear, iqtr:1];

		//save data for executing
		m.lobs = o.lobs;
		m.infos = o.infos;
		bizSvc.saveLobs(m);
		bizSvc.saveInfos(m);
		m.receivables = o.taxfees;
		bizSvc.postReceivables(m);
	}

	@ProxyMethod
	public void validateRequirements(def reqs, def step) {
		def buffer = new StringBuffer();
		for(o in reqs) {
			if(o.step == step && o.status != "completed") {
				buffer.append( o.title  + "\n" );
			}
		}
		if(buffer.length()>0) {
			buffer.insert(0, "Requirements not satisfied:\n");
			throw new Exception(buffer.toString());
		}
	}

	@ProxyMethod
	public def addExternalFee(o) {
		if(!o.department)
			throw new Exception("Department is required in external fees");
		if(!o.refid)	
			throw new Exception("Refid to the requirement is required in external fees");

		o.amtpaid = 0;
		o.discount = 0;	
		biz.create( o , "receivable" );
	}

	@ProxyMethod
	public def removeExternalFee(o) {
		biz.delete( o , "receivable" );
	}

	@ProxyMethod
	public def submitExternalFees(o) {
		if(!o.refid)
			throw new Exception("Submit external fees require refid");
		def m = [:];
		m.objid = o.refid;
		m.userid = env.USERID;
		m.username = env.USERNAME;
		m.dtcompleted = dateSvc.serverDate;
		em.submitExternalOfficeFees( m );	
	}

	@ProxyMethod
	public def assess(o) {
		def result = assessmentSvc.execute(o);		
		def taxfees = result.taxfees;
		def fees = em.getExternalOfficeFees(o);
		taxfees.addAll( fees );

		/*
		def totals = result.totals;
		totals.total_tax = taxfees.findAll{ it.account.taxfeetype == 'TAX'}.sum{it.amount};
		if(!totals.total_tax) totals.total_tax = 0;

		totals.total_regfee = taxfees.findAll{ it.account.taxfeetype == 'REGFEE'}.sum{it.amount};
		if(!totals.total_regfee) totals.total_regfee = 0;

		totals.total_othercharge = taxfees.findAll{ it.account.taxfeetype == 'OTHERCHARGE'}.sum{it.amount};
		if(!totals.total_othercharge) totals.total_othercharge = 0;

		
		totals.total = totals.total_tax + totals.total_regfee + totals.total_othercharge;
		*/
		return result;
	}


}	