import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.services.extended.*;

public class BPApplicationService extends ActiveCrudService {

	@ActiveDB("bpapplication")
	def em;

	@Service("SequenceService")
	def seqSvc;

	@Service("DateService")
	def dateSvc;

	@Service("BPAssessmentRuleService")
	def assessmentSvc;

	@Env
	def env;

	
	public void beforeCreate(o) {
		validateRequirements(o.requirements, "info");

		if(!o.txnmode)
			throw new Exception("Please specify txnmode");

		if( o.txnmode == "ONLINE") {
			def yr = dateSvc.serverYear;
			o.dtfiled = dateSvc.serverDate;
			o.appyear = yr;
			o.yearstarted = yr;
		}
		def mnth = dateSvc.serverMonth;
		def smon = ( mnth < 10 ) ? "0"+mnth : mnth+"";
		def prefix = "BP"+o.appyear+smon;
		o.appno = prefix+seqSvc.getNextFormattedSeries(prefix);
		o.txndate = dateSvc.serverDate;
		o.createdby = env.USERID;
		o.state = "info";		
	}

	/*************************************************************************
	* after create, create also ledger where we can post our taxes and fees. 
	**************************************************************************/
	public void afterCreate(o) {
		saveLobs(o);
		saveInfos(o);
		saveRequirements(o);
	}
	
	public void saveLobs(o) {
		o.lobs.each {
			it.applicationid = o.objid;
			if(o.businessid) it.businessid = o.businessid;
			it.iyear = o.appyear;
			em.save( it, "lob" );
		}
	}

	public void saveInfos(o) {
		o.infos.each {
			it.applicationid = o.objid;
			if(o.businessid) it.businessid = o.businessid;
			it.iyear = o.appyear;
			convertInfo(it);
			em.save( it, "info" );
		}
	}

	public void saveRequirements(o) {
		//create the requirements
		for(x in o.requirements) {
			if(!x.status) x.status = "open";
			x.objid = "BAREQ" + new UID();
			x.applicationid = o.objid;
			em.create( x, "requirement");
			if(x.refno) {
				em.create( x, "requirement_data");
			}
		}
	}


	private void convertInfo(o) {
		def value = o.value;
		if( value == null ) return;
		switch(o.attribute.datatype) {
			case "decimal":
				o.decimalvalue = Double.parseDouble(value+"");
				break;
			case "integer":
				o.intvalue = Integer.parseInt(value+"");
				break;
			case "string_array":	
			case "string":
				o.stringvalue = (String)value;
				break;
			case "boolean":
				value = ( value == 1 || value == true ) ? "true" : "false";
				boolean b =  Boolean.parseBoolean(value);
				o.boolvalue = (b) ? 1 : 0; 
				break;
		} 
	}


	/**********************************************************
	* This is called in many aspects of the application. during
	* create, approval of assessment, etc.
	***********************************************************/
	@ProxyMethod
	public void validateRequirements(def reqs, def step) {
		def buffer = new StringBuffer();
		for(o in reqs) {
			if(o.step == step && o.status != "completed") {
				buffer.append( o.title  + "\n" );
			}
		}
		if(buffer.length()>0) {
			buffer.insert(0, "Requirements not satisfied:\n");
			throw new Exception(buffer.toString());
		}
	}

	@ProxyMethod
	public def openByAppno(o) {
		def z = em.findApplicationByAppNo( [appno:o.appno] );	
		if(!z)
			throw new Exception("Doc not found");
		return open( [objid: z.applicationid ] );
	}

	public void afterOpen(o) {
		def formatter = { x->
			switch(x.attribute.datatype) {
				case "decimal" : return x.decimalvalue; break;
				case "integer" : return x.intvalue; break;
				case "string"  : return x.stringvalue; break;
				case "boolean" : 
					if(x.boolvalue == 0) return false;
					if(x.boolvalue == 1) return true;
					return x.boolvalue; 
					break;
			}
		}
		o.lobs = em.getLobs(o);
		o.infos = em.getInfos(o);
		o.requirements = em.getRequirements(o);
		o.infos.each { it.value = formatter(it) };
		o.requirements.each {
			if(it.type == "DOC" ){
				def d = em.getDocRequirements(it);
				it.putAll( d );
			} 
			if(it.status == 'completed') it.completed = 1;
		}
		//if state is for approval, include the taxfees.
		if( o.state == 'approval') {
			def result = assess(o);	 
			o.taxfees = result.taxfees;
			o.total_tax = result.totals.total_tax;
			o.total_regfee = result.totals.total_regfee;
			o.total_othercharge = result.totals.total_othercharge;
			o.total = result.totals.total;
		}
		else {
			o.taxfees = em.getTaxfees(o);	
			o.total_tax = o.taxfees.findAll{ it.account.taxfeetype == 'TAX'}.sum{it.amount};
			o.total_regfee = o.taxfees.findAll{ it.account.taxfeetype == 'REGFEE'}.sum{it.amount};
			o.total_othercharge = o.taxfees.findAll{ it.account.taxfeetype == 'OTHERCHARGE'}.sum{it.amount};
			if(!o.total_tax) o.total_tax = 0;
			if(!o.total_regfee) o.total_regfee = 0;
			if(!o.total_othercharge) o.total_othercharge = 0;
			o.total = o.total_tax + o.total_regfee + o.total_othercharge;
		}
	}

	/*************************************************************************
	* update info saves lines of business and fees   
	**************************************************************************/
	@ProxyMethod
	public def updateInfos(o) {
		em.removeLobs(o);
		em.removeInfos(o);
		saveInfos(o);
		saveLobs(o);
	}

	/*************************************************************************
	* assess   
	**************************************************************************/
	@ProxyMethod
	public def submitForAssessment(o) {
		o.state = "asessment";
		em.changeState( o );
	}


	@ProxyMethod
	public def assess(o) {
		return assessmentSvc.execute(o);		
	}

	@ProxyMethod
	public def submitForApproval(o) {
		validateRequirements( o.requirements, "payment" );
		o.state = "approval";
		em.changeState( o );
	}

	@ProxyMethod
	public void sendBackToAssessment(o) {
		o.state = "assessment";
		em.changeState( o );
	}

	@ProxyMethod
	public void submitForPayment(o) {
		def m = [objid: o.objid ];
		m.applicationid = o.objid;
		em.create( m, "ledger" );
		o.taxfees.each {
			it.ledgerid = m.objid;
			it.applicationid = o.objid;
			it.iyear = o.appyear;
			it.amtpaid = 0;
			it.discount = 0;
			em.create( it, "receivable" );
		}
		em.changeState( [objid:o.objid, state:'payment']);
	}

}	