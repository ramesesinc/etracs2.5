import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.services.extended.*;

public class BusinessInfoService extends ActiveCrudListService {

	@ActiveDB("business")
	def em;

	@Service("DateService")
	def dateSvc;

	@ProxyMethod
	public def getNodes(o) {
		return [
			[name:'new', appstate:'info', caption:'New', leaf:true, folder:true, allowSearch:true],
			[name:'renew', appstate:'info', caption:'Renewal', leaf:true, folder:true, allowSearch:true],
			[name:'amend', appstate:'info', caption:'For Amendment', leaf:true, folder:true, allowSearch:true],
			[name:'retire', appstate:'info', caption:'For Retirement', leaf:true, folder:true, allowSearch:true],

			[name:'assessment', appstate:'assessment', caption:'For Assessment', leaf:true, folder:true, allowSearch:true],
			[name:'approval', appstate:'approval', caption:'For Approval', leaf:true, folder:true, allowSearch:true],
			[name:'payment', appstate:'payment', caption:'For Payment', leaf:true, folder:true, allowSearch:true],
			[name:'active', caption:'Active (w/o Permit)', leaf:true, folder:true, allowSearch:true],
			[name:'activep', caption:'Active (with Permit)', leaf:true, folder:true, allowSearch:true],
			[name:'expired', caption:'Expired (For Renewal)', leaf:true, folder:true, allowSearch:true],
			[name:'captured', caption:'Captured', leaf:true, folder:true, allowSearch:true],
			[name:'retired', caption:'Retired', leaf:true, folder:true, allowSearch:true],
			[name:'draft', caption:'Draft', leaf:true, folder:true, allowSearch:true],
		];
	}	

	@ProxyMethod
	public def getColumns(o) {
		def cols = [];
		cols << [name:'bin', caption:'BIN', width:120, resizable:false];
		cols << [name:'activeyear', caption:'Year', width:80, resizable:false];
		cols <<	[name:'businessname', caption:'Business Name'];
		cols <<	[name:'businessaddress', caption:'Business Address'];
		cols <<	[name:'owner.name', caption:'Owner'];
		if( o.name !='expired' && o.name != 'captured') {
			cols <<	[name:'appno', caption:'App No', width:120, resizable:false];
			cols <<	[name:'appdate', caption:'App Date', width:80, resizable:false, type:'date'];
			cols <<	[name:'apptype', caption:'App Type', width:80, resizable:false];
			cols <<	[name:'appstate', caption:'App Status', width:80, resizable:false];
		}
		if( o.name == 'activep') {
			cols <<	[name:'permitno', caption:'Permit No', resizable:false];
		}
		return cols;
	}

	void beforeList(o) {
		def activeYear = dateSvc.serverYear;
		o._pagingKeys = "b.objid";
		o.filter = '';
		if(o.name=='search') {
			o._listMethod = "getListSearch";
			if( !o.searchtext || o.searchtext == '%' ) {
				o.searchtext = "?";
			}	
		}
		else if( o.appstate ) {
			o._listMethod = "getListWithApplication";
			o.apptype = null;
			if( o.name == 'new' ) o.apptype = 'NEW';
			else if( o.name == 'renew' ) o.apptype = 'RENEW';
			else if( o.name == 'amend' ) o.apptype = 'AMEND';
			else if( o.name == 'retire' ) o.apptype = 'RETIRE';
			o.filter = '';
			if( o.apptype ) o.filter = 	' AND ba.apptype = $P{apptype} ';
			o.filter += ' AND ba.state=$P{appstate} ';
		}
		else if( o.name == 'active' ) {
			o._listMethod = "getActiveListWithoutPermit";
			o.activeyear = activeYear;
			o.filter = '';
		}
		else if( o.name == 'activep' ) {
			o._listMethod = "getActiveListWithPermit";
			o.activeyear = activeYear;
			o.filter = '';
		}
		else if( o.name == 'expired' ) {
			o._listMethod = "getListForRenewal";
			o.activeyear = activeYear;
			o.state = "ACTIVE";
			o.filter = ' AND b.state=$P{state} ';
		}
		else if( o.name == 'retired' ) {
			o._listMethod = "getRetiredList";
			o.filter = '';
		}
		else if( o.name == 'captured' ) {
			o._listMethod = "getCapturedList";
			o.filter = '';
		}
		else if( o.name == 'discontinued' ) {
			o._listMethod = "getInactiveList";
			o.activeyear = activeYear;
			o.filter = '';
		}
	}


}