import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.services.extended.*

public class BusinessCashReceiptService  {

	@Service("BPBillingService")
	def billingSvc;
	
	
	@ActiveDB("businessaccount")
	def ba;

	@ActiveDB("business")
	def biz;
	
	@Service("NumberService")
	def numberSvc;

	@ProxyMethod
	public def getBilling(def o) throws Exception {
		//retrieve business ledger
		def m = [:];
		m.putAll(o);
		m.entity = biz.read( [objid:o.businessid] );
		m.billdate = o.billdate;
		println o.businessid
		m.receivables = biz.getUnpaidReceivables(o);
		if(!m.receivables)
			throw new Exception("No receivables found for this application");
		def z = billingSvc.getBillItems(m);	
		def result = [:];	
		result.billitems = z.items;
		result.total_tax = z.total_tax;
		result.total_regfee = z.total_regfee;
		result.total_othercharge = z.total_othercharge;
		result.total_amtdue = z.total_amtdue;
		result.excesspayment = z.excesspayment;

		//we need to separate first principal, surcharge, interest accounts
		def amts = z.items.findAll{it.amtdue > 0};
		def surcharges = z.items.findAll{ it.surcharge > 0 };
		def interests = z.items.findAll{ it.interest > 0 };

		//check if each item, principal, surcharge, interest has an account. if not, throw error
		def itemList = [];
		def acctCollector = { itm, acct, amt, qtr ->
			def mx = [:];
			mx.lob = itm.lob;
			mx.account = acct;
			mx.amount = amt;
			mx.qtr = qtr;
			mx.paymentmode = acct.paymentmode;
			itemList << mx;
		}
		for( a in amts ) {
			def acct = ba.findPrincipalAccount( [objid: a.account.objid ] );
			if( !acct ) throw new Exception("Account not found for " + a.account.title);
			if(a.discount==null) a.discount = 0;
			acctCollector( a, acct, numberSvc.round(a.amtdue - a.discount), a.qtr );
		}
		for(a in surcharges ) {
			def acct = ba.findSurchargeAccount( [objid: a.account.objid ] );
			if( !acct ) throw new Exception("Surcharge account not found for " + a.account.title);	
			acctCollector( a, acct, a.surcharge, a.qtr );
		}
		for(a in interests) {
			def acct = ba.findInterestAccount( [objid: a.account.objid ] );
			if( !acct ) throw new Exception("Interest account not found for " + a.account.title);
			acctCollector( a, acct, a.interest, a.qtr );
		}

		//create the receipt items.
		result.receiptitems = [];		
		def grps = itemList.groupBy { [it.lob, it.account ] };
		grps.each { k,v->
			def mm = [objid: 'REVITEM'+new UID()];
			mm.lob = k[0];
			mm.item = k[1];
			mm.amount = numberSvc.round( v.sum{ it.amount } );

			mm.paymentmode = v[0]?.paymentmode;
			mm.fromqtr = v.min{ it.qtr }?.qtr;
			mm.toqtr = v.max{ it.qtr }?.qtr;
			def sbuilder = new StringBuilder();
			if( mm.lob?.name ) {
				sbuilder.append( mm.lob.name + " ");
			}
			if( mm.qtr > 0 ) {
				sbuilder.append( "(Q"+mm.fromqtr);
				if( mm.fromqtr!=mm.toqtr ) sbuilder.append( "-"+mm.toqtr ); 
				sbuilder.append( ")" );
			}
			mm.remarks = sbuilder.toString();
			result.receiptitems << mm;
		}
		return  result;
	}


}
