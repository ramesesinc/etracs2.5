import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.services.extended.*
import java.math.*;

public class BusinessBillingReportService  {

	@Service("BPBillingService")
	def billingSvc;
	
	@ActiveDB("businessaccount")
	def ba;

	@ActiveDB("business")
	def biz;
	
	@Service("NumberService")
	def numberSvc;

	@Service("DateService")
	def dateSvc;

	@ProxyMethod
	public def getReport(def o) throws Exception {

		/**
		* To calculate next due date do the following:
		* For new business, next due date would mean January 1 of next year. 
		* For renew business, next due date is the nearest qtr deadline or month 
		* nearest to actual date. 
		* Example: 
		*    If date is Mar 25 next due date would be April 1
		*    If date is April 2 next due date would be April 20. 
		*/
		def m = [:];
		m.payoption = 'FULLYEAR';
		m.billdate = dateSvc.serverDate;
		m.application = o;


		def z = billingSvc.getBillItems(m);	
		def result = [:];	

		result.billitems = z.items;

		def barcode = "51005:"+o.appno;

        def  data = [
           taxpayername: o.permitee.name, 
           taxpayeraddress: o.permitee.address, 
           billdate: m.billdate, 
           expirydate:null,
           barcode: barcode
        ];

        data.items = [];
        def app = [:]
        app.appno = o.appno;
        app.txntype = o.apptype;
		app.docstate = "APPROVED";
		app.txndate = o.dtfiled; 
		app.tradename = o.tradename;
		app.address = o.businessaddress;

		app.barcode = barcode;
        app.taxfees = result.billitems.collect {
        	[
        		year:it.year,
        		qtr:((it.qtr==0)?null:it.qtr),
        		lobname: it.lob?.name,
        		applicationtype: it.assessmenttype,
        		accttitle: it.account.title,
        		duedate: it.deadline,
        		amount: new BigDecimal(it.amtdue),
        		surcharge: new BigDecimal(it.surcharge),
        		interest: new BigDecimal(it.interest),
        		total: new BigDecimal(it.total)
        	]
        }

        //calculate quarter totals
		app.first_qtr_total = app.taxfees.findAll{ it.qtr <= 1}?.sum{ it.total }; 
		if(app.first_qtr_total==null) app.first_qtr_total = 0.0;

        app.second_qtr_total = app.taxfees.findAll{ it.qtr == 2}?.sum{ it.total }; 
        if(app.second_qtr_total==null) app.second_qtr_total = 0.0;

        app.third_qtr_total = app.taxfees.findAll{ it.qtr == 3}?.sum{ it.total };  
        if(app.third_qtr_total==null) app.third_qtr_total = 0.0;

        app.fourth_qtr_total = app.taxfees.findAll{ it.qtr == 4}?.sum{ it.total };   
        if(app.fourth_qtr_total==null) app.fourth_qtr_total = 0.0; 

		app.totalamount = app.taxfees.sum{ it.amount }; 
		if(app.totalamount==null)app.totalamount = 0.0;
		app.totalsurcharge = app.taxfees.sum{ it.surcharge }; 
        if(app.totalsurcharge==null) app.totalsurcharge = 0.0;
        app.totalinterest = app.taxfees.sum{ it.interest };
        if(app.totalinterest==null) app.totalinterest = 0.0;
        app.grandtotal = app.taxfees.sum{ it.total };
        if(app.grandtotal==null) app.grandtotal = 0.0;
        
        data.grandtotal = app.grandtotal;
        
        data.items << app;
		return  data;
	}


}
