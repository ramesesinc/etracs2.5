import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.services.extended.*;

public class BusinessRenewalService  {

	@ActiveDB("business")
	def em;

	@Service("DateService")
	def dateSvc;

	@ProxyMethod
	public def getColumns(o) {
		return [
			[name:'tradename', caption:'Trade Name1'],
			[name:'owner.name', caption:'Owner'],
			[name:'businessaddress', caption:'Business Address'],
			[name:'bin', caption:'BIN'],
			[name:'activeyear', caption:'Year'],
			[name:'laterenewal', caption:'Late Renewal', type:'checkbox', checkedValue:1,uncheckedValue:0],
		];
	}

	@ProxyMethod
	public def getList(o) {
		if(!o.activeyear) {
			o.activeyear = dateSvc.serverYear;
		}
		o.previousyear = o.activeyear - 1;	
		o._pagingKeys = "b.objid";
		return em.getListForRenewal(o);
	}

	@ProxyMethod
	public def open(o) {
		o = em.read( o );
		o.lobs = em.getLobs(o);
		o.lobs.each { it.assessmenttype = 'RENEW'}
		o.redflags= [];

		//apply standard red flags
		if( o.activeyear < (dateSvc.serverYear-1) ) {
			o.redflags << [message:'Late Renewal. Last year renewed:' + o.activeyear];
		}
		
		//check if there are pending cases

		return o;
	}

}