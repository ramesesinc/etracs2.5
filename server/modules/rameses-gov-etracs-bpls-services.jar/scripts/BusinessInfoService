import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.services.extended.*;

public class BusinessInfoService extends ActiveCrudService {

	@ActiveDB("business")
	def em;

	@Service("DateService")
	def dateSvc;

	@Service("SequenceService")
	def seqSvc;

	@Service("Var")
	def sysvar;

	@Service("LOVService")
	def LOV;

	/**********************************************************
	* called by new application or by data capture.
	* BIN naming standard = {LGUCODE,3}{YEAR,4}{MONTH,2}{SEQ,5}
	***********************************************************/ 
	public void beforeCreate(o) {
		if(!o.objid) {
			o.objid = "BUS"+new UID();
		}	
		o.activeyear = o.activeyear;
		if(o.state!='CAPTURED') o.state = "PROCESSING";
		o.taxcredit = 0;
		o.lastqtrpaid = 0;
		o.appcount = 0;
		o.currentapplicationid = null;
		o.user = [objid: o.createdby];
		if(!o.bin) {
			def lgucode = sysvar.lgu_objid;
			if(!lgucode)
				throw new Exception("LGU code is null. Please check lgu_objid in sysvar");
			def yr = o.activeyear;
			def mnth = dateSvc.serverMonth;
			def smon = ( mnth < 10 ) ? "0"+mnth : mnth+"";
			def prefix = "B"+lgucode+yr+smon;
			o.bin = prefix+seqSvc.getNextFormattedSeries(prefix);
		}
	}

	public void afterOpen(o) {
		if(o.orgtype) o.orgtypename = LOV.ORG_TYPES[o.orgtype];
		o.barcode = '51005:'+o.bin;
	}

	/**********************************************************
	* loads only the most active lines of business based on the
	* active year of the business
	***********************************************************/ 
	public def getLobs(o) {
		return em.getActiveLobs( o );
	}	

	public def getAppInfos(o) {
		def infos = em.getAppInfos( o );
		infos.each {
			it.value = formatInfo(it);
		}
		return infos;
	}	

	public def getAssessmentInfos(o) {
		def infos = em.getActiveAssessmentInfos( o );
		infos.each {
			it.value = formatInfo(it);
		}
		return infos;
	}	


	/********************************************************
	* activate - this method is called when an application is 
	* released. It will break the application into the app infos
	* lobs and assessment infos, and change the state of the
	* business from PROCESSING->ACTIVE. 
	*********************************************************/
	@ProxyMethod
	public def activate(o) {
		em.removeInfos(o);
		o.infos.each {
			it.businessid = o.objid;
			it.applicationid = o.currentapplicationid;
			convertInfo(it);
			em.create(it, "info");
		}
		o.lobs.each {
			if(!it.objid) it.objid = "BUSLOB"+new UID();
			it.businessid = o.objid;	
			it.applicationid = o.currentapplicationid;
			it.iyear = o.activeyear;
			em.create(it, "lob");
		}
		o.assessmentinfos.each {
			it.businessid = o.objid;
			it.applicationid = o.currentapplicationid;
			it.iyear = o.activeyear;
			convertInfo(it);
			em.create(it, "assessment_info");
		}	

		//update the state of the business
		if(!o.state=='CAPTURED') o.state = 'ACTIVE';
		em.update(o);
	}

	/********************************************************
	* management of infos
	*********************************************************/
	private void convertInfo(o) {
		def value = o.value;
		if( value == null ) return;
		switch(o.attribute.datatype) {
			case "decimal":
				o.decimalvalue = Double.parseDouble(value+"");
				break;
			case "integer":
				o.intvalue = Integer.parseInt(value+"");
				break;
			case "string_array":	
			case "string":
				o.stringvalue = (String)value;
				break;
			case "boolean":
				value = ( value == 1 || value == true ) ? "true" : "false";
				boolean b =  Boolean.parseBoolean(value);
				o.boolvalue = (b) ? 1 : 0; 
				break;
		} 
	}

	private def formatInfo(x)  {
		switch(x.attribute.datatype) {
			case "decimal" : return x.decimalvalue; break;
			case "integer" : return x.intvalue; break;
			case "string_array" : return x.stringvalue; break;
			case "string"  : return x.stringvalue; break;
			case "boolean" : 
				if(x.boolvalue == 0) return false;
				if(x.boolvalue == 1) return true;
				return x.boolvalue; 
				break;
		}
	}


	/****************************************************************
	* different finder and open methods
	* The open for Application is specific for applications requiring
	* to open an existing info. The open is not used becuase it
	* will fire the BPApplicationInterceptor whereas openForApplication
	* does not.
	****************************************************************/
	@ProxyMethod
	public def openForApplication(o) {
		def z = open(o);
		z.appinfos = getAppInfos(o);
        z.lobs = getLobs(o);
        z.assessmentinfos = [];
		return z;
	}

	@ProxyMethod
	public def findForWorkflow(o) {
		def z = open(o);
		z.appinfos = getAppInfos(o);
        z.lobs = getLobs(o);
        z.assessmentinfos = getAssessmentInfos(o);
		return z;
	}

	@ProxyMethod
	public def findByBIN( o ) {
		def z = em.findByBIN(o);
		if(!z)
			throw new Exception("BIN not found. " + o.bin );
		afterOpen(z);
		z.appinfos = getAppInfos(o);
        z.lobs = getLobs(o);
        z.assessmentinfos = getAssessmentInfos(o);
		return z;
	}

	

}