import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.services.extended.*

public class BusinessWorkflowService  {

	@Service("BusinessInfoService")
	def bizInfoSvc;

	@Service("BPApplicationService")
	def appSvc;

	@ActiveDB("bpapplication")
	def appDB;

	@ActiveDB("business")
	def bizDB;

	@Service("BPLedgerService")
	def ledgerSvc;

	@Env
	def env;

	private void loadExt(def b) {
		b.barcode = '51005:'+b.bin;
		if(b.currentapplicationid) {
			def app = appSvc.open( [objid: b.currentapplicationid] );
			app.bin = b.bin;
			app.barcode = b.barcode;
			app.orgtypename = b.orgtypename;
			b.application = app;

			//retrieve the assessor
			if(app.assessedby?.objid) {
				def u = appDB.findAssessedBy( [objid:app.objid] );
				if(u) app.assessedby.putAll( u );
				println app.assessedby;
			}
		}

		if(b.currentpermitid) {
			def p = bizDB.read( [objid:b.currentpermitid], "permit" );
			b.permit = p; 
		}
	}

	@ProxyMethod
	public def open(o) {
		def b = bizInfoSvc.findForWorkflow(o);
		loadExt(b);
		return b;
	}

	@ProxyMethod
	public def findByBIN(o) {
		def b = bizInfoSvc.findByBIN(o);
		loadExt(b);
		return b;
	}

	/****************************************************
	* workflow actions
	*****************************************************/
	@ProxyMethod
	public def assignAssessorToSelf( o ) {
		def app = [ objid: o.appid ];
		app.userid = env.USERID;
		app.username = env.USER;
		def result = [:];
		def m = appDB.findAssessedBy( [objid:app.objid] );
		if(m?.assessedby?.objid) {
			throw new Exception("This document is already assigned to " + m.lastname+ ", " + m.firstname);
		}
		appDB.updateAssessedBy(app);
		o.assignee = [objid:env.USERID, name:env.USER];
		
		//this is for use by client
		result.state = 'assessment';
		result.assessedby = o.assignee;
		return result;
	}

	@ProxyMethod
	public def getApproverList() {
		return appDB.getApproverList();
	}

	@ProxyMethod
	public def submitForApproval(o) {
		if(!o.assignee) throw new Exception("Please specify an approver");
		def app = [objid: o.appid];
		app.userid = o.assignee.objid;
		app.username = o.assignee.name;
		appDB.updateApprovedBy( app );
		return [state:'approval'];
	}

	@ProxyMethod
	public def returnForAssessment(o) {
		if(!o.assignee) throw new Exception("Please specify an assignee");
		def app = [objid: o.appid];
		return [state:'assessment'];
	}

	@ProxyMethod
	public def approve(app) {
		if(!app.taxfees)
			throw new Exception("Please indicate at least one taxfee item");
		def ledger = [:];
		ledger.items = app.taxfees;
		ledger.items.each { r->
			if(r.lob?.objid) {
				def applob = app.lobs.find{it.lobid==r.lob.objid};
				r.lob.assessmenttype = applob.assessmenttype;
			}
			r.applicationid = app.objid;
			r.businessid = app.businessid;
			r.iyear = app.appyear;
			r.amtpaid = 0;
			r.discount = 0;
		}
		

		ledgerSvc.postReceivables(ledger);
		app.appid = app.objid;
		app.taskid = app.task.objid;
		return [state:'payment'];
	}

	@ProxyMethod
	public def revertApproval(app) {
		if(!app.approvedby?.objid)
			throw new Exception("approver is required");
		app.assignee = app.approvedby;
		ledgerSvc.revertReceivables( [applicationid: app.objid ] );
		app.appid = app.objid;
		app.taskid = app.task.objid;
		return [state:'approval'];
	}


	/***
	* release will explode the application infos and activate the business.
	* at the same time it will also close the remaining tasks.
	***/
	@ProxyMethod
	public void release(o) {
		def app = o.application;
		o.taskid = app.task?.objid;
		o.appid = app.objid;

		def m = [:];
		m.objid = o.objid;
		m.activeyear = app.appyear;
		m.lobs = app.lobs;
		m.infos = app.appinfos;
		m.assessmentinfos = app.assessmentinfos;
		m.businessname = app.businessname;
		m.tradename = app.tradename;
		m.owner = app.owner;
		m.barangay = app.barangay;
		m.businessaddress = app.businessaddress;
		m.orgtype = app.orgtype;
		m.currentapplicationid = o.currentapplicationid;
		if(app.apptype=='RETIRE') {
			m.state = 'RETIRED';
		}
		else {
			m.state = 'ACTIVE';
		}
		bizInfoSvc.activate( m );
	}

	
}
