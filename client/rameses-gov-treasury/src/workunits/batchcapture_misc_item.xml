<workunit>
    <invokers>
        <invoker type="batchcapture:misc:open" caption="Batch Item Information" action="init" target="popup"/>
    </invokers>
    
    <code>
        <![CDATA[    
        import com.rameses.rcp.annotations.*
        import com.rameses.rcp.common.*
        import com.rameses.osiris2.client.*
        import com.rameses.osiris2.common.*
        import java.rmi.server.*;
        import com.rameses.gov.treasury.controllers.*
        import com.rameses.osiris2.reports.*;
        
        class BatchCaptureItemController  {
            
            //to be feed by the caller
            def entity, callerListModel, calculateHandler;
            
            def selectedItem;
            def payment = [:]
            def mode 
            
            @Binding 
            def binding
            
            @Service("CollectionGroupService")
            def colGroupSvc
            
            void init(){    
                if( entity.paymentitems) payment = entity.paymentitems[0]
                mode = entity.items ? 'edit' : 'create'
            }
 
            def getLookupAccount() {
                return InvokerUtil.lookupOpener("cashreceiptitem:lookup", [ 
                    "query.collectorid": entity.collector.objid,
                    onselect: { o->
                        selectedItem.item = o;
                        selectedItem.fund = o.fund;
                    }
                ]);
            }
            
            def listModel = [
                fetchList: { o->
                    if (entity.items == null) entity.items = []; 
                    
                    return entity.items;
                },
                
                onAddItem: {o-> 
                    o.uid = "ITM" + new UID();
                    entity.items << o;
                },
                
                onCommitItem:{o-> 
                    entity.amount = 0.0;
                    entity.items.each{ 
                        entity.amount += (it.amount? it.amount: 0.0); 
                    }
                },
                onRemoveItem:{o-> 
                    if(!MsgBox.confirm("You are about to remove this entry. Proceed?")) 
                        return false;
                    
                    entity.items.remove( o );
                    entity.amount = 0.0 
                    entity.items.each{ 
                        entity.amount += (it.amount? it.amount: 0.0); 
                    }
                    binding.refresh("entity.amount");
                    return true;
                } 
            ] as EditorListModel;
            
            void validateCheckPayment() {
                 if(payment && !payment.bank  )  throw new Exception("Bank is required.  ");
                 if(payment && !payment.checkno )  throw new Exception("Check No is required.  ");
                 if(payment && !payment.checkdate )  throw new Exception("Check Date is required.  ");
                 if(payment && !payment.amount)  throw new Exception("Amount is required.  ");
                    
                if(payment && payment.amount <= 0.0 ) throw new Exception("Check Amount must be greater than 0.  ")    
            
                if(payment && payment.amount > 0.0 ) {
                    if( payment.amount > entity.amount) throw new Exception("Check Amount must not be greater than amount to be paid.  ")
                }
            }
            
            def doOk() {
                if(! entity.items)  throw new Exception("Please enter an item.   ") 
                entity.items.each { 
                    if( ! it.item ) throw new Exception("Account is required. ") 
                    if( it.amount == 0.0 ) throw new Exception("Amount must not equals to zero. ") 
                } 
                
                validateCheckPayment()
                if( payment ) {
                    entity.totalnoncash = payment.amount 
                    entity.totalcash = entity.amount - payment.amount 
                    payment.type = 'CHECK'
                    payment.particulars = payment.checkno + " (" + payment.bank + ") dated " + payment.checkdate;
                    if( entity.paymentitems ) entity.paymentitems.clear()
                    entity.paymentitems << payment;
                } else {
                    entity.totalnoncash = 0.0
                    entity.totalcash = entity.amount;
                    entity.paymentitems = []
                }
                
                if (entity.items && entity.items.size() > 1) { 
                    entity.acctinfo = '( Multiple Accounts )'; 
                } else { 
                    entity.acctinfo = entity.items[0].item.title;
                }
                
                if (callerListModel) callerListModel.refreshSelectedItem(); 
                if (calculateHandler) calculateHandler( entity, mode   ); 
                
                return "_close"; 
            }

            def doCancel() {
                return "_close";
            }
            
            def getCollectionGroupHandler() {
                return InvokerUtil.lookupOpener("collectiongroup:lookup", [ 
                    onselect: { o-> 
                            entity.items= colGroupSvc.getRevenueItems(o.objid).each {
                                it.fund = it.item.fund 
                            }
                            listModel.reload();
                    }]  );
            }
            
            
            def getLookupBank(){
                return InvokerUtil.lookupOpener('bank:lookup', [
                    onselect : {
                        payment = [:]
                        payment.bankid = it.objid;
                        payment.bank   = it.code;
                        payment.deposittype = it.deposittype;
                    },
                    
                    onempty  : {
                        payment = [:] 
                        binding.refresh("payment.*");
                    }
                ])
            }
            
        }
        ]]>
        
    </code>
    
    <pages>
        <page template="com.rameses.gov.treasury.batchcapture.BatchCollectionItemPage"/>
    </pages>
    
</workunit>