<workunit extends="wtemplates/ListController.xml">
        
   <invokers>
        <invoker type="home.action" caption="Collector AF Serial" index="1" action="init" role="COLLECTOR"/>
        <invoker folderid="/explorer/txn/treasury" caption="Collector AF Serial" index="1" action="init" role="COLLECTOR"/>
        
        <!-- OWN TOOLBARS -->
        <invoker type="formActions" caption="Close" action="_close" icon="images/toolbars/cancel.png"/>
        <invoker type="formActions" caption="Activate" action="activate" visibleWhen="#{selectedEntity!=null &amp;&amp; selectedEntity.active ==0}"/>
        <invoker type="formActions" caption="Assign" action="assign" visibleWhen="#{selectedEntity!=null &amp;&amp; selectedEntity.assignee?.name ==null }"/>
        <invoker type="formActions" caption="Unassign" action="unassign" visibleWhen="#{selectedEntity!=null &amp;&amp; selectedEntity.assignee?.name !=null}"/>
        <invoker type="formActions" caption="Deactivate" action="deactivate" visibleWhen="#{selectedEntity!=null &amp;&amp; selectedEntity.active !=0}"/>
        <invoker type="formActions" caption="Change Mode" action="changeMode" visibleWhen="#{selectedEntity!=null}"/>
        <invoker type="formActions" caption="Export" action="doExport" />
        <invoker type="formActions" caption="Import" action="doImport" />
   </invokers>
   
   <code>
       <![CDATA[
        import com.rameses.osiris2.common.*;
        import com.rameses.rcp.common.*;
        import com.rameses.rcp.annotations.*;
        import com.rameses.osiris2.client.*;
        
        class CollectorAFController  {
        
            @Service("AFSerialControlService")
            def svc;

            @Service("CollectionFormService")
            def formSvc;
            
            def entity = [:];
            def selectedEntity;
            def list;
            
            String title = "Manage Accountable Forms";
            def queryForm = new Opener(outcome:'queryform');
            
            def afTypes = [];
            
            void init() {
                afTypes = formSvc.getList([formtype:'serial']);
            }
            
            @PropertyChangeListener
            def listener = [
                "entity.formno": { o->
                    listHandler.reload();
                }
            ]
            
            void activate() {
                if(selectedEntity.active==1)
                    throw new Exception("Entry is already active");
                def z = [:];
                z.objid = selectedEntity.objid;
                z.txnmode = selectedEntity.txnmode;
                z.formno = entity.formno;
                svc.activateControl(z);
                listHandler.reload();    
            }
            
            void deactivate() {
                if(selectedEntity.active==0)
                    throw new Exception("Entry is not active");
                svc.deactivateControl([objid: selectedEntity.objid]);
                listHandler.reload();
            }

            def assign() {
                if(selectedEntity.active==1) {
                    throw new Exception("Entry is currently active. Deactivate first");
                }    
                return InvokerUtil.lookupOpener("subcollector:lookup", [
                    onselect:{x->
                        if(MsgBox.confirm("You are about to assign this stub to " + x.name + ". Continue?")) {
                            svc.assignToSubcollector( [objid:selectedEntity.objid, assignee:x] );
                            listHandler.reload();
                        }
                    }
                ] );    
            }

            def unassign() {
                if(!selectedEntity) throw new Exception("Select an item");
                svc.unassign( selectedEntity );
                listHandler.load();
            }
            
            def changeMode() {
                if(!selectedEntity) throw new Exception("Select an item");
                return InvokerUtil.lookupOpener("afserial:changemode", 
                    [entity:selectedEntity, saveHandler: { listHandler.reload(); }] 
                );
            }
            
            
            def doExport(){
                return InvokerUtil.lookupOpener('afcontrol:export', [:])
            }
            
            def doImport(){
                return InvokerUtil.lookupOpener('afcontrol:import', [:])
            }
            
            def listHandler = [
                getColumnList: { 
                    return [
                        [name:'startseries', caption:'Start Series'],
                        [name:'endseries', caption:'End Series'],
                        [name:'stub', caption:'Stub No'],
                        [name:'active', caption:'Active', type:'checkbox', checkedValue:1, uncheckedValue:0],
                        [name:'txnmode', caption:'Mode'],
                        [name:'open', caption:'Open', type:'checkbox', checkedValue:1, uncheckedValue:0],
                        [name:'assignee.name', caption:'Assignee'],
                    ];    
                },
                fetchList: { o->
                    if(!entity.formno) return [];
                    list = svc.getCollectorOpenIssuanceList( entity );
                    return list;
                }
            ] as BasicListModel;
            
            
        }      
       ]]>
   </code>
   
   <pages>
       <page name="queryform" template="com.rameses.gov.treasury.af.CollectorAFControlQuery"/>
   </pages>
   
</workunit>