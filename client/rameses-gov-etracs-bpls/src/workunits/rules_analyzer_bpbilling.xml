<workunit>
    <invokers>
       <invoker type="bpassessment:analyzer:formActions" caption="Billing" action="init"/>
       <invoker type="formActions" caption="Back" action="_close" immediate="true"/>
    </invokers>
    <code>
        <![CDATA[
            import com.rameses.rcp.common.*
            import com.rameses.rcp.annotations.*
            import com.rameses.osiris2.client.*
            import com.rameses.osiris2.common.*
            import com.rameses.rulemgmt.constraint.*;
            import com.rameses.rulemgmt.*;
            import java.rmi.server.*;
            import com.rameses.gov.etracs.bpls.*;
            
            class BPBillingAnalyzerController  {
            
                @Service("BPBillingRuleService")
                def billSvc;
                
                @Binding
                def binding;
                
                String title = "BP Billing Simulator";
                
                def entity;    
                def query = [partialpmt:0];
                
                def qtrs = (1..4);
                def payOptions = LOV.BP_PAYOPTIONS*.key ;
                def result = [:];
                
                def validUntil;
                def taxcredit = 0;
                
                def taxfees;
                
                void init() {
                    if( !entity.taxfees )
                        throw new Exception("Please run first tax fee calculation" );
                    def d = new java.text.SimpleDateFormat("yyyy-MM-dd");
                    query.billdate = d.format(new Date());
                    taxfees = entity.taxfees;
                    taxfees.each {
                        if(!it.amtpaid) it.amtpaid = 0;
                    }
                }
                
                void runBilling() {
                    query.application = entity;
                    
                    def poption = [:];
                    poption.type = query.payoption;
                    poption.qtr = query.qtr;
                    poption.partialpayment = query.partialpmt;
                    
                    def list = [];
                    entity.taxfees.each { z->
                        def m = [:];
                        m.putAll( z );
                        if(z.lob?.objid) {
                            m.lob = entity.lobs.find{ z.lob.objid == it.lobid }
			}
                        m.application = [objid:'APP', appyear:entity.appyear, apptype: entity.apptype];
                        list << m;
                    }
                    query.list = list;
                    
                    result = billSvc.getBillItems( query.list, query.billdate, poption );
                    
                    result.items.each {
                        it.balancedue = it.total;
                    }
                    validUntil = result.validUntil;
                    taxcredit = result.taxcredit;
                    listModel.reload();
                    binding.refresh("result.*|validUntil|taxcredit");
                }
                
                //billing
                def listModel = [
                    fetchList: { o->
                        return result.items;
                    }
                ] as BasicListModel;
                
                void resetAll() {
                    result = [ items: []];
                    taxfees.each {
                        it.amtpaid = 0;
                    }
                    validUntil = null;
                    taxcredit = 0;
                    listModel.reload();
                    binding.refresh();
                }
                
                
            }
        ]]>    
    </code>
    <pages>
        <page template="com.rameses.gov.etracs.rules.bpls.BPBillingAnalyzerPage"/>
       
    </pages>
</workunit>
