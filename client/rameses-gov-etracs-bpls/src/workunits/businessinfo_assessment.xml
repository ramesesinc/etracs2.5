<workunit>
    
    <invokers>
        <invoker type="business:info" caption="Business Assessment" index="30" action="init" 
            visibleWhen="#{entity.application!=null}" role="ASSESSOR,APPROVER"/>
        
        <invoker type="formActions" caption="Update LOB" index="30" action="updateLOB" visibleWhen="#{entity.state.matches('assessment|approval')}"/>
        <invoker type="formActions" caption="Update Info" index="30" action="updateAssessmentInfo" visibleWhen="#{entity.state.matches('assessment|approval')}"/>
        <invoker type="formActions" caption="Calculate Taxes/Fees" index="30" action="calculateTaxfee" visibleWhen="#{entity.state.matches('assessment|approval')}"/>
    </invokers>
    
    <code>
        <![CDATA[    
        import com.rameses.rcp.annotations.*
        import com.rameses.rcp.common.*
        import com.rameses.osiris2.client.*
        import com.rameses.osiris2.common.*
        import java.rmi.server.*;
        import com.rameses.gov.etracs.bpls.application.*;
        
        class BusinessInfoAssessmentController {
        
            @Binding
            def binding;
            
            @Service("BPAssessmentRuleService")
            def assessmentRuleSvc;

            @Service("BPApplicationService")
            def appSvc;
            
            String title = "Business Assessment";
            String entityName = "businessinfo:assessment";
            
            def lobUpdated;
            def entity;
            boolean dirty;
            
            void init() {
                entity = entity.application;
                if(!entity.taxfees) entity.taxfees = [];
            }
            
            def updateLOB() {
                return InvokerUtil.lookupOpener("bpapplicationinfo:updatelob", [entity:entity,
                    handler:{ lobs->
                        entity.lobs = lobs;
                        lobUpdated = true;
                        entity.taxfees.clear();
                        lobModel.reload();
                        taxfeeModel.reload();
                    }
                ]);
            }

            def updateAssessmentInfo() {
                return InvokerUtil.lookupOpener( "bpapplicationinfo:edit", [
                    entity: entity, 
                    initial: 'info',
                    service: assessmentRuleSvc,
                    initialInfos: entity.appinfos.collect{it},
                    existingInfos: entity.assessmentinfos,
                    title: 'Assessment Information for ' + (entity.appyear?entity.appyear:' Current Year'),
                    handler:{ result ->
                        entity.assessmentinfos = result.infos.findAll{ it.infotype == 'assessment' };
                        entity.requirements = result.requirements;
                        entity.taxfees.clear();
                        assessmentInfoModel.reload();
                        taxfeeModel.reload();
                        lobUpdated = false;
                        dirty = true;
                    }
                ]);
            }

             void calculateTaxfee() {
                if( !entity.lobs )
                    throw new Exception("Please indicate at least one line of business");
                if(lobUpdated) 
                    throw new Exception("Line of business was updated. Please run 'Update Info' again" );
             
                if(entity.taxfees==null) entity.taxfees = [];
                entity.taxfees.clear();
                def unedited = entity.assessmentinfos.findAll{ it.value == null };
                if( unedited ) 
                    throw new Exception("Some info(s) are not filled up. Please complete" ); 
                def result = appSvc.assess(entity);  
                entity.taxfees = result.taxfees;
                entity.total_tax = result.totals.total_tax;
                entity.total_regfee = result.totals.total_regfee;
                entity.total_othercharge = result.totals.total_othercharge;
                entity.total = result.totals.total;
                taxfeeModel.reload();
                binding.refresh("entity.total.*");
             }
          
            def lobModel = [
                fetchList: { o->    
                    return  entity.lobs;
                }
            ] as BasicListModel;
             
            def assessmentInfoModel = [
                fetchList: { o->    
                    return  entity.assessmentinfos;
                }
            ] as BasicListModel;
            
            def taxfeeModel = [
                fetchList: { o->    
                    return  entity.taxfees;
                }
            ] as BasicListModel;
            
        }
        ]]>
        
    </code>
    
    <pages>
        <page template="com.rameses.gov.etracs.bpls.business.AssessmentPage"/>
    </pages>

</workunit>