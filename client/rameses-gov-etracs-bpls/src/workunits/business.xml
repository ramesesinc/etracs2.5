<workunit>
    <invokers>
        <invoker type="business:open" caption="Business Info" action="open" target="window" />
        <invoker type="business:barcode:51005" caption="Business" action="startOpenByBIN" target="window" />
        <invoker type="global:barcode:51005" caption="Business" action="startOpenByBIN" target="window" />

        <invoker type="formActions" caption="Close"  action="_close" />
        <invoker type="extActions" caption="Issue Permit" target="popup" name="issuePermit" visibleWhen="#{entity.state=='ACTIVE'}"/>        

    </invokers>
    
    
    <code>
        <![CDATA[    
        import com.rameses.rcp.annotations.*
        import com.rameses.rcp.common.*
        import com.rameses.osiris2.client.*
        import com.rameses.osiris2.common.*
        import com.rameses.common.*;
        import java.rmi.server.*
        import com.rameses.gov.etracs.bpls.business.*;
        
        class  BusinessInfoController extends PageFlowController {
        
            @Service("BusinessInfoService")
            def service;
            
            @Service("BPApplicationService")
            def appSvc;
            
            @FormId
            def formId
            
            @FormTitle
            def formTitle
            
            @Binding
            def binding;
            
            String title;
            def entityName = "businessform";
            def entity;
            def orgTypes = LOV.ORG_TYPES;
            
            def sections;
            def currentSection;
            def barcodeid;
            def startstep;
            boolean dirty;
            
             //used by barcode
            def startOpenByBIN() {
                entity = service.findByBIN([bin:barcodeid]);
                return open();
            }
            
            void loadSections() {
                sections = InvokerUtil.lookupOpeners( "business:info", [entity: entity ] ).findAll {
                    def vw = it.properties.visibleWhen;
                    return  ((!vw)  ||  ExpressionResolver.getInstance().evalBoolean( vw, [entity:entity] ));
                }
                if( sections.size()>0 ) {
                    currentSection = sections[0];
                }    
            }
            
            def open() {
                entity = service.open(entity);
                if( entity.application && entity.application.state!='release' ) {
                    startstep = entity.application?.state;
                }
                else {
                    startstep = entity.state?.toLowerCase();
                }
                entity.orgtypename = orgTypes.find{ it.key == entity.orgtype}?.value;
                formId = entity.bin;
                formTitle = entity.bin;
                title = entity.businessname + ((entity.bin)? ' ['+entity.bin+']' : '');
                loadSections();
                return super.start();
            }
            
            void submitForAssessment() {
                if(!entity.application.appinfos) 
                    throw new Exception("Please specify at least one info for business");
                entity.application = appSvc.submitForAssessment(entity.application); 
                loadSections();
            }
            
            void submitForApproval() {
                if(!entity.application.taxfees) {
                    throw new Exception("Please specify at least one tax fee" );
                }  
                entity.application = appSvc.submitForApproval(entity.application);
                loadSections();
            }
            
            void approve() {
                if(!entity.application.taxfees) {
                    throw new Exception("Please specify at least one tax fee" );
                }  
                entity.application = appSvc.approveApplication(entity.application);
                loadSections();
            }

            void returnForInfo() {
                entity.application = appSvc.returnForInfo(entity.application);
                loadSections();
            }
    
            void returnForAssessment() {
                entity.application = appSvc.returnForAssessment(entity.application);
                loadSections();
            }

            def issuePermit() {
                if( !entity.application ) {
                    throw new Exception("There must be an associated application");
                }
                def permit = service.issuePermit( entity );
                MsgBox.alert("Permit No " + permit.permitno + "-"+ permit.version + " is created");    
                entity.permit = permit;
                return InvokerUtil.lookupOpener("businesspermit:print", [entity: entity] );
            }
            
                     
             def validateClose() {
                if(dirty) {
                    if( !MsgBox.confirm("Record is not saved. Proceed?") ) {
                        throw new com.rameses.util.BreakException();
                    }
                }    
             }
            
        }
        ]]>
    </code>
    
    <pageflow>
        <start>
            <transition to="#{startstep}" />
        </start>
        
       <page name="info" title="Business Application (For Info)">
            <transition to="end" caption="Close" action="validateClose"/>
            <transition to="assessment" caption="Submit for Assessment"
                confirm="You are about to submit this application for assessment. Proceed?"
                action="submitForAssessment" role="BUSINESSINFO"/>
        </page>    
        
        <page name="assessment" title="Business Application (For Assessment)">
            <transition to="end" caption="Close" action="validateClose"/>
            <transition to="info" caption="Return For Info" 
                confirm="You are about to return this application for info. Proceed?"
                mnemonic="R" action="returnForInfo" role="ASSESSOR"/>
            <transition to="approval" caption="Submit for Approval" 
                confirm="You are about to submit this application for approval. Proceed?"
                name="next" mnemonic="S" action="submitForApproval" role="ASSESSOR"/>
        </page>    
        
        <page name="approval" title="Business Application (For Approval)">
            <transition to="end" caption="Close" action="validateClose"/>
            <transition to="assessment" caption="Return to Assessment" mnemonic="R" action="returnForAssessment" 
                confirm="You are about to return this for assessment. Proceed?" role="APPROVER"/>
            <transition to="payment" caption="Approve" mnemonic="S" action="approve" 
                confirm="You are about to approve this for payment. Proceed?" role="APPROVER"/>
        </page>
        
        <page name="payment" title="Business Application (For Payment)">
            <transition to="end" caption="Close" />
        </page>
        
        <page name="active" title="Active">
            <transition to="end" caption="Close" />
        </page>
        
        <page name="captured" title="Captured">
            <transition to="end" caption="Close" />
        </page>
        
        <end/>
    </pageflow>
    
    <pages>
        <page name="info" template="com.rameses.gov.etracs.bpls.business.BusinessInfoPage"/>
        <page name="assessment" template="com.rameses.gov.etracs.bpls.business.BusinessInfoPage"/>
        <page name="approval" template="com.rameses.gov.etracs.bpls.business.BusinessInfoPage"/>
        <page name="payment" template="com.rameses.gov.etracs.bpls.business.BusinessInfoPage"/>
        <page name="release" template="com.rameses.gov.etracs.bpls.business.BusinessInfoPage"/>
        <page name="active" template="com.rameses.gov.etracs.bpls.business.BusinessInfoPage"/>
        <page name="captured" template="com.rameses.gov.etracs.bpls.business.BusinessInfoPage"/>
    </pages>
    
</workunit>