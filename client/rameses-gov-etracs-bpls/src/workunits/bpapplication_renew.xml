<workunit>
    <invokers>
        <invoker type="home.action" caption="Renew Business Application"  action="start" target="window"  role="BUSINESSINFO" index="52"/>
        <!--
        <invoker type="extActions" caption="Continue" action="continueOpen"  visibleWhen="#{state == 'save-success'}"/>
        <invoker type="extActions" caption="Print BIN" action="printBIN"  visibleWhen="#{state == 'save-success'}"/>
        -->
    </invokers>
    
    <code>
         <![CDATA[    
        import com.rameses.rcp.annotations.*
        import com.rameses.rcp.common.*
        import com.rameses.osiris2.client.*
        import com.rameses.osiris2.common.*
        import java.rmi.server.*;
        import com.rameses.gov.etracs.bpls.application.*;
        
        public class RenewBPApplication extends AbstractSearchBusiness {

            boolean hasLookup;
            boolean lobUpdated;
            def selectedLob;
            
            boolean ADD_LOB = true;
            boolean REMOVE_LOB = true;
            boolean RETIRE_LOB = true;
            
            String appType = "RENEW";
            
            void init() {
                super.init();
                if(entity) {
                    appInfoModel.reload();
                    lobModel.reload();
                    assessmentInfoModel.reload();   
                    entity = null;
                }
                searchListModel.reload();
            }
            
            def openApplication() {
                entity = super.openApplication();
                appInfoModel.reload();
                lobModel.reload();
                assessmentInfoModel.reload(); 
                return entity;
            }
            
            def getAddLob() {
                return InvokerUtil.lookupOpener( "lob:lookup", [
                    onselect: { o->
                        if(entity.lobs.find{ it.lobid == o.objid }!=null) 
                            throw new Exception("Item already added");
                        def m = [:];
                        m.objid = "BPLOB"+new UID();
                        m.lobid = o.objid;
                        m.name = o.name;
                        m.classification = o.classification;
                        m.assessmenttype = "NEW";
                        entity.lobs << m; 
                        lobModel.reload();
                        lobUpdated = true;
                        binding.focus("lob");
                    }
                ]);
            }
            
            void removeLob() {
                if(!selectedLob) return;
                if(selectedLob.assessmenttype != "NEW" ) 
                    throw new Exception("Only new lines of business can be removed");
                entity.lobs.remove(selectedLob);
                lobUpdated = true;
            }

            void retireLOB() {
                if(!selectedLob) return;
                if(selectedLob.assessmenttype != "RENEW" ) 
                    throw new Exception("Only renew lines of business can be retired");
                selectedLob.assessmenttype = 'RETIRE'    
                lobUpdated = true;
            }

            void unretireLOB() {
                if(!selectedLob) return;
                if(selectedLob.assessmenttype != "RETIRE" && selectedLob.assessmenttype != "RETIRED" ) 
                    throw new Exception("Only retired lines of business can be unretired");
                selectedLob.assessmenttype = 'RENEW'    
                lobUpdated = true;
            }
            
            def reclassifyLOB() {
                if(!selectedLob) return;
                if(selectedLob.assessmenttype != "RENEW") 
                    throw new Exception("Only renew lines of business can be reclassified");
                return InvokerUtil.lookupOpener( "lob:lookup", [
                    onselect: { o->
                        selectedLob.lobid = o.objid;
                        selectedLob.name = o.name;
                        selectedLob.classification = o.classification;
                        lobModel.reload();
                        lobUpdated = true;
                        binding.focus("lob");
                    }
                ]);    
            }
             
            def appInfoModel = [
                fetchList: { o-> 
                    return entity.appinfos; 
                }
            ] as BasicListModel;

             def lobModel = [
                fetchList: { o->
                    return entity.lobs;
                },
            ] as BasicListModel;
            
            def assessmentInfoModel = [
                fetchList: { o-> 
                    return entity.assessmentinfos; 
                }
            ] as BasicListModel;
            
            def requirementModel = [
                fetchList: { o-> 
                    return entity.requirements; 
                }
            ] as BasicListModel;

            def verifyAppInfo() {
                if(!entity.appinfos) 
                    throw new Exception("Please specify at least one info for business");
            }

            def verifyLOB() {
                if(!entity.lobs) 
                    throw new Exception("Please specify at least one line of business");
                if(!entity.lobs.findAll{it.assessmenttype=='RENEW' || it.assessmenttype=='NEW'}) 
                    throw new Exception("There must be at least one new or renew line of business");
            }

            def verifyAssessmentInfo() {
                if(!entity.assessmentinfos) 
                    throw new Exception("Please specify at least one assessment information");
                if(lobUpdated)
                    throw new Exception("Please run update assessment info again. Line of Business was updated.");
            }
         
            def updateAppInfo() {
                return InvokerUtil.lookupOpener( "bpinfoedit:app", [
                    entity: entity,
                    existingInfos: entity.appinfos,
                    handler:{ result ->
                        entity.appinfos = result.infos;
                        appInfoModel.reload();
                    }
                ]);
            }
            
            def updateAssessmentInfo() {
                return InvokerUtil.lookupOpener( "bpinfoedit:assessment", [
                    entity: entity, 
                    initialInfos: entity.appinfos.collect{it},
                    existingInfos: entity.assessmentinfos,
                    handler:{ result ->
                        entity.assessmentinfos = result.infos.findAll{ it.infotype == 'assessment' };
                        assessmentInfoModel.reload();
                        entity.requirements = result.requirements.collect{ [type:it.refid, title:it.title ] };
                        requirementModel.reload();
                        lobUpdated = false;
                    }
                ]);
            }
           
            void saveCreate() {
                entity = appSvc.create( entity );
            }
            
            def selectedRequirement;
            def editRequirement() {
                if(!selectedRequirement) return;
                return InvokerUtil.lookupOpener( "bpapplication:requirement", [
                    info:selectedRequirement,
                    handler: { o->
                        selectedRequirement.putAll( o );
                    }
                ]);
            }
            
        }
        ]]>
    </code>    
    
    <pageflow>
        <start>
            <transition to="search" name="create" action="init"/>
            <transition to="edit-address" name="open"/>
        </start>
        
        <page name="search" title="Search Business Name (For Renewal)">
            <transition to="edit-address" caption="Next" name="next" mnemonic="N" immediate="false" action="openApplication"/>
        </page>
        
        <!--  -->
        <page name="edit-address" title="Edit Address (For Renewal)">
            <transition to="search" caption="Back" mnemonic="B" name="back" visibleWhen="#{OPENED_FROM_APP==false}"/>
            <transition to="update-app-info" caption="Next" name="next" mnemonic="N" />
        </page>
        
        <page name="update-app-info" title="Specify Business Information (For Renewal)">
            <transition to="edit-address" caption="Back" mnemonic="B" name="back" />
            <transition to="update-lob" caption="Next" name="next" mnemonic="N" action="verifyAppInfo"/>
        </page>
        
        <page name="update-lob" title="Specify Line of Business (For Renewal)">
            <transition to="update-app-info" caption="Back" mnemonic="B" name="back"/>
            <transition to="confirm" caption="Next" name="next" mnemonic="N"  action="verifyLOB"/>
        </page>

        <page name="update-assessment-info" title="Specify Assessment Information (For Renewal)" >
            <transition to="update-lob" caption="Back" mnemonic="B" name="back"/>
            <transition to="confirm" caption="Next" name="next" mnemonic="N" action="verifyAssessmentInfo"/>
        </page>
        
        <page name="confirm" title="Confirm (For Renewal)">
            <transition to="update-lob" caption="Back" mnemonic="B" name="back"/>
            <transition to="save-success" caption="Submit" mnemonic="S" name="save" action="saveCreate"
            confirm="You are about to save this transaction. Continue?"/>
        </page>
        
        <page name="save-success" title="Save Success (New Application)">
            <transition to="search" caption="Add Another" mnemonic="A" action="init"/>
        </page>

        <end/>
    </pageflow>
    
    <pages>
        <page name="search" template="com.rameses.gov.etracs.bpls.application.SearchLookupBusinessPage"/>
        <page name="edit-address" template="com.rameses.gov.etracs.bpls.application.EditBusinessInfo"/>
        <page name="update-app-info" template="com.rameses.gov.etracs.bpls.application.UpdateAppInfoPage"/>
        <page name="update-lob" template="com.rameses.gov.etracs.bpls.application.SpecifyLOBPage"/>
        <page name="update-assessment-info" template="com.rameses.gov.etracs.bpls.application.UpdateAssessmentInfoPage"/>
        <page name="confirm" template="com.rameses.gov.etracs.bpls.application.ConfirmApplicationPage"/>
        <page name="save-success" template="com.rameses.gov.etracs.bpls.application.SuccessPage"/>
    </pages>
    
    
</workunit>