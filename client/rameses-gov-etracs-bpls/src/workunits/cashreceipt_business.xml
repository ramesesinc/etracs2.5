<workunit extends="wtemplates/gov/treasury/BasicCashReceiptController.xml">
    <invokers>
        <invoker type="cashreceipt:bpls" action="init" />
        <invoker type="cashreceipt:barcode:51005" action="initBarcode" />
    </invokers>
    
    <code>
        <![CDATA[    
        import com.rameses.rcp.annotations.*
        import com.rameses.rcp.common.*
        import com.rameses.osiris2.client.*
        import com.rameses.osiris2.common.*
        import com.rameses.enterprise.treasury.cashreceipt.*
        
        class  BusinessCashReceiptController extends BasicCashReceipt {
            
            @Service("CashReceiptService")
            def cashReceiptSvc;
        
            @Service("BusinessCashReceiptService")
            def billSvc;
            
            @Service("BPApplicationLookupService")
            def appLookup;
        
            String entityName = "cashreceipt:business";
            
            def query = [:]
            
            def qtrs = (1..4);
            def payOptions = LOV.BP_PAYOPTIONS*.key;
                
            def total_tax = 0;
            def total_regfee = 0;
            def total_othercharge = 0;
            def total_amtdue = 0;
            
            def barcodeid;
            boolean barcode = false;
            
            void initBarcode() {
                def param = [prefix: "51005", barcode: barcodeid ]; 
            
                def m = appLookup.findByBarcode( param );
                entity = [formtype: "serial", formno:"51", txnmode: 'ONLINE'];
                entity = cashReceiptSvc.init( entity );
                entity.payer = [objid: m.permitee.objid, name: m.permitee.name];
                entity.paidby = m.tradename;
                entity.paidbyaddress = m.businessaddress;
                entity.tradename = m.tradename;
                entity.applicationid = m.applicationid;
                entity.businessid = m.businessid;
                entity.collectiontype = m.collectiontype;
                entity.billitems = [];
                entity.items = [];
                query.payoption = payOptions[0];
                barcode = true;
                
                super.init();
                runBilling();
            }
            
            @PropertyChangeListener
            def listener = [
                "query.payoption":{ o->clearBilling();},
                "query.qtr":{ o->clearBilling();}
            ]
            
            void clearBilling() {
                entity.billitems?.clear();
                entity.items.clear();
                total_tax = 0;
                total_regfee = 0;
                total_othercharge = 0;
                total_amtdue = 0;
                binding.refresh("total.*");
                entity.amount = 0;
                billingListModel.reload();
            }
            
            public def payerChanged( permitee ) {
                entity.tradename = null;
                entity.applicationid = null;
                entity.businessid = null;
                entity.paidby = null;
                entity.paidbyaddress = null;
                query.payoption = payOptions[0];
                binding.refresh( "entity.(tradename|paidby.*)" );
                clearBilling();
                super.clearAllPayments();
                super.updateBalances();
                def opener = InvokerUtil.lookupOpener( "bpapplication:lookup", [
                    "query.permiteeid":permitee.objid,
                    "query.state": "PAYMENT",
                    onselect: { o->
                        entity.applicationid = o.applicationid;
                        entity.tradename = o.tradename;
                        entity.businessid = o.businessid;
                        entity.paidby = o.tradename;
                        entity.paidbyaddress = o.businessaddress;
                        entity.billitems = [];
                        entity.items = [];
                        query.payoption = payOptions[0];
                        runBilling();
                    }
                ]);
                opener.async = true;
                return opener;
            }
            
            
            void runBilling() {
                def m = [:];
                m.qtr = query.qtr;
                m.applicationid = entity.applicationid;
                m.businessid = entity.businessid;
                m.payoption = query.payoption;
                m.billdate = entity.receiptdate;
                
                def result = billSvc.getBilling( m );
                if(result.billitems.size()==0)
                    throw new Exception("No open items for payment found for the criteria specified" );
                entity.billitems = result.billitems;
                billingListModel.reload();
                //fix the receipt items
                entity.payoption = query.payoption;
                entity.qtr = query.qtr;
                entity.items.clear();
                entity.items.addAll( result.receiptitems );
                entity.amount = 0;
                if(entity.items) {
                    entity.amount = entity.items.sum{ it.amount };
                }
                total_tax = result.total_tax;
                total_regfee = result.total_regfee;
                total_othercharge = result.total_othercharge;
                total_amtdue = result.total_amtdue;
                if(binding) {
                    binding.refresh("total.*|query.*|entity.paidby.*|entity.paidby");
                }
                super.updateBalances();
            }
            
            def billingListModel = [
                fetchList: { o->
                    return entity.billitems;
                }
            ] as BasicListModel;
            
        }
        ]]>
        
    </code>
    
    <pages>
        <page template="com.rameses.gov.etracs.bpls.cashreceipt.BPLSCashReceipt"/>
    </pages>
    
</workunit>