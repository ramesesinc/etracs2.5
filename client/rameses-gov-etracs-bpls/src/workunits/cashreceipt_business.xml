<workunit extends="wtemplates/gov/treasury/BasicCashReceiptController.xml">
    <invokers>
        <invoker type="cashreceipt:bpls" action="init" />
        <invoker type="cashreceipt:barcode:51005" action="initBarcode" />
    </invokers>
    
    <code>
        <![CDATA[    
        import com.rameses.rcp.annotations.*
        import com.rameses.rcp.common.*
        import com.rameses.osiris2.client.*
        import com.rameses.osiris2.common.*
        import com.rameses.enterprise.treasury.cashreceipt.*
        
        class  BusinessCashReceiptController extends BasicCashReceipt {
            
            @Service("CashReceiptService")
            def cashReceiptSvc;
        
            @Service("BPCashReceiptService")
            def billSvc;
            
            @Service("BusinessLookupService")
            def busLookup;
        
            //we specify this so print detail will appear.
            String entityName = "misc_cashreceipt";
            
            def query = [:]
            
            def qtrs = (1..4);
            def payOptions = LOV.BP_PAYOPTIONS*.key + ["PARTIAL"];
                
            def prevbalance = 0;
            def total_q1 = 0;
            def total_q2 = 0;
            def total_q3 = 0;
            def total_q4 = 0;
            def total = 0;
            def partialpmt = 0;
            
            //indicate full amount for each qtr. this is used to determine 
            //which quarter was fully paid. This is run during the first load.
            def qtr_due_totals;
            
            def barcodeid;
            boolean barcode = false;
            def appList;
            
            void initBarcode() {
                def param = [prefix: "51005", barcode: barcodeid ]; 
                def m = billSvc.findByBarcode( param );
                entity = [formtype: "serial", formno:"51", txnmode: 'ONLINE'];
                entity = cashReceiptSvc.init( entity );
                entity.payer = [objid: m.owner.objid, name: m.owner.name];
                entity.paidby = m.businessname;
                entity.paidbyaddress = m.businessaddress;
                entity.businessname = m.businessname;
                entity.applicationid = m.applicationid;
                entity.businessid = m.businessid;
                entity.collectiontype = m.collectiontype;
                entity.billitems = [];
                entity.items = [];
                query.payoption = payOptions[0];
                barcode = true;
                super.init();
                appList = null;
                query.appno = null;
                runBilling();
            }
            
            @PropertyChangeListener
            def listener = [
                "query.payoption":{ o->clearBilling();},
                "query.qtr":{ o->clearBilling();}
            ]
            
            public void validateBeforePost() {
               //proceed.
            }
            
            void clearBilling() {
                entity.billitems?.clear();
                entity.items.clear();
                total_q1 = 0;
                total_q2 = 0;
                total_q3 = 0;
                total_q4 = 0;
                total = 0;
                entity.qtr = 0;
                partialpmt = 0;
                binding.refresh("total.*|entity.qtr|partialpmt");
                entity.amount = 0;
                billingListModel.reload();
                super.updateBalances();
            }
            
            public def payerChanged( owner ) {
                entity.businessname = null;
                entity.applicationid = null;
                entity.businessid = null;
                entity.paidby = null;
                entity.paidbyaddress = null;
                query.payoption = payOptions[0];
                binding.refresh( "entity.(businessname|paidby.*)" );
                clearBilling();
                super.clearAllPayments();
                super.updateBalances();
                appList = null;
                query.appno = null;
                def opener = InvokerUtil.lookupOpener( "business:lookup", [
                    "query.ownerid":owner.objid,
                    "query.zstate": "payment",
                    onselect: { o->
                        entity.applicationid = o.applicationid;
                        entity.businessname = o.businessname;
                        entity.businessid = o.objid;
                        entity.paidby = o.businessname;
                        entity.paidbyaddress = o.businessaddress;
                        entity.billitems = [];
                        entity.items = [];
                        query.payoption = payOptions[0];
                        
                        //null this only at this point
                        qtr_due_totals = null;   
                        binding.refresh("total.*|query.*|entity.paidby.*|entity.paidby|entity.qtr");
                        runBilling();
                    }
                ]);
                opener.async = true;
                return opener;
            }
            
            void runBilling() {
                if(query.payoption=="PARTIAL" && partialpmt <= 0 ) {
                    throw new Exception("Please specify partial amount for partial payment option");
                }
                def m = [:];
                m.qtr = query.qtr;
                m.applicationid = entity.applicationid;
                m.businessid = entity.businessid;
                m.payoption = query.payoption;
                m.billdate = entity.receiptdate;
                m.partialpmt = partialpmt;
                
                def result = billSvc.getBilling( m );
                if(result.billitems.size()==0)
                    throw new Exception("No open items for payment found for the criteria specified" );
                entity.billitems = result.billitems;
                billingListModel.reload();
                //fix the receipt items
                entity.payoption = query.payoption;
                entity.qtr = query.qtr;
                entity.items.clear();
                entity.items.addAll( result.receiptitems );
                entity.amount = 0;
                if(entity.items) {
                    entity.amount = entity.items.sum{ it.amount };
                }
                total_q1= result.total_q1;
                total_q2 = result.total_q2;
                total_q3 = result.total_q3;
                total_q4 = result.total_q4;
                total = result.total;
                
                //calculate qtr dues. Run only the first time.
                if( !qtr_due_totals ) {
                    qtr_due_totals = [:];
                    qtr_due_totals.q1= result.total_q1;
                    qtr_due_totals.q2 = result.total_q2;
                    qtr_due_totals.q3 = result.total_q3;
                    qtr_due_totals.q4 = result.total_q4;
                }

                //determine which quarter was fully paid and tag in payment.
                entity.qtr = 0;    
                if( total_q4 > 0 && total_q4 == qtr_due_totals.q4 ) entity.qtr = 4;
                else if( total_q3 > 0 && total_q3 == qtr_due_totals.q3 ) entity.qtr = 3;
                else if( total_q2 > 0 && total_q2 == qtr_due_totals.q2 ) entity.qtr = 2;
                else if( total_q1 > 0 && total_q1 == qtr_due_totals.q1 ) entity.qtr = 1;
                
                if(binding) {
                    binding.refresh("total.*|query.*|entity.paidby.*|entity.paidby|entity.qtr");
                }
                super.updateBalances();
                if(!appList) {
                    appList = entity.billitems*.application?.appno.unique();
                    if(binding) binding.refresh( "query.appno" );
                }
            }
            
            
            
            def billingListModel = [
                fetchList: { o->
                    return entity.billitems;
                }
            ] as BasicListModel;
            
        }
        ]]>
        
    </code>
    
    <pages>
        <page template="com.rameses.gov.etracs.bpls.cashreceipt.BPLSCashReceipt"/>
    </pages>
    
</workunit>