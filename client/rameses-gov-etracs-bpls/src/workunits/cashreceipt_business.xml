<workunit extends="wtemplates/gov/treasury/BasicCashReceiptController.xml">
    <invokers>
        <invoker type="cashreceipt:bpls" action="init" />
        <invoker type="cashreceipt:barcode:51005" action="initBarcode" />
    </invokers>
    
    <code>
        <![CDATA[    
        import com.rameses.rcp.annotations.*
        import com.rameses.rcp.common.*
        import com.rameses.osiris2.client.*
        import com.rameses.osiris2.common.*
        import com.rameses.enterprise.treasury.cashreceipt.*
        
        class  BusinessCashReceiptController extends BasicCashReceipt {
            
            @Service("BusinessCashReceiptService")
            def billSvc;
            
            @Service("BusinessLookupService")
            def bizLookup;
        
            String entityName = "cashreceipt:business";
            
            def query = [:]
            
            def qtrs = (1..4);
            def payOptions = LOV.BP_PAYOPTIONS*.key;
                
            def total_tax = 0;
            def total_regfee = 0;
            def total_othercharge = 0;
            def total_amtdue = 0;
            
            def barcodeid;
            
            void initBarcode() {
                def m = bizLookup.findBusiness( barcodeid );
            }
            
            @PropertyChangeListener
            def listener = [
                "query.payoption":{ o->clearBilling();},
                "query.qtr":{ o->clearBilling();}
            ]
            
            void clearBilling() {
                entity.billitems?.clear();
                entity.items.clear();
                total_tax = 0;
                total_regfee = 0;
                total_othercharge = 0;
                total_amtdue = 0;
                binding.refresh("total.*");
                entity.amount = 0;
                billingListModel.reload();
            }
            
            public void payerChanged( o ) {
                entity.tradename = null;
                entity.applicationid = null;
                entity.businessid = null;
                binding.refresh( "entity.tradename" );
                clearBilling();
                super.clearAllPayments();
                super.updateBalances();
            }
            
            def getLookupBusiness() {
                if(!entity.payer) {
                    return new Exception("Please select a payer first");
                }    
                return InvokerUtil.lookupOpener( "business:lookup", [
                    "query.permiteeid":entity.payer.objid,
                    "query.state": "PAYMENT",
                    onselect: { o->
                        entity.tradename = o.tradename;
                        entity.businessid = o.businessid;
                        entity.billitems = [];
                        entity.items = [];
                        billingListModel.reload();
                    }
                ]);
            }
            
            void runBilling() {
                def m = [:];
                m.qtr = query.qtr;
                m.businessid = entity.businessid;
                m.payoption = query.payoption;
                m.billdate = entity.receiptdate;
                def result = billSvc.getBilling( m );
                if(result.billitems.size()==0)
                    throw new Exception("No open items for payment found for the criteria specified" );
                entity.billitems = result.billitems;
                billingListModel.reload();
                
                //fix the receipt items
                entity.payoption = query.payoption;
                entity.qtr = query.qtr;
                entity.items.clear();
                entity.items.addAll( result.receiptitems );
                entity.amount = 0;
                if(entity.items) {
                    entity.amount = entity.items.sum{ it.amount };
                }
                total_tax = result.total_tax;
                total_regfee = result.total_regfee;
                total_othercharge = result.total_othercharge;
                total_amtdue = result.total_amtdue;
                binding.refresh("total.*");
                super.updateBalances();
            }
            
            def billingListModel = [
                fetchList: { o->
                    return entity.billitems;
                }
            ] as BasicListModel;
            
        }
        ]]>
        
    </code>
    
    <pages>
        <page template="com.rameses.gov.etracs.bpls.cashreceipt.BPLSCashReceipt"/>
    </pages>
    
</workunit>