<workunit extends="wtemplates/RuleMgmtController.xml" serviceName="RuleMgmtService">
    <invokers>
       <invoker type="rulemgmt:formActions" caption="Analyzer"  
            visibleWhen="#{ruleset == 'bpassessment'}" target="window"/>
            
       <invoker type="formActions" caption="Close" action="_close" immediate="true"/>
       <invoker type="formActions" caption="Run" action="run"/>
       <invoker type="formActions" caption="Reset" action="reset" immediate="true"/>
       <invoker type="formActions" caption="Clear Infos" action="clearInfo" immediate="true"/>
    </invokers>
    <code>
        <![CDATA[
            import com.rameses.rcp.common.*
            import com.rameses.rcp.annotations.*
            import com.rameses.osiris2.client.*
            import com.rameses.osiris2.common.*
            import com.rameses.rulemgmt.constraint.*;
            import com.rameses.rulemgmt.*;
            import java.rmi.server.*;
            
            class BPAssessmentAnalyzerController  {
                
                @Service("BPAssessmentService")
                def service;

                def orgTypes = LOV.BUSINESS_ORG_TYPES;
                def officeTypes = LOV.BUSINESS_OFFICE_TYPES;
                def appTypes = LOV.BUSINESS_APP_TYPES;
                def lobTypes = LOV.LOB_APP_TYPES*.key;
                
                def entity = [lobs:[],infos:[],taxfees:[]];
                def formInfos;
                
                String title = "Business Rule Assessment Simulator";
                
                def getLookupLOB() {
                    return InvokerUtil.lookupOpener("lob:lookup",[
                        onselect: { o->
                            if( entity.lobs.find{ it.lobid ==  o.objid }!=null ) {
                                throw new Exception("LOB Item already added");
                            }    
                            o.lobid = o.objid;
                            o.assessmenttype = "NEW";
                            entity.lobs << o;
                            lobModel.reload();
                        }
                    ]);
                }
                
               
                
                def lobModel = [
                    fetchList: { o->return entity.lobs; },
                    onRemoveItem: { o->
                        entity.lobs.remove(o);
                    }
                ] as EditorListModel;
                
                def infoModel = [
                    fetchList: { o-> return entity.infos; }
                ] as BasicListModel;
            
                def taxfeeModel = [
                    fetchList: { o-> return entity.taxfees; }
                ]as BasicListModel;
                
                def opener;
                
                def handler = { infos->
                    entity.infos.addAll(infos);
                    def result = service.execute(entity);
                    if( !result.infos ) {
                        entity.taxfees = result.taxfees;
                        taxfeeModel.reload();
                        infoModel.reload();
                        return "_exit";
                    }
                    else {
                        if(opener==null) {
                            opener = InvokerUtil.lookupOpener( "bpanalyzer:info",
                                [infos:result.infos,lobs:entity.lobs,handler:handler]
                            );
                            return opener;
                        }
                        else {
                            opener.handle.infos = result.infos;
                            opener.handle.lobs = entity.lobs;
                            opener.handle.reload();
                            return null;
                        }
                    }
                }
                
                def run() {
                    handler( [] );
                }
            
                void reset() {
                    opener = null;
                    entity.infos.clear();
                    entity.taxfees.clear();
                    entity.lobs.clear();
                    entity = [:];
                    entity.infos = [];
                    entity.taxfees = [];
                    entity.lobs = [];
                }
                
                void clearInfo() {
                    opener = null;
                    entity.infos.clear();
                    entity.taxfees.clear();
                    infoModel.reload();
                    taxfeeModel.reload();
                }
                
            }
        ]]>    
    </code>
    <pages>
        <page template="com.rameses.gov.etracs.rules.bpls.BPAssessmentAnalyzerPage"/>
    </pages>
</workunit>
