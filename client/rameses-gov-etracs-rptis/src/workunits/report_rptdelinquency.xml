<workunit extends="rpt_wtemplates/ReportController.xml" >
    <invokers>
        <invoker folderid="/explorer/report/landtax" action="init" caption="Realty Tax Delinquency Listing (Old)" target="window" index="101" 
            role="LANDTAX_REPORT"/>
    </invokers>
    <code>

<![CDATA[

import com.rameses.rcp.common.*;
import com.rameses.rcp.annotations.*;
import com.rameses.osiris2.client.*;
import com.rameses.osiris2.reports.*;

class RPTDelinquencyListingOldController extends com.rameses.gov.etracs.rpt.report.ReportController
{
    @Service('RPTReportDelinquencyService') 
    def svc
    
    String title = 'Realty Tax Delinquency Listing';
    
    String reportName = 'com/rameses/gov/etracs/rpt/report/landtax/rptdelinquency.jasper'
    def data 
        
    def getReportData(){
        return svc.generateDelinquencyReport(entity.barangay);
    }
    
    Map getParameters(){
        return [
            TITLE : 'Realty Tax Delinquency Listing for ' + entity.barangay.name,
            BARANGAY : entity.barangay.name,
        ]
    }
    
    
   def formControl = [
        getFormControls: {
            return [
                new FormControl( "combo", [caption:'Barangay', name:'entity.barangay', items:'barangays', required:true, expression:'#{item.name}', preferredSize:'0,21']),
                new FormControl( "checkbox", [caption:'Rebuild Data', name:'entity.rebuild', preferredSize:'0,21']),
            ]    
        },
   ] as FormPanelModel;
   
       
    def preview() {
        if (entity.rebuild ){
            rebuild();
        }
        buildReport()
        mode = 'view'
        return 'preview' 
    }
    
        
    void print(){
        if (entity.rebuild ){
            rebuild();
        }
        buildReport()
        ReportUtil.print( report.report, true )
    }
   
    void rebuild(){
        if ( entity.rebuild == false ) 
            return;
            
        def dt = dtSvc.serverDate;
        
        svc.cleanup(entity.barangay);
        
        def list = svc.getOpenLedgersByBarangay(entity.barangay);
        list.each{
            try{
                svc.buildDelinquency(it, dt);
            }
            catch(e){
                println 'Error Ledger Rebuild ' + e.message;
            }
        }
        
        entity.rebuild = false;
        binding.refresh('entity.rebuild');
    }
   

}
]]>        
        
    </code>
</workunit>