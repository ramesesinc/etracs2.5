<workunit >
    <invokers>
        <invoker folderid="/explorer/report/rpt" action="init" caption="FAAS Batch Report" target="window" index="13" />
        
        <invoker type="formActions" action="_close" caption="Close" mnemonic="c" icon="images/toolbars/cancel.png" immediate="true" visibleWhen="#{mode == 'init'}"/>
        <invoker type="formActions" action="print" caption="Print" mnemonic="p" shortcut="ctrl + P" icon="images/toolbars/print.png" visibleWhen="#{mode == 'init'}"/>
        <invoker type="formActions" action="cancelPrinting" caption="Cancel Printing" icon="images/toolbars/cancel.png" mnemonic="a" shortcut="ctrl + a" visibleWhen="#{mode == 'printing'}" />
    </invokers>
    <code >
    <![CDATA[
       import com.rameses.rcp.common.*;
        import com.rameses.rcp.annotations.*;
        import com.rameses.osiris2.client.*;
        import com.rameses.osiris2.reports.*;
        import com.rameses.rcp.framework.TaskManager;

        class FAASBatchReportController
        {
            @Binding
            def binding

            @Service("ReportParameterService")
            def svcParams

            @Service("FAASReportService")
            def svc

            @Service('FAASService')
            def faasSvc
            

            def lgu;
            def barangays;
            def barangay;
            def section;
            def revisionyear

            def msg 
            def mode 
            def faasTask;
            
            public void init() {
                mode='init';
            }
            
            def lgus
            def getLgus() {
                if(!lgus) lgus = faasSvc.getLgus()
                return lgus
            }

            public void setLgu( def lgu ) {
                this.lgu = lgu;
                barangays = faasSvc.getBarangays([parentid:lgu.objid]);
                binding.refresh();
            }

            def updateMessage = { msg ->
                this.msg = msg
                binding.refresh('msg')
            }

            def onFinish = { msg -> 
                this.msg = msg
                this.mode = 'init';
                binding.refresh();
            }

            def onError = { err ->
                this.mode = 'init';
                binding.refresh();
                MsgBox.err( err );
            }

            def cancelPrinting() {
                faasTask.interrupt = true;
                this.mode = 'init'
                msg = 'Printing of faas has been cancelled.  '
                binding.refresh();
            }

            public void print() {
                mode = 'printing';
                def params = [barangayid: barangay.objid, revisionyear: revisionyear];
                if( section )  {
                    def sectionlen = var.pin_section_length ? var.pin_section_length.toInt() : 2  
                    params.section = section.toString().padLeft(sectionlen, '0')
                }
                faasTask = new FaasBatchTask([
                        updateMessage:updateMessage,
                        onError: onError,
                        onFinish: onFinish, 
                        interrupt: false, 
                        svcParams: svcParams,
                        svc: svc, 
                        faaslist: svc.getFaasIds(params) 
                     ]);
                Thread t = new Thread( faasTask);
                t.start();
            }

        }

        class FaasBatchTask implements Runnable {

            def svcParams
            def svc;

            def faaslist;
            def reportdata;

            def updateMessage;
            def onError;
            def onFinish;
            boolean interrupt 
            
             def reportPath = 'com/rameses/gov/etracs/rpt/report/faas/'

            public void run() {
                try { 
                    while(!interrupt && !faaslist.isEmpty() ) {
                        def o = faaslist.remove(0);
                        reportdata = svc.getReportData( o.objid )

                        report.viewReport()
                        ReportUtil.print( report.report, false) ;

                        updateMessage("Processing TD No. ${o.tdno} "  );
                    }    
                    def msg = "Finished..... " 
                    if(interrupt) 
                        msg = 'Faas printing has been interrupted.    '
                    onFinish(msg );
               } catch(e) {
                    onError( e );
               }
            }

             def report =[
                getReportName : { return getFaasReportName() },
                getSubReports : { return getFaasSubReports() },
                getReportData : { return reportdata },
                getParameters : { svcParams.getStandardParameter(); }
            ] as ReportModel


            def getFaasReportName() {
                def rputype = reportdata.rpu.rputype.toLowerCase()
                if( rputype == 'mach' )
                    return reportPath + 'mach/FAASMach.jasper'
                if( rputype == 'bldg' )
                    return reportPath + 'bldg/FAASBldg.jasper'
                if( rputype == 'misc' )
                    return reportPath + 'misc/FAASMisc.jasper'
                return reportPath + 'land/FAASLand.jasper'
            }

            def getFaasSubReports() {
                def rputype = reportdata.rpu.rputype.toLowerCase()
                
                if( rputype == 'bldg' ) {
                    return [
                        new SubReport( 'BuildingStructure', reportPath + 'bldg/BuildingStructure.jasper'),
                        new SubReport( 'AdditionalItem', reportPath + 'bldg/AdditionalItem.jasper'),
                        new SubReport( 'PropertyAssessment', reportPath + 'bldg/PropertyAssessment.jasper'),
                        new SubReport( 'AnnotationList', reportPath + 'bldg/FAASAnnotationList.jasper'),
                    ] as SubReport[]
                }
                if( rputype == 'mach' ) {
                    return [
                        new SubReport( 'MachDetail', reportPath + 'mach/MachDetail.jasper'),
                        new SubReport( 'PropertyAppraisal', reportPath + 'mach/PropertyAppraisal.jasper'),
                        new SubReport( 'PropertyAssessment', reportPath + 'mach/PropertyAssessment.jasper'),
                        new SubReport( 'AnnotationList', reportPath + 'mach/FAASAnnotationList.jasper'),
                    ] as SubReport[]
                }
                if( rputype == 'misc' ) {
                    return [
                        new SubReport( 'MiscPropertyAppraisal', reportPath + 'misc/MiscPropertyAppraisal.jasper'),
                        new SubReport( 'MiscAdjustment', reportPath + 'misc/MiscAdjustment.jasper'),
                        new SubReport( 'PropertyAssessment', reportPath + 'misc/PropertyAssessment.jasper'),
                        new SubReport( 'AnnotationList', reportPath + 'misc/FAASAnnotationList.jasper'),
                    ] as SubReport[]
                }

                return [
                    new SubReport( 'LandAppraisal', reportPath + 'land/LandAppraisal.jasper'),
                    new SubReport( 'PlantTreesAppraisal', reportPath + 'land/PlantTreesAppraisal.jasper'),
                    new SubReport( 'LandAdjustment', reportPath + 'land/LandAdjustment.jasper'),
                    new SubReport( 'PropertyAssessment', reportPath + 'land/PropertyAssessment.jasper'),
                    new SubReport( 'AnnotationList', reportPath + 'land/FAASAnnotationList.jasper'),
                ] as SubReport[]
            }

        }
        
    ]]>    
    </code>
     <pages>
        <page  template="com.rameses.gov.etracs.rpt.report.FAASBatchReportPage" />
    </pages>
</workunit>