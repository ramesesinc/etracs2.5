<workunit>
    <invokers>
        <invoker type="rptledger:capture" caption="Capture Realty Tax Payment" action="create" target="popup" />        
    </invokers>
    
    <code lang="groovy">
        <![CDATA[
        
import com.rameses.rcp.common.*
import com.rameses.rcp.annotations.*
import com.rameses.osiris2.client.*
import com.rameses.osiris2.reports.*
import java.rmi.server.UID;



public class RPTLedgerCapturePmtController  {
    
    @Binding
    def binding

    //handlers
    def onadd
    
    def ledger 
    def payment
    
    @PropertyChangeListener
    def listener = [
        'payment.basic'     : { copyTaxAmount('basic', 'sef') },
        'payment.basicint'  : { copyTaxAmount('basicint', 'sefint') },
        'payment.basicdisc' : { copyTaxAmount('basicdisc', 'sefdisc') },
    ]
    
    void copyTaxAmount(from, to){
        if (payment."$to" == 0.0){
            payment."$to" = payment."$from"
            binding.refresh("payment.$to")
        }
    }
    
    void create() {
        def fromyear = ( ledger.lastqtrpaid == 4 ? ledger.lastyearpaid + 1 : ledger.lastyearpaid )
        def fromqtr  = ( ledger.lastqtrpaid == 4 ? 1 : ledger.lastqtrpaid + 1 )
        payment = [
            objid       : 'RP' + new UID(),
            rptledgerid : ledger.objid,
            fromyear    : fromyear, 
            fromqtr     : fromqtr, 
            toyear      : fromyear,
            toqtr       : 4,
            basic       : 0.0,
            basicint    : 0.0,
            basicdisc   : 0.0,
            basicpartial: 0.0,
            sef         : 0.0,
            sefint      : 0.0,
            sefdisc     : 0.0,
            sefpartial  : 0.0,
            firecode    : 0.0,
            amount      : 0.0,
            paidby      : [address:'ILIGAN CITY'],
        ]
    }
    
    def ok() {
        if( payment.toyear < payment.fromyear ) throw new Exception('To Year must be greater than or equal to from year.') 
        if( payment.toyear == payment.fromyear && payment.toqtr < payment.fromqtr ) throw new Exception('To Qtr must be greater than or equal to from qtr.') 
        checkNegative( 'Basic', payment.basic )
        checkNegative( 'Basic Discount', payment.basicdisc )
        checkNegative( 'Basic Penalty', payment.basicint )
        checkNegative( 'SEF', payment.sef )
        checkNegative( 'SEF Discount', payment.sefdisc )
        checkNegative( 'SEF Penalty', payment.sefint )
        checkNegative( 'Fire Code', payment.firecode )
        if( payment.basicdisc > payment.basic ) throw new Exception('Basic Discount must be less than Basic.')
        if( payment.sefdisc > payment.sef ) throw new Exception('SEF Discount must be less than SEF.')
        
        payment.period = determinePaidPeriod( payment )
        calcTotal()
        if( MsgBox.confirm('Posted payment could no longer be edited.\nPlease verify the information is correct.\n\nPost?') ) {
            if( onadd ) {
                onadd( payment )
            }
            return '_close' 
        }
        return 'default' 
    }
    
    void calcTotal(){
        payment.amount = payment.basic + payment.basicint - payment.basicdisc +
                        payment.sef + payment.sefint - payment.sefdisc + payment.firecode
        binding.refresh('payment.total')
    }
    
    def determinePaidPeriod( item ) {
        if( item.fromyear == item.toyear && item.fromqtr == 1 && item.toqtr == 4 ) 
            return 'Full ' + item.fromyear 
        if( item.fromyear == item.toyear && item.fromqtr == item.toqtr  ) 
            return item.fromqtr + 'Q, ' + item.fromyear 
        if( item.fromyear == item.toyear ) 
            return item.fromqtr + '-' + item.toqtr + 'Q, ' + item.fromyear 
        if(  item.fromqtr == 1 && item.toqtr == 4 ) 
            return 'Full ' + item.fromyear + '-' + item.toyear 
        return item.fromqtr + 'Q,' + item.fromyear + '-' + item.toqtr + 'Q,' + item.toyear 
    }
    
    List getQuarters() {
        return [1,2,3,4]
    }
    
    void checkNegative( caption, value ) {
        if( value == null ) throw new Exception( caption + ' must not be null.')
        if( value < 0.0 ) throw new Exception( 'Negative value for ' + caption + ' is not allowed.')
    }
}


]]>
    </code>
    
    <pages>
        <page template="com.rameses.gov.etracs.rpt.ledger.ui.RPTCapturePaymentPage" />
    </pages>
</workunit>
