<?xml version="1.0" encoding="UTF-8"?>
<workunit>
    <invokers>
        <invoker folderid="/explorer/txn/rpt/util" action="init" caption="Modify PIN" target="popup" index="500"
            role="APPRAISER" permission="util.modifypin" />
        <invoker type="faas:formActions" action="initFromFaas" caption="Modify PIN" target="popup" index="500"
            role="APPRAISER" permission="util.modifypin" visibleWhen="#{mode=='edit' &amp;&amp; faas.rpu.rputype=='land'}"/>
    </invokers>
    
    <code lang="groovy">

<![CDATA[        

import com.rameses.rcp.common.*
import com.rameses.rcp.annotations.*
import com.rameses.osiris2.client.*

public class ModifyPINUtilityController {
    
    @Binding
    def binding
    
    @Caller
    def caller
    
    @Service('RPTUtilityService') 
    def svc 
    
    @Service('LGUService')
    def lguSvc
    
    @Service('Var')
    def sysVar
    
    def entity
    def faas
    def pintype
    def provcity
    def munidistrict
    def barangay
    def section  = 0
    def parcel = 0
    def suffix = 0
    def ssection 
    def sparcel
    def newpin
    def useoldpin = false
    def mode  = 'update'
    
    def lgutype
    
    void initFromFaas(){
        mode = 'byfaas'
        lgutype = sysVar.lgu_type
        faas = entity;
        barangay = lguSvc.lookupBarangayById(faas.rpu.rp.barangayid)
        munidistrict = lguSvc.lookupMunicipalityById( barangay.parentid )
        if (! munidistrict) munidistrict = lguSvc.lookupDistrictById( barangay.parentid)
        provcity = lguSvc.lookupProvinceById(munidistrict.parentid)
        if (!provcity) provcity = lguSvc.lookupCityById(munidistrict.parentid)
        
        provcity = provcityList.find{it.objid == provcity.objid}
        munidistrict = muniDistrictList.find{it.objid == munidistrict.objid}
        barangay = barangayList.find{it.objid == barangay.objid}
    }
    
    
    void init(){
        lgutype = sysVar.lgu_type
    }
    
    def updatePin() {
        if( MsgBox.confirm('Update existing PIN with new information?') ) {
            def rp = svc.updatePin([
                faasid      : faas.objid,
                rpuid       : (faas.rpuid ? faas.rpuid : faas.rpu.objid),
                rputype     : (faas.rputype ? faas.rputype : faas.rpu.rputype),
                docstate    : faas.state, 
                oldpin      : (faas.fullpin ? faas.fullpin : faas.rpu.fullpin),
                ry          : faas.ry,
                pintype     : pintype,
                lgutype     : lgutype,
                barangay    : barangay,
                section     : section,
                parcel      : parcel,
                suffix      : suffix,
                ssection    : ssection,
                sparcel     : sparcel,
                newpin      : newpin
            ])
            caller.faas.rpu.fullpin = newpin
            if ( rp ) {
                caller.faas.rpu.rp.pintype = rp.pintype 
                caller.faas.rpu.rp.pin = rp.pin
                caller.faas.rpu.rp.section = rp.section
                caller.faas.rpu.rp.parcel = rp.parcel
            }
            clearInfo()
            binding?.focus('faas')
        }
        if ( mode == 'byfaas') {
            caller.binding.refresh('faas.rpu.*')
            return '_close'
        }
    }
    
    void clearInfo() {
        faas        = null
        pintype     = 'new' 
        provcity    = null
        barangay    = null    
        section     = 0
        parcel      = 0
        suffix      = 0
        ssection    = null 
        sparcel     = null 
        newpin      = null 
        useoldpin   = false
    }
    
    void setPintype( pintype ) {
        this.pintype = pintype 
        updateNewPin()
    }
    
    void setProvcity( provcity ) {
        this.provcity = provcity
        updateNewPin()
    }
    
    void setMunidistrict( munidistrict ) {
        this.munidistrict = munidistrict
        updateNewPin()
    }
    
    void setBarangay( barangay ) {
        this.barangay = barangay
        updateNewPin()
    }
    
    void setSection( section ) {
        this.section = section
        updateNewPin()
    }
    
    void setParcel( parcel ) {
        this.parcel = parcel 
        updateNewPin()
    }
    
    void setSuffix( suffix) {
        this.suffix = suffix 
        updateNewPin()
    }
    
    void setUseoldpin( useoldpin ) {
        this.useoldpin = useoldpin 
        updateNewPin()
    }
    
    void updateNewPin() {
        newpin = new StringBuilder()
        
        if( 'city'.equalsIgnoreCase(lgutype)) {
            if( provcity ) {
                newpin = provcity.indexno + '-'
            }
            else {
                newpin = '000-'
            }
            
            if( munidistrict ) {
                newpin += munidistrict.indexno + '-'
            }
            else {
                newpin += '00-'
            }
        }
        else {
            if( provcity ) {
                newpin = provcity.pin + '-'
            }
            else {
                newpin = '000-00-'
            }
        }
        
        if( barangay && barangay.oldindexno == null) {
            barangay.oldindexno = barangay.indexno 
        }
        
        if( barangay && useoldpin ) {
            newpin += barangay?.oldindexno + '-'
        }
        else if( barangay) {
            newpin += barangay?.indexno + '-'
        }
        else {
            newpin += '0000-'
        }        
        
        
        if( section > 0 ) {
            ssection = section.toString()
            ssection = ( pintype == 'new' ? ssection.padLeft(3,'0') : ssection.padLeft(2,'0'))
            newpin += ssection + '-'
        }
        else {
            ssection = ( pintype == 'new' ? '000' : '00') 
            newpin += ssection + '-'
        }
        
        if( parcel > 0 ) {
            sparcel = parcel.toString()
            sparcel = ( pintype == 'new' ? sparcel.padLeft(2,'0') : sparcel.padLeft(3,'0'))
            newpin += sparcel
        }
        else {
            sparcel = ( pintype == 'new' ? '00' : '000')
            newpin += sparcel 
        }
        
        if( suffix > 0){
            newpin += '-' + suffix.toString().padLeft(4,'0')
        }
        
        binding?.refresh('newpin')
    }
    
    
    def getLookupFaas() {
        return InvokerUtil.lookupOpener('faas:lookup',[:])
    }
    
    def void setFaas(def f) {
        this.faas = f; 
        suffix = 0
        if( f.rputype != 'land' ) {
            def idx = f.fullpin.lastIndexOf('-') + 1
            def len = f.fullpin.length()-1
            try {
                suffix = Integer.parseInt( f.fullpin[ idx..len] )
            }
            catch( e ) {
                suffix = 0
            }
            binding.refresh('suffix ')
        }
    }
    
    List getPinTypeList() {
        return ['new', 'old']
    }
    
    
    List getProvcityList() {
        def list = []
        list += lguSvc.lookupCities([:]);
        list += lguSvc.lookupProvinces([:]);
        return list;
    }
    
    List getMuniDistrictList() {
        def list = []
        list += lguSvc.lookupMunicipalities([:])
        list += lguSvc.lookupDistricts([:])
        return list;
    }
    
    List getBarangayList() {
        return lguSvc.lookupBarangaysByParentid(munidistrict?.objid);
    }
    
}

]]>
</code>
    
    <pages>
        <page template="com.rameses.gov.etracs.rpt.utils.ModifyPinPage" />
    </pages>
</workunit>

