<?xml version="1.0" encoding="UTF-8"?>
<workunit>
    <invokers>
        <invoker type="subdivision:info" action="init" caption="Affected RPUs" index="10"/>
        <invoker type="formActions" action="refresh" caption="Refresh" mnemonic="r" />
        <invoker type="formActions" action="edit" caption="Edit" mnemonic="e" visibleWhen="#{showActions == true}" role="TAXMAPPER"/>
        <invoker type="formActions" action="save" caption="Save" mnemonic="s" visibleWhen="#{mode != 'read'}" />
   </invokers>
   <code>

<![CDATA[
        
import com.rameses.rcp.annotations.* 
import com.rameses.rcp.common.* 
import com.rameses.osiris2.client.*
import com.rameses.osiris2.common.*
import com.rameses.gov.etracs.rpt.common.RPTUtil;

class SubdivisionAffectedRpuController
{
    @Binding
    def binding;
    
    @Caller
    def caller;
    
    def svc;
    
    def entity;
    def selectedItem;
    
    String title = 'Affected RPUs Information';
    
    def lands;
    def affectedrpus;
    def mode;
    
    def MODE_READ = 'read';
    def MODE_EDIT = 'edit';
    
    void init(){
        lands = svc.getSubdividedLands(entity.objid);
        affectedrpus = svc.getAffectedRpus(entity.objid);
        mode = MODE_READ;
    }
    
    
    void edit(){
        caller.addMessage([type:'affectedrpu', msg:'Affected RPUs is still in editing mode.']);
        mode = MODE_EDIT;
    }
    
    void save(){
        caller.clearMessages('affectedrpu');
        mode = MODE_READ;
    }
    
    void refresh(){
        lands = svc.getSubdividedLands(entity.objid);
        affectedrpus = svc.getAffectedRpus(entity.objid);
        affectedrpuListHandler.load();
    }
    
    def affectedrpuListHandler = [
        getRows : { return 250 },
            
        fetchList : { return affectedrpus },
                
        onColumnUpdate : {arpu, colname ->
            if (colname == 'newpin'){
                validateNewPin(arpu)
            }
        },
                
        validate : { li -> 
            def arpu = li.item;
            RPTUtil.required('New PIN', arpu.newpin);
            RPTUtil.required('New Suffix', arpu.newsuffix)
            RPTUtil.required('Memoranda', arpu.memoranda)
            validateNewPin(arpu)
            svc.saveAffectedRpu(arpu);
        }
        
    ] as EditorListModel 
            
            
    void validateNewPin(arpu){
        def sland = lands.find{ it.newpin == arpu.newpin }
        if (!sland) throw new Exception('PIN entered is invalid. The PIN does not exist on the list of Subdivided Lands.')
        arpu.itemno = sland.itemno;
        arpu.subdividedlandid = sland.objid;
        arpu.newrpid = sland.newrpid;
    }
    
    
    def getCount(){
        if (affectedrpus)
            return affectedrpus.size();
        return 0;
    }
    
        
    boolean getShowActions(){
        if (entity.state.matches('FORAPPROVAL|FORPROVAPPROVAL|APPROVED')) return false;
        if (mode != MODE_READ) return false;
        return true;
    }
    
    boolean getAllowEdit(){
        if (entity.state.matches('FORAPPROVAL|FORPROVAPPROVAL|APPROVED')) return false;
        if ( ! entity.state.matches('FORTAXMAPPING') ) return false;
        if (mode == MODE_READ) return false;
        return true;
    }
    
}
       
]]>

   </code>
    
    <pages> 
        <page template="com.rameses.gov.etracs.rpt.subdivision.ui.SubdivisionAffectedRpuPage"/>
    </pages>
</workunit>


